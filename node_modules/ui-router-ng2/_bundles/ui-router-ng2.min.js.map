{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///ui-router-ng2.min.js","webpack:///webpack/bootstrap e15a5c3ae1099462e49b?3744","webpack:///./ng2.ts?8f8f","webpack:///./core.ts?b26d","webpack:///./common/module.ts?216c","webpack:///./common/common.ts?a996","webpack:///./common/predicates.ts?3346","webpack:///./common/hof.ts?2590","webpack:///./common/coreservices.ts?cb79","webpack:///./common/glob.ts?9f85","webpack:///./common/queue.ts?8dfe","webpack:///./common/strings.ts?4a12","webpack:///./transition/rejectFactory.ts?39fa","webpack:///./transition/transition.ts?e0c6","webpack:///./common/trace.ts?3953","webpack:///./transition/transitionHook.ts?c175","webpack:///./state/targetState.ts?636d","webpack:///./transition/hookRegistry.ts?78c1","webpack:///./transition/hookBuilder.ts?5cba","webpack:///./resolve/resolveContext.ts?db0c","webpack:///./resolve/interface.ts?9672","webpack:///./resolve/resolvable.ts?7476","webpack:///./path/pathFactory.ts?5cf3","webpack:///./path/node.ts?f81c","webpack:///./params/param.ts?aa0b","webpack:///./url/urlMatcherConfig.ts?a46d","webpack:///./params/type.ts?5680","webpack:///./params/paramTypes.ts?33e0","webpack:///./router.ts?40b8","webpack:///./url/urlMatcherFactory.ts?0f3e","webpack:///./url/urlMatcher.ts?0536","webpack:///./url/urlRouter.ts?9e8a","webpack:///./state/state.ts?0c7b","webpack:///./transition/transitionService.ts?5ce0","webpack:///./hooks/resolve.ts?8bdd","webpack:///./hooks/views.ts?6163","webpack:///./hooks/url.ts?3bd9","webpack:///./hooks/redirectTo.ts?7129","webpack:///./hooks/onEnterExitRetain.ts?06b0","webpack:///./view/view.ts?e0c9","webpack:///./state/stateRegistry.ts?fafa","webpack:///./state/stateMatcher.ts?e974","webpack:///./state/stateBuilder.ts?59db","webpack:///./state/stateQueueManager.ts?3dba","webpack:///./state/stateObject.ts?1897","webpack:///./state/stateService.ts?6000","webpack:///./globals.ts?3d7d","webpack:///./params/stateParams.ts?1d6b","webpack:///./params/module.ts?b035","webpack:///./path/module.ts?805c","webpack:///./resolve/module.ts?ed8e","webpack:///./state/module.ts?4f0c","webpack:///./transition/module.ts?dde7","webpack:///./url/module.ts?b91a","webpack:///./view/module.ts?7429","webpack:///./justjs.ts?27aa","webpack:///./ng2/providers.ts?7643","webpack:///external {\"root\":\"@angular/core\",\"amd\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"commonjs\":\"@angular/core\"}?3485","webpack:///./ng2/directives/uiView.ts?b0de","webpack:///./ng2/statebuilders/views.ts?167b","webpack:///./ng2/uiRouterConfig.ts?bcb9","webpack:///./ng2/location.ts?677f","webpack:///external {\"root\":\"@angular/common\",\"amd\":\"@angular/common\",\"commonjs2\":\"@angular/common\",\"commonjs\":\"@angular/common\"}?3483","webpack:///./ng2/directives/directives.ts?61be","webpack:///./ng2/directives/uiSref.ts?3283","webpack:///./ng2/directives/uiSrefActive.ts?b4b9","webpack:///./ng2/directives/uiSrefStatus.ts?79ed"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_55__","__WEBPACK_EXTERNAL_MODULE_60__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__export","hasOwnProperty","router_1","UIRouter","bindFunctions","from","to","bindTo","fnNames","Object","keys","filter","name","forEach","bind","defaults","opts","defaultsList","_i","arguments","length","merge","apply","concat","extend","pick","dst","objs","obj","value","key","ancestors","first","second","path","n","push","equalForKeys","a","b","i","k","pickOmitImpl","predicate","objCopy","restArgs","inArray","omit","hof_1","not","pluck","collection","propName","map","prop","callback","arr","predicates_1","isArray","result","accept","x","item","find","pushR","assertPredicate","errMsg","Error","isFunction","arrayTuples","arrayArgs","reduce","min","Math","Array","ignored","idx","applyPairs","memo","keyValTuple","isString","tail","undefined","_copy","src","dest","_forEach","cb","_this","_copyProps","_extend","toObj","rest","identity","_equals","o1","o2","t1","t2","tup","all","_arraysEq","isDate","getTime","isRegExp","toString","predicates","any","fn","a1","a2","t","coreservices_1","w","window","angular","fromJson","JSON","parse","toJson","stringify","copy","equals","noop","abstractKey","inherit","parent","extra","prototype","args","slice","array","indexOf","removeFrom","curry","splice","mergeR","mapObj","values","allTrueR","elem","anyTrueR","unnestR","flattenR","uniqR","acc","token","unnest","flatten","pairs","object","silenceUncaughtInPromise","promise","e","silentRejection","error","services","$q","reject","isInjectable","val","head","toStr","tis","isUndefined","isDefined","isNull","o","isNumber","isObject","isPromise","and","pipe","curried","func_args_length","initial_args","compose","start","funcs","reverse","fn1","fn2","or","invoke","fnName","pattern","struct","propEq","split","none","is","ctor","constructor","eq","other","v","notImplemented","fnname","$injector","location","locationConfig","template","Glob","text","glob","matches","segments","l","unshift","Number","MAX_VALUE","join","fromString","Queue","_items","_limit","enqueue","items","shift","dequeue","size","clear","current","remove","peekTail","peekHead","maxLength","max","str","substr","padString","kebobString","camelCase","replace","$1","toLowerCase","functionToString","fnStr","fnToString","namedFunctionMatch","match","_fn","format","seen","stringifyPattern","rejectFactory_1","common_1","transition_1","resolvable_1","stringifyPatternFn","isTransitionRejectionPromise","Rejection","_transitionRejection","Transition","Resolvable","beforeAfterSubstr","char","strings_1","RejectType","type","message","detail","detailString","d","toPromise","then","superseded","options","rejection","SUPERSEDED","redirected","invalid","INVALID","IGNORED","aborted","ABORTED","errored","ERROR","trace_1","transitionHook_1","hookRegistry_1","hookBuilder_1","node_1","pathFactory_1","targetState_1","param_1","resolveContext_1","transitionCount","stateSelf","fromPath","targetState","router","_deferred","defer","treeChanges","_treeChanges","isActive","_options","valid","HookRegistry","mixin","$id","toPath","PathFactory","buildToPath","reloadState","enteringStates","entering","node","state","applyViewConfigs","transitionService","$view","rootResolvables","params","rootNode","context","ResolveContext","addResolvables","onBefore","matchCriteria","onStart","onExit","onRetain","onEnter","onFinish","onSuccess","onError","$from","$to","self","compare","matchState","pathname","injector","subPath","getResolveTokens","getTokens","getResolveValue","resolveContext","getData","resolvable","getResolvable","data","addResolvable","stateName","topath","targetNode","previous","exiting","retained","views","redirect","newOptions","TargetState","identifier","$state","newTransition","create","originalEnteringNodes","redirectEnteringNodes","nodeIsReloading","includes","matchingEnteringNodes","PathNode","matching","resolvables","_changedParams","_a","reload","nodeSchemas","paramSchema","_b","paramValues","toValues","fromValues","tuples","schema","toVals","fromVals","Param","changed","dynamic","changes","hookBuilder","HookBuilder","transition","run","runSynchronousHooks","TransitionHook","globals","transitionHistory","syncResult","getOnBeforeHooks","rejectReason","trace","traceTransitionIgnored","transitionSuccess","traceSuccess","success","resolve","getOnSuccessHooks","transitionError","traceError","getOnErrorHooks","traceTransitionStart","appendHookToChain","prev","nextHook","invokeHook","asyncHooks","validates","parameters","fromStateOrName","toStateOrName","avoidEmptyHash","fromParams","toValid","toParams","diToken","uiViewString","viewData","creationContext","fqn","normalizedCat","input","Category","viewConfigString","viewConfig","viewDecl","$context","$uiViewName","$uiViewContextAnchor","Trace","_enabled","approximateDigests","_set","enabled","categories","isNaN","parseInt","category","enable","disable","TRANSITION","tid","digest","transitionStr","console","log","trans","traceHookInvocation","step","HOOK","event","traceHookResult","hookResult","transitionResult","transitionOptions","hookResultStr","transitionResultStr","traceResolvePath","when","RESOLVE","pathStr","traceResolvableResolved","resolvableStr","finalState","traceUIViewEvent","UIVIEW","traceUIViewConfigUpdated","traceUIViewScopeCreated","newScope","traceUIViewFill","html","traceViewServiceEvent","VIEWCONFIG","traceViewServiceUIViewEvent","defaultOptions","async","rejectIfSuperseded","traceData","stateContext","hookFn","isSuperseded","handleHookResult","mapHookResult","target","hooks","swallowExceptions","results","exception","rejections","chain","_identifier","_definition","_params","exists","base","relative","criterion","matchGlobs","_state","globStrings","toMatch","glob_1","matchFn","makeHookRegistrationFn","matchObject","eventHook","EventHook","priority","_matchingNodes","nodes","mc","allMatched","_transitionEvents","getHooks","source","tupleSort","reverseDepthSort","r","factor","depthDelta","hook","$transitions","baseHookOptions","_buildNodeHooks","getOnStartHooks","getOnExitHooks","stateHook","getOnRetainHooks","getOnEnterHooks","getOnFinishHooks","toState","fromState","onStartHooks","onExitHooks","onRetainHooks","onEnterHooks","onFinishHooks","hookType","matchingNodesProp","sortHooksFn","matchingHooks","_matchingHooks","makeTransitionHooks","matchingNodes","resolvePath","subContext","transitionHook","sort","tuple","hookName","reg","interface_1","resolvePolicies","ALL_WHENS","EAGER","LAZY","EAGER_WHENS","_path","newResolvables","whenOption","matchedWhens","promises","matchesRequestedPolicy","getPolicy","nodeResolvables","getResult","get","UIInjectorImpl","findNode","getDependencies","availableResolvables","res","getDependency","fromInjector","deps","resolved","getAsync","WAIT","NOWAIT","RXWAIT","defaultResolvePolicy","arg1","resolveFn","policy","literal","thisPolicy","statePolicy","resolvePolicy","getResolvableDependencies","invokeResolveFn","resolvedDeps","waitForRx","observable$","cached","cache","maybeWaitForRx","applyResolvedValue","resolvedValue","clone","makeTargetState","buildPath","applyRawParams","inheritParams","states","viewDecls","viewConfigs","view","createViewConfig","toKeys","nodeParamVals","makeInheritedParamsNode","toNode","toParamVals","incomingParamVals","fromParamVals","ownParamVals","applyToParams","retainedNode","cloned","keep","staticParams","nodesMatch","node1","node2","retainedWithToParams","elementIdx","getParamVal","paramDef","pDef","parameter","paramValsEq","pathA","pathB","unwrapShorthand","cfg","isShorthand","$$fn","getType","urlType","paramTypes_1","paramTypes","type_1","ParamType","DefType","CONFIG","getSquashPolicy","config","isOptional","squash","urlMatcherConfig_1","matcherConfig","defaultSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","hasOwn","getArrayMode","arrayDefaults","SEARCH","arrayParamNomenclature","$asArray","isDefaultValue","$$getDefaultValue","defaultValue","$replace","replacement","$normalize","isSearch","normalized","encoded","encode","exec","fromConfig","PATH","fromSearch","param","values1","values2","MatcherConfig","_isCaseInsensitive","_isStrictMode","_defaultSquashPolicy","caseInsensitive","strictMode","ArrayType","mode","arrayWrap","arrayUnwrap","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","left","right","$arrayMode","def","decode","$subPattern","sub","valToString","valFromString","ParamTypes","typeQueue","defaultTypes","hash","String","string","int","bool","Boolean","date","getFullYear","getMonth","getDate","capture","Date","valueOf","json","makeType","definition","types","definitionFn","_flushTypeQueue","urlMatcherFactory_1","urlRouter_1","state_1","urlRouter_2","transitionService_1","view_1","stateRegistry_1","stateService_1","globals_1","viewService","ViewService","TransitionService","Globals","urlMatcherFactory","UrlMatcherFactory","urlRouterProvider","UrlRouterProvider","urlRouter","UrlRouter","stateRegistry","StateRegistry","stateProvider","StateProvider","stateService","StateService","rootContext","$current","getDefaultConfig","strict","urlMatcher_1","UrlMatcher","compile","isMatcher","$get","quoteRegExp","surroundPattern","predicates_2","param_2","common_2","common_3","memoizeTo","_cache","_children","_segments","_compiled","paramMap","segment","placeholder","searchPlaceholder","last","patterns","checkParamErrors","nameValidator","test","matchDetails","regexp","substring","index","RegExp","lastIndex","search","prefix","freeze","append","url","isRoot","decodePathArray","reverseString","unquoteDashes","allReversed","allParams","pathParams","searchParams","nPathSegments","urlm","j","validParamVal","getDetails","urlMatchers","pathSegmentsAndParams","queryParams","pathString","encodeDashes","raw","encodeURIComponent","queryString","charCodeAt","toUpperCase","matcher","staticSegments","regExpPrefix","re","interpolate","what","handleIfMatch","$stateParams","handler","$match","appendBasePath","isHtml5","absolute","baseHref","update","rules","otherwiseFn","evt","check","rule","handled","$location","defaultPrevented","$urlMatcherFactory","interceptDeferred","otherwise","handlerIsString","strategies","_what","_handler","regex","global","sticky","deferIntercept","sync","listen","listener","onChange","read","urlMatcher","href","html5Mode","hashPrefix","slash","port","protocol","host","invalidCallbacks","decorator","func","register","onInvalid","resolve_1","views_1","url_1","redirectTo_1","onEnterExitRetain_1","defaultTransOpts","notify","custom","_router","_deregisterHookFns","registerTransitionHooks","fns","redirectTo","redirectToHook","onExitHook","onRetainHook","onEnterHook","eagerResolve","eagerResolvePath","lazyResolve","lazyResolveState","loadViews","loadEnteringViews","activateViews","updateUrl","enteringViews","load","exitingViews","vc","deactivateViewConfig","activateViewConfig","$urlRouter","navigable","urlOptions","handleResult","makeEnterExitRetainHook","uiViews","_viewConfigFactories","uiViewDepth","uiView","viewConfigDepth","count","uiViewsByFqn","uiv","$type","vcSegments","uivSegments","negOffset","fqnToFirstSegment","uiViewContext","depthCompare","depthFn","posNeg","matchingConfigPair","matchingConfigs","configureUIView","configUpdated","_rootContext","viewConfigFactory","viewType","decl","cfgFactory","cfgs","registerUIView","fqnMatches","available","active","normalizeUIViewTarget","rawViewName","viewAtContext","uiViewName","uiViewContextAnchor","relativeViewNameSugar","charAt","relativeMatch","anchor","stateMatcher_1","stateBuilder_1","stateQueueManager_1","StateMatcher","builder","StateBuilder","stateQueue","StateQueueManager","rootStateDef","#","abstract","_root","stateDefinition","stateOrName","found","_states","isRelative","isStr","baseState","splitName","pathLength","relName","selfBuilder","$$state","dataBuilder","paramsBuilder","makeConfigParam","urlParams","nonUrlParams","pathBuilder","includesBuilder","resolvablesBuilder","obj2Tuples","annotate","$inject","strictDi","isResolveLiteral","isLikeNg2Provider","provide","useValue","useFactory","useExisting","useClass","isTupleFromObj","literal2Resolvable","dependencies","tuple2Resolvable","item2Resolvable","parseUrl","getUrlBuilder","$urlMatcherFactoryProvider","stateDec","parsed","paramConfig","reloadOnSearch","getNavigableBuilder","parentBuilder","parentName","builders","build","parentFn","lastIndexOf","stateObject_1","$urlRouterProvider","queue","State","flush","orphanIdx","orphans","previousQueueLength","attachRoute","autoFlush","transitionTo","ref","inherited","queue_1","_defaultErrorHandler","$error$","stack","getters","boundFns","defineProperty","enumerable","configurable","_handleInvalidTargetState","$to$","invokeNextCallback","nextCallback","callbackQueue","invokeCallback","checkForRedirect","latestThing","latest","$from$","go","defautGoOpts","transOpts","transHistory","latestSuccess","successfulTransitions","rootPath","currentPath","rejectedTransitionHandler","errorHandler","defaultErrorHandler","transitionToPromise","include","defaultHrefOpts","lossy","$inherit","nav","stateParams_1","StateParams","beforeNewTransition","$transition$","updateGlobalState","clearCurrentTransition","newParams","parentParams","parents","inheritList","executor","Promise","deferred","objectToTuples","tuplesToObject","has","locals","ensureExist","STRIP_COMMENTS","ARGUMENT_NAMES","loc","addEventListener","locCfg","core_1","uiView_1","uiRouterConfig_1","location_1","uiRouterFactory","routerConfig","init","Ng2ViewConfig","ng2ViewsBuilder","setTimeout","configure","UIROUTER_PROVIDERS","UIRouterConfig","UIRouterLocation","Injector","UIView","PARENT_INJECT","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__metadata","metadata","__param","paramIndex","core_2","core_3","ng2ComponentInputs","ng2CompClass","props","_props","annoArr","anno","InputMetadata","bindingPropertyName","inputs","ComponentMetadata","compResolver","viewContainerRef","uiViewData","set","ngOnInit","parentFqn","viewConfigUpdated","deregister","disposeLast","componentRef","destroy","ngOnDestroy","rawProviders","componentType","component","createComponent","parentInjector","childInjector","ReflectiveInjector","resolveAndCreate","componentTarget","bindings","inputTuples","instance","changeDetectorRef","detectChanges","resolveComponent","ViewChild","ViewContainerRef","Input","Component","selector","Inject","ComponentResolver","viewsObject","$default","$name","uiRouter","splitOnHash","splitOnEquals","splitOnQuestionMark","locationStrategy","platformLocation","isHashBang","HashLocationStrategy","locSt","basepath","getBaseHref","basepathRegExp_1","replace_1","kv","pushState","onPopState","newprefix","Injectable","LocationStrategy","PlatformLocation","uiSref_1","uiSrefActive_1","uiSrefStatus_1","UIROUTER_DIRECTIVES","UISref","AnchorUISref","UISrefActive","UISrefStatus","core_4","_el","_renderer","setElementProperty","nativeElement","Directive","ElementRef","Renderer","_anchorUISref","getOptions","defOpts","(click)","Optional","uiSrefStatus","rnd","_classes","_classesEq","subscribe","next","cls","setElementClass","exact","Host","_globals","_stateService","sref","EventEmitter","status","_deregisterHook","processTransition","lastTrans","_setStatus","emit","spreadToSubPaths","appendTo","srefTarget","pathMatches","targetParamVals","targetPath","tailNode","isTarget","tc","Output"],"mappings":"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","file":"ui-router-ng2.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"@angular/common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ui-router-ng2\", [\"@angular/core\", \"@angular/common\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ui-router-ng2\"] = factory(require(\"@angular/core\"), require(\"@angular/common\"));\n\telse\n\t\troot[\"ui-router-ng2\"] = factory(root[\"@angular/core\"], root[\"@angular/common\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_55__, __WEBPACK_EXTERNAL_MODULE_60__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"@angular/common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ui-router-ng2\", [\"@angular/core\", \"@angular/common\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ui-router-ng2\"] = factory(require(\"@angular/core\"), require(\"@angular/common\"));\n\telse\n\t\troot[\"ui-router-ng2\"] = factory(root[\"@angular/core\"], root[\"@angular/common\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_55__, __WEBPACK_EXTERNAL_MODULE_60__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Main entry point for angular 2.x build\n\t * @module ng2\n\t */\n\t/** for typedoc */\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(1));\n\t__webpack_require__(53);\n\t__export(__webpack_require__(54));\n\t__export(__webpack_require__(59));\n\t__export(__webpack_require__(61));\n\t__export(__webpack_require__(57));\n\t__export(__webpack_require__(58));\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common */ /** */\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(2));\n\t__export(__webpack_require__(46));\n\t__export(__webpack_require__(47));\n\t__export(__webpack_require__(48));\n\t__export(__webpack_require__(49));\n\t__export(__webpack_require__(50));\n\t__export(__webpack_require__(51));\n\t__export(__webpack_require__(52));\n\t__export(__webpack_require__(44));\n\tvar router_1 = __webpack_require__(26);\n\texports.UIRouter = router_1.UIRouter;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module common */ /** for typedoc */\n\t__export(__webpack_require__(3));\n\t__export(__webpack_require__(6));\n\t__export(__webpack_require__(7));\n\t__export(__webpack_require__(5));\n\t__export(__webpack_require__(4));\n\t__export(__webpack_require__(8));\n\t__export(__webpack_require__(9));\n\t__export(__webpack_require__(12));\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Random utility functions used in the UI-Router code\n\t *\n\t * @preferred @module common\n\t */ /** for typedoc */\n\t\"use strict\";\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar w = typeof window === 'undefined' ? {} : window;\n\tvar angular = w.angular || {};\n\texports.fromJson = angular.fromJson || JSON.parse.bind(JSON);\n\texports.toJson = angular.toJson || JSON.stringify.bind(JSON);\n\texports.copy = angular.copy || _copy;\n\texports.forEach = angular.forEach || _forEach;\n\texports.extend = angular.extend || _extend;\n\texports.equals = angular.equals || _equals;\n\texports.identity = function (x) { return x; };\n\texports.noop = function () { return undefined; };\n\texports.abstractKey = 'abstract';\n\t/**\n\t * Binds and copies functions onto an object\n\t *\n\t * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n\t * on the 'to' object.\n\t *\n\t * This example creates an new class instance whose functions are prebound to the new'd object.\n\t * @example\n\t * ```\n\t *\n\t * class Foo {\n\t *   constructor(data) {\n\t *     // Binds all functions from Foo.prototype to 'this',\n\t *     // then copies them to 'this'\n\t *     bindFunctions(Foo.prototype, this, this);\n\t *     this.data = data;\n\t *   }\n\t *\n\t *   log() {\n\t *     console.log(this.data);\n\t *   }\n\t * }\n\t *\n\t * let myFoo = new Foo([1,2,3]);\n\t * var logit = myFoo.log;\n\t * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n\t * ```\n\t *\n\t * This example creates a bound version of a service function, and copies it to another object\n\t * @example\n\t * ```\n\t *\n\t * var SomeService = {\n\t *   this.data = [3, 4, 5];\n\t *   this.log = function() {\n\t *     console.log(this.data);\n\t *   }\n\t * }\n\t *\n\t * // Constructor fn\n\t * function OtherThing() {\n\t *   // Binds all functions from SomeService to SomeService,\n\t *   // then copies them to 'this'\n\t *   bindFunctions(SomeService, this, SomeService);\n\t * }\n\t *\n\t * let myOtherThing = new OtherThing();\n\t * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n\t * ```\n\t *\n\t * @param from The object which contains the functions to be bound\n\t * @param to The object which will receive the bound functions\n\t * @param bindTo The object which the functions will be bound to\n\t * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n\t */\n\tfunction bindFunctions(from, to, bindTo, fnNames) {\n\t    if (fnNames === void 0) { fnNames = Object.keys(from); }\n\t    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })\n\t        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });\n\t}\n\texports.bindFunctions = bindFunctions;\n\t/**\n\t * prototypal inheritance helper.\n\t * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n\t */\n\texports.inherit = function (parent, extra) {\n\t    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);\n\t};\n\t/**\n\t * Given an arguments object, converts the arguments at index idx and above to an array.\n\t * This is similar to es6 rest parameters.\n\t *\n\t * Optionally, the argument at index idx may itself already be an array.\n\t *\n\t * For example,\n\t * given either:\n\t *        arguments = [ obj, \"foo\", \"bar\" ]\n\t * or:\n\t *        arguments = [ obj, [\"foo\", \"bar\"] ]\n\t * then:\n\t *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n\t *\n\t * This allows functions like pick() to be implemented such that it allows either a bunch\n\t * of string arguments (like es6 rest parameters), or a single array of strings:\n\t *\n\t * given:\n\t *        var obj = { foo: 1, bar: 2, baz: 3 };\n\t * then:\n\t *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n\t *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n\t */\n\tvar restArgs = function (args, idx) {\n\t    if (idx === void 0) { idx = 0; }\n\t    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\t};\n\t/** Given an array, returns true if the object is found in the array, (using indexOf) */\n\texports.inArray = function (array, obj) { return array.indexOf(obj) !== -1; };\n\t/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\n\texports.removeFrom = hof_1.curry(function (array, obj) {\n\t    var idx = array.indexOf(obj);\n\t    if (idx >= 0)\n\t        array.splice(idx, 1);\n\t    return array;\n\t});\n\t/**\n\t * Applies a set of defaults to an options object.  The options object is filtered\n\t * to only those properties of the objects in the defaultsList.\n\t * Earlier objects in the defaultsList take precedence when applying defaults.\n\t */\n\tfunction defaults(opts) {\n\t    if (opts === void 0) { opts = {}; }\n\t    var defaultsList = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        defaultsList[_i - 1] = arguments[_i];\n\t    }\n\t    var defaults = merge.apply(null, [{}].concat(defaultsList));\n\t    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n\t}\n\texports.defaults = defaults;\n\t/**\n\t * Merges properties from the list of objects to the destination object.\n\t * If a property already exists in the destination object, then it is not overwritten.\n\t */\n\tfunction merge(dst) {\n\t    var objs = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        objs[_i - 1] = arguments[_i];\n\t    }\n\t    exports.forEach(objs, function (obj) {\n\t        exports.forEach(obj, function (value, key) {\n\t            if (!dst.hasOwnProperty(key))\n\t                dst[key] = value;\n\t        });\n\t    });\n\t    return dst;\n\t}\n\texports.merge = merge;\n\t/** Reduce function that merges each element of the list into a single object, using extend */\n\texports.mergeR = function (memo, item) { return exports.extend(memo, item); };\n\t/**\n\t * Finds the common ancestor path between two states.\n\t *\n\t * @param {Object} first The first state.\n\t * @param {Object} second The second state.\n\t * @return {Array} Returns an array of state names in descending order, not including the root.\n\t */\n\tfunction ancestors(first, second) {\n\t    var path = [];\n\t    for (var n in first.path) {\n\t        if (first.path[n] !== second.path[n])\n\t            break;\n\t        path.push(first.path[n]);\n\t    }\n\t    return path;\n\t}\n\texports.ancestors = ancestors;\n\t/**\n\t * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n\t *\n\t * @param {Object} a The first object.\n\t * @param {Object} b The second object.\n\t * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n\t *                     it defaults to the list of keys in `a`.\n\t * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n\t */\n\tfunction equalForKeys(a, b, keys) {\n\t    if (keys === void 0) { keys = Object.keys(a); }\n\t    for (var i = 0; i < keys.length; i++) {\n\t        var k = keys[i];\n\t        if (a[k] != b[k])\n\t            return false; // Not '===', values aren't necessarily normalized\n\t    }\n\t    return true;\n\t}\n\texports.equalForKeys = equalForKeys;\n\tfunction pickOmitImpl(predicate, obj) {\n\t    var objCopy = {}, keys = restArgs(arguments, 2);\n\t    for (var key in obj) {\n\t        if (predicate(keys, key))\n\t            objCopy[key] = obj[key];\n\t    }\n\t    return objCopy;\n\t}\n\t/** Return a copy of the object only containing the whitelisted properties. */\n\tfunction pick(obj) { return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments))); }\n\texports.pick = pick;\n\t/** Return a copy of the object omitting the blacklisted properties. */\n\tfunction omit(obj) { return pickOmitImpl.apply(null, [hof_1.not(exports.inArray)].concat(restArgs(arguments))); }\n\texports.omit = omit;\n\t/**\n\t * Maps an array, or object to a property (by name)\n\t */\n\tfunction pluck(collection, propName) {\n\t    return map(collection, hof_1.prop(propName));\n\t}\n\texports.pluck = pluck;\n\t/** Filters an Array or an Object's properties based on a predicate */\n\tfunction filter(collection, callback) {\n\t    var arr = predicates_1.isArray(collection), result = arr ? [] : {};\n\t    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };\n\t    exports.forEach(collection, function (item, i) {\n\t        if (callback(item, i))\n\t            accept(item, i);\n\t    });\n\t    return result;\n\t}\n\texports.filter = filter;\n\t/** Finds an object from an array, or a property of an object, that matches a predicate */\n\tfunction find(collection, callback) {\n\t    var result;\n\t    exports.forEach(collection, function (item, i) {\n\t        if (result)\n\t            return;\n\t        if (callback(item, i))\n\t            result = item;\n\t    });\n\t    return result;\n\t}\n\texports.find = find;\n\t/** Given an object, returns a new object, where each property is transformed by the callback function */\n\texports.mapObj = map;\n\t/** Maps an array or object properties using a callback function */\n\tfunction map(collection, callback) {\n\t    var result = predicates_1.isArray(collection) ? [] : {};\n\t    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });\n\t    return result;\n\t}\n\texports.map = map;\n\t/**\n\t * Given an object, return its enumerable property values\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let foo = { a: 1, b: 2, c: 3 }\n\t * let vals = values(foo); // [ 1, 2, 3 ]\n\t * ```\n\t */\n\texports.values = function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); };\n\t/**\n\t * Reduce function that returns true if all of the values are truthy.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let vals = [ 1, true, {}, \"hello world\"];\n\t * vals.reduce(allTrueR, true); // true\n\t *\n\t * vals.push(0);\n\t * vals.reduce(allTrueR, true); // false\n\t * ```\n\t */\n\texports.allTrueR = function (memo, elem) { return memo && elem; };\n\t/**\n\t * Reduce function that returns true if any of the values are truthy.\n\t *\n\t *  * @example\n\t * ```\n\t *\n\t * let vals = [ 0, null, undefined ];\n\t * vals.reduce(anyTrueR, true); // false\n\t *\n\t * vals.push(\"hello world\");\n\t * vals.reduce(anyTrueR, true); // true\n\t * ```\n\t */\n\texports.anyTrueR = function (memo, elem) { return memo || elem; };\n\t/**\n\t * Reduce function which un-nests a single level of arrays\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n\t * ```\n\t */\n\texports.unnestR = function (memo, elem) { return memo.concat(elem); };\n\t/**\n\t * Reduce function which recursively un-nests all arrays\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n\t * ```\n\t */\n\texports.flattenR = function (memo, elem) { return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem); };\n\t/** Reduce function that pushes an object to an array, then returns the array.  Mostly just for [[flattenR]] */\n\tfunction pushR(arr, obj) { arr.push(obj); return arr; }\n\texports.pushR = pushR;\n\t/** Reduce function that filters out duplicates */\n\texports.uniqR = function (acc, token) { return exports.inArray(acc, token) ? acc : pushR(acc, token); };\n\t/**\n\t * Return a new array with a single level of arrays unnested.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n\t * ```\n\t */\n\texports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };\n\t/**\n\t * Return a completely flattened version of an array.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n\t * ```\n\t */\n\texports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };\n\t/**\n\t * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n\t * @example\n\t * ```\n\t *\n\t * let isNumber = (obj) => typeof(obj) === 'number';\n\t * let allNumbers = [ 1, 2, 3, 4, 5 ];\n\t * allNumbers.filter(assertPredicate(isNumber)); //OK\n\t *\n\t * let oneString = [ 1, 2, 3, 4, \"5\" ];\n\t * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n\t * ```\n\t */\n\tfunction assertPredicate(predicate, errMsg) {\n\t    if (errMsg === void 0) { errMsg = \"assert failure\"; }\n\t    return function (obj) {\n\t        if (!predicate(obj)) {\n\t            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);\n\t        }\n\t        return true;\n\t    };\n\t}\n\texports.assertPredicate = assertPredicate;\n\t/**\n\t * Like _.pairs: Given an object, returns an array of key/value pairs\n\t *\n\t * @example\n\t * ```\n\t *\n\t * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n\t * ```\n\t */\n\texports.pairs = function (object) { return Object.keys(object).map(function (key) { return [key, object[key]]; }); };\n\t/**\n\t * Given two or more parallel arrays, returns an array of tuples where\n\t * each tuple is composed of [ a[i], b[i], ... z[i] ]\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let foo = [ 0, 2, 4, 6 ];\n\t * let bar = [ 1, 3, 5, 7 ];\n\t * let baz = [ 10, 30, 50, 70 ];\n\t * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n\t * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n\t * ```\n\t */\n\tfunction arrayTuples() {\n\t    var arrayArgs = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        arrayArgs[_i - 0] = arguments[_i];\n\t    }\n\t    if (arrayArgs.length === 0)\n\t        return [];\n\t    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n\t    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });\n\t}\n\texports.arrayTuples = arrayTuples;\n\t/**\n\t * Reduce function which builds an object from an array of [key, value] pairs.\n\t *\n\t * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n\t *\n\t * Each keyValueTuple should be an array with values [ key: string, value: any ]\n\t *\n\t * @example\n\t * ```\n\t *\n\t * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n\t *\n\t * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n\t *\n\t * // Or, more simply:\n\t * var pairsToObj = pairs.reduce(applyPairs, {})\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n\t * ```\n\t */\n\tfunction applyPairs(memo, keyValTuple) {\n\t    var key, value;\n\t    if (predicates_1.isArray(keyValTuple))\n\t        key = keyValTuple[0], value = keyValTuple[1];\n\t    if (!predicates_1.isString(key))\n\t        throw new Error(\"invalid parameters to applyPairs\");\n\t    memo[key] = value;\n\t    return memo;\n\t}\n\texports.applyPairs = applyPairs;\n\t/** Get the last element of an array */\n\tfunction tail(arr) {\n\t    return arr.length && arr[arr.length - 1] || undefined;\n\t}\n\texports.tail = tail;\n\t/**\n\t * shallow copy from src to dest\n\t *\n\t * note: This is a shallow copy, while angular.copy is a deep copy.\n\t * ui-router uses `copy` only to make copies of state parameters.\n\t */\n\tfunction _copy(src, dest) {\n\t    if (dest)\n\t        Object.keys(dest).forEach(function (key) { return delete dest[key]; });\n\t    if (!dest)\n\t        dest = {};\n\t    return exports.extend(dest, src);\n\t}\n\tfunction _forEach(obj, cb, _this) {\n\t    if (predicates_1.isArray(obj))\n\t        return obj.forEach(cb, _this);\n\t    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });\n\t}\n\tfunction _copyProps(to, from) { Object.keys(from).forEach(function (key) { return to[key] = from[key]; }); return to; }\n\tfunction _extend(toObj, rest) {\n\t    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);\n\t}\n\tfunction _equals(o1, o2) {\n\t    if (o1 === o2)\n\t        return true;\n\t    if (o1 === null || o2 === null)\n\t        return false;\n\t    if (o1 !== o1 && o2 !== o2)\n\t        return true; // NaN === NaN\n\t    var t1 = typeof o1, t2 = typeof o2;\n\t    if (t1 !== t2 || t1 !== 'object')\n\t        return false;\n\t    var tup = [o1, o2];\n\t    if (hof_1.all(predicates_1.isArray)(tup))\n\t        return _arraysEq(o1, o2);\n\t    if (hof_1.all(predicates_1.isDate)(tup))\n\t        return o1.getTime() === o2.getTime();\n\t    if (hof_1.all(predicates_1.isRegExp)(tup))\n\t        return o1.toString() === o2.toString();\n\t    if (hof_1.all(predicates_1.isFunction)(tup))\n\t        return true; // meh\n\t    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];\n\t    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))\n\t        return false;\n\t    var key, keys = {};\n\t    for (key in o1) {\n\t        if (!_equals(o1[key], o2[key]))\n\t            return false;\n\t        keys[key] = true;\n\t    }\n\t    for (key in o2) {\n\t        if (!keys[key])\n\t            return false;\n\t    }\n\t    return true;\n\t}\n\tfunction _arraysEq(a1, a2) {\n\t    if (a1.length !== a2.length)\n\t        return false;\n\t    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);\n\t}\n\t// issue #2676\n\texports.silenceUncaughtInPromise = function (promise) {\n\t    return promise.catch(function (e) { return 0; }) && promise;\n\t};\n\texports.silentRejection = function (error) {\n\t    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));\n\t};\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** Predicates @module common_predicates */ /** */\n\tvar hof_1 = __webpack_require__(5);\n\tvar toStr = Object.prototype.toString;\n\tvar tis = function (t) { return function (x) { return typeof (x) === t; }; };\n\texports.isUndefined = tis('undefined');\n\texports.isDefined = hof_1.not(exports.isUndefined);\n\texports.isNull = function (o) { return o === null; };\n\texports.isFunction = tis('function');\n\texports.isNumber = tis('number');\n\texports.isString = tis('string');\n\texports.isObject = function (x) { return x !== null && typeof x === 'object'; };\n\texports.isArray = Array.isArray;\n\texports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });\n\texports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });\n\t/**\n\t * Predicate which checks if a value is injectable\n\t *\n\t * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n\t * where all the elements in the array are Strings, except the last one, which is a Function\n\t */\n\tfunction isInjectable(val) {\n\t    if (exports.isArray(val) && val.length) {\n\t        var head = val.slice(0, -1), tail = val.slice(-1);\n\t        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);\n\t    }\n\t    return exports.isFunction(val);\n\t}\n\texports.isInjectable = isInjectable;\n\t/**\n\t * Predicate which checks if a value looks like a Promise\n\t *\n\t * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n\t */\n\texports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Higher order functions\n\t *\n\t * @module common_hof\n\t */ /** */\n\t\"use strict\";\n\t/**\n\t * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n\t *\n\t * Given a function with N parameters, returns a new function that supports partial application.\n\t * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n\t * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n\t * accept more parameters until all N parameters have been supplied.\n\t *\n\t *\n\t * This contrived example uses a partially applied function as an predicate, which returns true\n\t * if an object is found in both arrays.\n\t * @example\n\t * ```\n\t * // returns true if an object is in both of the two arrays\n\t * function inBoth(array1, array2, object) {\n\t *   return array1.indexOf(object) !== -1 &&\n\t *          array2.indexOf(object) !== 1;\n\t * }\n\t * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n\t * let foos = [obj1, obj3]\n\t * let bars = [obj3, obj4, obj5]\n\t *\n\t * // A curried \"copy\" of inBoth\n\t * let curriedInBoth = curry(inBoth);\n\t * // Partially apply both the array1 and array2\n\t * let inFoosAndBars = curriedInBoth(foos, bars);\n\t *\n\t * // Supply the final argument; since all arguments are\n\t * // supplied, the original inBoth function is then called.\n\t * let obj1InBoth = inFoosAndBars(obj1); // false\n\t *\n\t * // Use the inFoosAndBars as a predicate.\n\t * // Filter, on each iteration, supplies the final argument\n\t * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n\t * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n\t *\n\t * ```\n\t *\n\t * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n\t *\n\t * @param fn\n\t * @returns {*|function(): (*|any)}\n\t */\n\tfunction curry(fn) {\n\t    var initial_args = [].slice.apply(arguments, [1]);\n\t    var func_args_length = fn.length;\n\t    function curried(args) {\n\t        if (args.length >= func_args_length)\n\t            return fn.apply(null, args);\n\t        return function () {\n\t            return curried(args.concat([].slice.apply(arguments)));\n\t        };\n\t    }\n\t    return curried(initial_args);\n\t}\n\texports.curry = curry;\n\t/**\n\t * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n\t * given: f(x), g(x), h(x)\n\t * let composed = compose(f,g,h)\n\t * then, composed is: f(g(h(x)))\n\t */\n\tfunction compose() {\n\t    var args = arguments;\n\t    var start = args.length - 1;\n\t    return function () {\n\t        var i = start, result = args[start].apply(this, arguments);\n\t        while (i--)\n\t            result = args[i].call(this, result);\n\t        return result;\n\t    };\n\t}\n\texports.compose = compose;\n\t/**\n\t * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n\t * given: f(x), g(x), h(x)\n\t * let piped = pipe(f,g,h);\n\t * then, piped is: h(g(f(x)))\n\t */\n\tfunction pipe() {\n\t    var funcs = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        funcs[_i - 0] = arguments[_i];\n\t    }\n\t    return compose.apply(null, [].slice.call(arguments).reverse());\n\t}\n\texports.pipe = pipe;\n\t/**\n\t * Given a property name, returns a function that returns that property from an object\n\t * let obj = { foo: 1, name: \"blarg\" };\n\t * let getName = prop(\"name\");\n\t * getName(obj) === \"blarg\"\n\t */\n\texports.prop = function (name) { return function (obj) { return obj && obj[name]; }; };\n\t/**\n\t * Given a property name and a value, returns a function that returns a boolean based on whether\n\t * the passed object has a property that matches the value\n\t * let obj = { foo: 1, name: \"blarg\" };\n\t * let getName = propEq(\"name\", \"blarg\");\n\t * getName(obj) === true\n\t */\n\texports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });\n\t/**\n\t * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n\t * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n\t * let getName = prop(\"nestedObj.name\");\n\t * getName(obj) === \"blarg\"\n\t * let propNotFound = prop(\"this.property.doesnt.exist\");\n\t * propNotFound(obj) === undefined\n\t */\n\texports.parse = function (name) { return pipe.apply(null, name.split(\".\").map(exports.prop)); };\n\t/**\n\t * Given a function that returns a truthy or falsey value, returns a\n\t * function that returns the opposite (falsey or truthy) value given the same inputs\n\t */\n\texports.not = function (fn) { return function () {\n\t    var args = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        args[_i - 0] = arguments[_i];\n\t    }\n\t    return !fn.apply(null, args);\n\t}; };\n\t/**\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\n\t * if both functions return truthy for the given arguments\n\t */\n\tfunction and(fn1, fn2) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        return fn1.apply(null, args) && fn2.apply(null, args);\n\t    };\n\t}\n\texports.and = and;\n\t/**\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\n\t * if at least one of the functions returns truthy for the given arguments\n\t */\n\tfunction or(fn1, fn2) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        return fn1.apply(null, args) || fn2.apply(null, args);\n\t    };\n\t}\n\texports.or = or;\n\t/**\n\t * Check if all the elements of an array match a predicate function\n\t *\n\t * @param fn1 a predicate function `fn1`\n\t * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n\t */\n\texports.all = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); }; };\n\texports.any = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); }; };\n\texports.none = exports.not(exports.any);\n\t/** Given a class, returns a Predicate function that returns true if the object is of that class */\n\texports.is = function (ctor) { return function (obj) { return (obj != null && obj.constructor === ctor || obj instanceof ctor); }; };\n\t/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\n\texports.eq = function (val) { return function (other) { return val === other; }; };\n\t/** Given a value, returns a function which returns the value */\n\texports.val = function (v) { return function () { return v; }; };\n\tfunction invoke(fnName, args) {\n\t    return function (obj) { return obj[fnName].apply(obj, args); };\n\t}\n\texports.invoke = invoke;\n\t/**\n\t * Sorta like Pattern Matching (a functional programming conditional construct)\n\t *\n\t * See http://c2.com/cgi/wiki?PatternMatching\n\t *\n\t * This is a conditional construct which allows a series of predicates and output functions\n\t * to be checked and then applied.  Each predicate receives the input.  If the predicate\n\t * returns truthy, then its matching output function (mapping function) is provided with\n\t * the input and, then the result is returned.\n\t *\n\t * Each combination (2-tuple) of predicate + output function should be placed in an array\n\t * of size 2: [ predicate, mapFn ]\n\t *\n\t * These 2-tuples should be put in an outer array.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * // Here's a 2-tuple where the first element is the isString predicate\n\t * // and the second element is a function that returns a description of the input\n\t * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n\t *\n\t * // Second tuple: predicate \"isNumber\", mapfn returns a description\n\t * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n\t *\n\t * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n\t *\n\t * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n\t *\n\t * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n\t *\n\t * console.log(descriptionOf(undefined)); // 'notdefined'\n\t * console.log(descriptionOf(55)); // '(55) That's a number!'\n\t * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n\t * ```\n\t *\n\t * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n\t * with a Predicate and a mapping/output function\n\t * @returns {function(any): *}\n\t */\n\tfunction pattern(struct) {\n\t    return function (x) {\n\t        for (var i = 0; i < struct.length; i++) {\n\t            if (struct[i][0](x))\n\t                return struct[i][1](x);\n\t        }\n\t    };\n\t}\n\texports.pattern = pattern;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This module is a stub for core services such as Dependency Injection or Browser Location.\n\t * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n\t *\n\t * @module common\n\t */\n\t\"use strict\";\n\t/** for typedoc */\n\t//import {IQService} from \"angular\";\n\t//import {IInjectorService} from \"angular\";\n\tvar notImplemented = function (fnname) { return function () {\n\t    throw new Error(fnname + \"(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']\");\n\t}; };\n\tvar services = {\n\t    $q: undefined,\n\t    $injector: undefined,\n\t    location: {},\n\t    locationConfig: {},\n\t    template: {}\n\t};\n\texports.services = services;\n\t[\"replace\", \"url\", \"path\", \"search\", \"hash\", \"onChange\"]\n\t    .forEach(function (key) { return services.location[key] = notImplemented(key); });\n\t[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"]\n\t    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/** @module common */\n\t/**\n\t * Matches state names using glob-like patterns.\n\t *\n\t * See: [[StateService.includes]]\n\t */\n\tvar Glob = (function () {\n\t    function Glob(text) {\n\t        this.text = text;\n\t        this.glob = text.split('.');\n\t    }\n\t    Glob.prototype.matches = function (name) {\n\t        var segments = name.split('.');\n\t        // match single stars\n\t        for (var i = 0, l = this.glob.length; i < l; i++) {\n\t            if (this.glob[i] === '*')\n\t                segments[i] = '*';\n\t        }\n\t        // match greedy starts\n\t        if (this.glob[0] === '**') {\n\t            segments = segments.slice(segments.indexOf(this.glob[1]));\n\t            segments.unshift('**');\n\t        }\n\t        // match greedy ends\n\t        if (this.glob[this.glob.length - 1] === '**') {\n\t            segments.splice(segments.indexOf(this.glob[this.glob.length - 2]) + 1, Number.MAX_VALUE);\n\t            segments.push('**');\n\t        }\n\t        if (this.glob.length != segments.length)\n\t            return false;\n\t        return segments.join('') === this.glob.join('');\n\t    };\n\t    Glob.is = function (text) {\n\t        return text.indexOf('*') > -1;\n\t    };\n\t    Glob.fromString = function (text) {\n\t        if (!this.is(text))\n\t            return null;\n\t        return new Glob(text);\n\t    };\n\t    return Glob;\n\t}());\n\texports.Glob = Glob;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/** @module common */ /** for typedoc */\n\t\"use strict\";\n\tvar Queue = (function () {\n\t    function Queue(_items, _limit) {\n\t        if (_items === void 0) { _items = []; }\n\t        if (_limit === void 0) { _limit = null; }\n\t        this._items = _items;\n\t        this._limit = _limit;\n\t    }\n\t    Queue.prototype.enqueue = function (item) {\n\t        var items = this._items;\n\t        items.push(item);\n\t        if (this._limit && items.length > this._limit)\n\t            items.shift();\n\t        return item;\n\t    };\n\t    Queue.prototype.dequeue = function () {\n\t        if (this.size())\n\t            return this._items.splice(0, 1)[0];\n\t    };\n\t    Queue.prototype.clear = function () {\n\t        var current = this._items;\n\t        this._items = [];\n\t        return current;\n\t    };\n\t    Queue.prototype.size = function () {\n\t        return this._items.length;\n\t    };\n\t    Queue.prototype.remove = function (item) {\n\t        var idx = this._items.indexOf(item);\n\t        return idx > -1 && this._items.splice(idx, 1)[0];\n\t    };\n\t    Queue.prototype.peekTail = function () {\n\t        return this._items[this._items.length - 1];\n\t    };\n\t    Queue.prototype.peekHead = function () {\n\t        if (this.size())\n\t            return this._items[0];\n\t    };\n\t    return Queue;\n\t}());\n\texports.Queue = Queue;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common_strings */ /** */\n\t\"use strict\";\n\tvar predicates_1 = __webpack_require__(4);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar transition_1 = __webpack_require__(11);\n\tvar resolvable_1 = __webpack_require__(19);\n\t/**\n\t * Returns a string shortened to a maximum length\n\t *\n\t * If the string is already less than the `max` length, return the string.\n\t * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n\t *\n\t * @param max the maximum length of the string to return\n\t * @param str the input string\n\t */\n\tfunction maxLength(max, str) {\n\t    if (str.length <= max)\n\t        return str;\n\t    return str.substr(0, max - 3) + \"...\";\n\t}\n\texports.maxLength = maxLength;\n\t/**\n\t * Returns a string, with spaces added to the end, up to a desired str length\n\t *\n\t * If the string is already longer than the desired length, return the string.\n\t * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n\t *\n\t * @param length the desired length of the string to return\n\t * @param str the input string\n\t */\n\tfunction padString(length, str) {\n\t    while (str.length < length)\n\t        str += \" \";\n\t    return str;\n\t}\n\texports.padString = padString;\n\tfunction kebobString(camelCase) {\n\t    return camelCase\n\t        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char\n\t        .replace(/([A-Z])/g, function ($1) { return \"-\" + $1.toLowerCase(); }); // replace rest\n\t}\n\texports.kebobString = kebobString;\n\tfunction _toJson(obj) {\n\t    return JSON.stringify(obj);\n\t}\n\tfunction _fromJson(json) {\n\t    return predicates_1.isString(json) ? JSON.parse(json) : json;\n\t}\n\tfunction promiseToString(p) {\n\t    return \"Promise(\" + JSON.stringify(p) + \")\";\n\t}\n\tfunction functionToString(fn) {\n\t    var fnStr = fnToString(fn);\n\t    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n\t    return namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\t}\n\texports.functionToString = functionToString;\n\tfunction fnToString(fn) {\n\t    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;\n\t    return _fn && _fn.toString() || \"undefined\";\n\t}\n\texports.fnToString = fnToString;\n\tvar stringifyPatternFn = null;\n\tvar stringifyPattern = function (value) {\n\t    var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;\n\t    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([\n\t        [hof_1.not(predicates_1.isDefined), hof_1.val(\"undefined\")],\n\t        [predicates_1.isNull, hof_1.val(\"null\")],\n\t        [predicates_1.isPromise, hof_1.val(\"[Promise]\")],\n\t        [isTransitionRejectionPromise, function (x) { return x._transitionRejection.toString(); }],\n\t        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke(\"toString\")],\n\t        [hof_1.is(transition_1.Transition), hof_1.invoke(\"toString\")],\n\t        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke(\"toString\")],\n\t        [predicates_1.isInjectable, functionToString],\n\t        [hof_1.val(true), common_1.identity]\n\t    ]);\n\t    return stringifyPatternFn(value);\n\t};\n\tfunction stringify(o) {\n\t    var seen = [];\n\t    function format(val) {\n\t        if (predicates_1.isObject(val)) {\n\t            if (seen.indexOf(val) !== -1)\n\t                return '[circular ref]';\n\t            seen.push(val);\n\t        }\n\t        return stringifyPattern(val);\n\t    }\n\t    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\\\\"/g, '\"');\n\t}\n\texports.stringify = stringify;\n\t/** Returns a function that splits a string on a character or substring */\n\texports.beforeAfterSubstr = function (char) { return function (str) {\n\t    if (!str)\n\t        return [\"\", \"\"];\n\t    var idx = str.indexOf(char);\n\t    if (idx === -1)\n\t        return [str, \"\"];\n\t    return [str.substr(0, idx), str.substr(idx + 1)];\n\t}; };\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar strings_1 = __webpack_require__(9);\n\t(function (RejectType) {\n\t    RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\n\t    RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\n\t    RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\n\t    RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\n\t    RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\n\t})(exports.RejectType || (exports.RejectType = {}));\n\tvar RejectType = exports.RejectType;\n\tvar Rejection = (function () {\n\t    function Rejection(type, message, detail) {\n\t        this.type = type;\n\t        this.message = message;\n\t        this.detail = detail;\n\t    }\n\t    Rejection.prototype.toString = function () {\n\t        var detailString = function (d) { return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d); };\n\t        var type = this.type, message = this.message, detail = detailString(this.detail);\n\t        return \"TransitionRejection(type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\n\t    };\n\t    Rejection.prototype.toPromise = function () {\n\t        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });\n\t    };\n\t    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n\t    Rejection.isTransitionRejectionPromise = function (obj) {\n\t        return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\n\t    };\n\t    /** Returns a TransitionRejection due to transition superseded */\n\t    Rejection.superseded = function (detail, options) {\n\t        var message = \"The transition has been superseded by a different transition (see detail).\";\n\t        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n\t        if (options && options.redirected) {\n\t            rejection.redirected = true;\n\t        }\n\t        return rejection;\n\t    };\n\t    /** Returns a TransitionRejection due to redirected transition */\n\t    Rejection.redirected = function (detail) {\n\t        return Rejection.superseded(detail, { redirected: true });\n\t    };\n\t    /** Returns a TransitionRejection due to invalid transition */\n\t    Rejection.invalid = function (detail) {\n\t        var message = \"This transition is invalid (see detail)\";\n\t        return new Rejection(RejectType.INVALID, message, detail);\n\t    };\n\t    /** Returns a TransitionRejection due to ignored transition */\n\t    Rejection.ignored = function (detail) {\n\t        var message = \"The transition was ignored.\";\n\t        return new Rejection(RejectType.IGNORED, message, detail);\n\t    };\n\t    /** Returns a TransitionRejection due to aborted transition */\n\t    Rejection.aborted = function (detail) {\n\t        // TODO think about how to encapsulate an Error() object\n\t        var message = \"The transition has been aborted.\";\n\t        return new Rejection(RejectType.ABORTED, message, detail);\n\t    };\n\t    /** Returns a TransitionRejection due to aborted transition */\n\t    Rejection.errored = function (detail) {\n\t        // TODO think about how to encapsulate an Error() object\n\t        var message = \"The transition errored.\";\n\t        return new Rejection(RejectType.ERROR, message, detail);\n\t    };\n\t    return Rejection;\n\t}());\n\texports.Rejection = Rejection;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module transition */ /** for typedoc */\n\tvar trace_1 = __webpack_require__(12);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar transitionHook_1 = __webpack_require__(13);\n\tvar hookRegistry_1 = __webpack_require__(15);\n\tvar hookBuilder_1 = __webpack_require__(16);\n\tvar node_1 = __webpack_require__(21);\n\tvar pathFactory_1 = __webpack_require__(20);\n\tvar targetState_1 = __webpack_require__(14);\n\tvar param_1 = __webpack_require__(22);\n\tvar resolvable_1 = __webpack_require__(19);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar resolveContext_1 = __webpack_require__(17);\n\tvar router_1 = __webpack_require__(26);\n\tvar transitionCount = 0;\n\tvar stateSelf = hof_1.prop(\"self\");\n\t/**\n\t * Represents a transition between two states.\n\t *\n\t * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n\t *\n\t * This object contains all contextual information about the to/from states, parameters, resolves.\n\t * It has information about all states being entered and exited as a result of the transition.\n\t */\n\tvar Transition = (function () {\n\t    /**\n\t     * Creates a new Transition object.\n\t     *\n\t     * If the target state is not valid, an error is thrown.\n\t     *\n\t     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n\t     *        encapsulates the \"from state\".\n\t     * @param targetState The target state and parameters being transitioned to (also, the transition options)\n\t     * @param router The [[UIRouter]] instance\n\t     */\n\t    function Transition(fromPath, targetState, router) {\n\t        var _this = this;\n\t        /** @hidden */\n\t        this._deferred = coreservices_1.services.$q.defer();\n\t        /**\n\t         * This promise is resolved or rejected based on the outcome of the Transition.\n\t         *\n\t         * When the transition is successful, the promise is resolved\n\t         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n\t         */\n\t        this.promise = this._deferred.promise;\n\t        this.treeChanges = function () { return _this._treeChanges; };\n\t        this.isActive = function () { return _this === _this._options.current(); };\n\t        this.router = router;\n\t        if (!targetState.valid()) {\n\t            throw new Error(targetState.error());\n\t        }\n\t        // Makes the Transition instance a hook registry (onStart, etc)\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\n\t        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n\t        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());\n\t        this.$id = transitionCount++;\n\t        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);\n\t        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n\t        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });\n\t        pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n\t        var rootResolvables = [\n\t            new resolvable_1.Resolvable(router_1.UIRouter, function () { return router; }, [], undefined, router),\n\t            new resolvable_1.Resolvable(Transition, function () { return _this; }, [], undefined, this),\n\t            new resolvable_1.Resolvable('$transition$', function () { return _this; }, [], undefined, this),\n\t            new resolvable_1.Resolvable('$stateParams', function () { return _this.params(); }, [], undefined, this.params())\n\t        ];\n\t        var rootNode = this._treeChanges.to[0];\n\t        var context = new resolveContext_1.ResolveContext(this._treeChanges.to);\n\t        context.addResolvables(rootResolvables, rootNode.state);\n\t    }\n\t    /** @inheritdoc */\n\t    Transition.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    Transition.prototype.$from = function () {\n\t        return common_1.tail(this._treeChanges.from).state;\n\t    };\n\t    Transition.prototype.$to = function () {\n\t        return common_1.tail(this._treeChanges.to).state;\n\t    };\n\t    /**\n\t     * Returns the \"from state\"\n\t     *\n\t     * @returns The state object for the Transition's \"from state\".\n\t     */\n\t    Transition.prototype.from = function () {\n\t        return this.$from().self;\n\t    };\n\t    /**\n\t     * Returns the \"to state\"\n\t     *\n\t     * @returns The state object for the Transition's target state (\"to state\").\n\t     */\n\t    Transition.prototype.to = function () {\n\t        return this.$to().self;\n\t    };\n\t    /**\n\t     * Determines whether two transitions are equivalent.\n\t     */\n\t    Transition.prototype.is = function (compare) {\n\t        if (compare instanceof Transition) {\n\t            // TODO: Also compare parameters\n\t            return this.is({ to: compare.$to().name, from: compare.$from().name });\n\t        }\n\t        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||\n\t            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));\n\t    };\n\t    /**\n\t     * Gets transition parameter values\n\t     *\n\t     * @param pathname Pick which treeChanges path to get parameters for:\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n\t     * @returns transition parameter values for the desired path.\n\t     */\n\t    Transition.prototype.params = function (pathname) {\n\t        if (pathname === void 0) { pathname = \"to\"; }\n\t        return this._treeChanges[pathname].map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {});\n\t    };\n\t    /**\n\t     * Creates a [[UIInjector]] Dependency Injector\n\t     *\n\t     * Returns a Dependency Injector for the Transition's target state (to state).\n\t     * The injector provides resolve values which the target state has access to.\n\t     *\n\t     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n\t     *\n\t     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n\t     *\n\t     * @param state Limits the resolves provided to only the resolves the provided state has access to.\n\t     * @returns a [[UIInjector]]\n\t     */\n\t    Transition.prototype.injector = function (state) {\n\t        var path = this.treeChanges().to;\n\t        if (state)\n\t            path = pathFactory_1.PathFactory.subPath(path, function (node) { return node.state === state || node.state.name === state; });\n\t        return new resolveContext_1.ResolveContext(path).injector();\n\t    };\n\t    /**\n\t     * Gets all available resolve tokens (keys)\n\t     *\n\t     * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\n\t     * available to the Transition.\n\t     *\n\t     * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\n\t     * in the Transition's [[TreeChanges.to]] path.\n\t     *\n\t     * @returns an array of resolve tokens (keys)\n\t     */\n\t    Transition.prototype.getResolveTokens = function () {\n\t        return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();\n\t    };\n\t    /**\n\t     * Gets resolved values\n\t     *\n\t     * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\n\t     * are available to the Transition.\n\t     *\n\t     * Given a token, returns the resolved data for that token.\n\t     * Given an array of tokens, returns an array of resolved data for those tokens.\n\t     *\n\t     * If a resolvable hasn't yet been fetched, returns `undefined` for that token\n\t     * If a resolvable doesn't exist for the token, throws an error.\n\t     *\n\t     * @param token the token (or array of tokens)\n\t     *\n\t     * @returns an array of resolve tokens (keys)\n\t     */\n\t    Transition.prototype.getResolveValue = function (token) {\n\t        var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);\n\t        var getData = function (token) {\n\t            var resolvable = resolveContext.getResolvable(token);\n\t            if (resolvable === undefined) {\n\t                throw new Error(\"Dependency Injection token not found: ${stringify(token)}\");\n\t            }\n\t            return resolvable.data;\n\t        };\n\t        if (predicates_1.isArray(token)) {\n\t            return token.map(getData);\n\t        }\n\t        return getData(token);\n\t    };\n\t    /**\n\t     * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\n\t     *\n\t     * @param resolvable an [[Resolvable]] object\n\t     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n\t     */\n\t    Transition.prototype.addResolvable = function (resolvable, state) {\n\t        if (state === void 0) { state = \"\"; }\n\t        var stateName = (typeof state === \"string\") ? state : state.name;\n\t        var topath = this._treeChanges.to;\n\t        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });\n\t        var resolveContext = new resolveContext_1.ResolveContext(topath);\n\t        resolveContext.addResolvables([resolvable], targetNode.state);\n\t    };\n\t    /**\n\t     * Gets the previous transition, from which this transition was redirected.\n\t     *\n\t     * @returns The previous Transition, or null if this Transition is not the result of a redirection\n\t     */\n\t    Transition.prototype.previous = function () {\n\t        return this._options.previous || null;\n\t    };\n\t    /**\n\t     * Get the transition options\n\t     *\n\t     * @returns the options for this Transition.\n\t     */\n\t    Transition.prototype.options = function () {\n\t        return this._options;\n\t    };\n\t    /**\n\t     * Gets the states being entered.\n\t     *\n\t     * @returns an array of states that will be entered during this transition.\n\t     */\n\t    Transition.prototype.entering = function () {\n\t        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);\n\t    };\n\t    /**\n\t     * Gets the states being exited.\n\t     *\n\t     * @returns an array of states that will be exited during this transition.\n\t     */\n\t    Transition.prototype.exiting = function () {\n\t        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();\n\t    };\n\t    /**\n\t     * Gets the states being retained.\n\t     *\n\t     * @returns an array of states that are already entered from a previous Transition, that will not be\n\t     *    exited during this Transition\n\t     */\n\t    Transition.prototype.retained = function () {\n\t        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);\n\t    };\n\t    /**\n\t     * Get the [[ViewConfig]]s associated with this Transition\n\t     *\n\t     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n\t     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n\t     *\n\t     * @param pathname the name of the path to fetch views for:\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n\t     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n\t     *\n\t     * @returns a list of ViewConfig objects for the given path.\n\t     */\n\t    Transition.prototype.views = function (pathname, state) {\n\t        if (pathname === void 0) { pathname = \"entering\"; }\n\t        var path = this._treeChanges[pathname];\n\t        path = !state ? path : path.filter(hof_1.propEq('state', state));\n\t        return path.map(hof_1.prop(\"views\")).filter(common_1.identity).reduce(common_1.unnestR, []);\n\t    };\n\t    /**\n\t     * Creates a new transition that is a redirection of the current one.\n\t     *\n\t     * This transition can be returned from a [[TransitionService]] hook to\n\t     * redirect a transition to a new state and/or set of parameters.\n\t     *\n\t     * @returns Returns a new [[Transition]] instance.\n\t     */\n\t    Transition.prototype.redirect = function (targetState) {\n\t        var newOptions = common_1.extend({}, this.options(), targetState.options(), { previous: this });\n\t        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\t        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n\t        var originalEnteringNodes = this.treeChanges().entering;\n\t        var redirectEnteringNodes = newTransition.treeChanges().entering;\n\t        // --- Re-use resolve data from original transition ---\n\t        // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n\t        // (because of the redirect), the resolves fetched by the original transition are still valid in the\n\t        // redirected transition.\n\t        //\n\t        // This allows you to define a redirect on a parent state which depends on an async resolve value.\n\t        // You can wait for the resolve, then redirect to a child state based on the result.\n\t        // The redirected transition does not have to re-fetch the resolve.\n\t        // ---------------------------------------------------------\n\t        var nodeIsReloading = function (reloadState) { return function (node) {\n\t            return reloadState && node.state.includes[reloadState.name];\n\t        }; };\n\t        // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n\t        var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\n\t            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));\n\t        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n\t        matchingEnteringNodes.forEach(function (node, idx) {\n\t            node.resolvables = originalEnteringNodes[idx].resolvables;\n\t        });\n\t        return newTransition;\n\t    };\n\t    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n\t    Transition.prototype._changedParams = function () {\n\t        var _a = this._treeChanges, to = _a.to, from = _a.from;\n\t        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)\n\t            return undefined;\n\t        var nodeSchemas = to.map(function (node) { return node.paramSchema; });\n\t        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];\n\t        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);\n\t        return tuples.map(function (_a) {\n\t            var schema = _a[0], toVals = _a[1], fromVals = _a[2];\n\t            return param_1.Param.changed(schema, toVals, fromVals);\n\t        }).reduce(common_1.unnestR, []);\n\t    };\n\t    /**\n\t     * Returns true if the transition is dynamic.\n\t     *\n\t     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n\t     *\n\t     * @returns true if the Transition is dynamic\n\t     */\n\t    Transition.prototype.dynamic = function () {\n\t        var changes = this._changedParams();\n\t        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);\n\t    };\n\t    /**\n\t     * Returns true if the transition is ignored.\n\t     *\n\t     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n\t     *\n\t     * @returns true if the Transition is ignored.\n\t     */\n\t    Transition.prototype.ignored = function () {\n\t        var changes = this._changedParams();\n\t        return !changes ? false : changes.length === 0;\n\t    };\n\t    /**\n\t     * @hidden\n\t     */\n\t    Transition.prototype.hookBuilder = function () {\n\t        return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {\n\t            transition: this,\n\t            current: this._options.current\n\t        });\n\t    };\n\t    /**\n\t     * Runs the transition\n\t     *\n\t     * This method is generally called from the [[StateService.transitionTo]]\n\t     *\n\t     * @returns a promise for a successful transition.\n\t     */\n\t    Transition.prototype.run = function () {\n\t        var _this = this;\n\t        var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;\n\t        var hookBuilder = this.hookBuilder();\n\t        var globals = this.router.globals;\n\t        globals.transitionHistory.enqueue(this);\n\t        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n\t        if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {\n\t            syncResult.catch(function () { return 0; }); // issue #2676\n\t            var rejectReason = syncResult._transitionRejection;\n\t            this._deferred.reject(rejectReason);\n\t            return this.promise;\n\t        }\n\t        if (!this.valid()) {\n\t            var error = new Error(this.error());\n\t            this._deferred.reject(error);\n\t            return this.promise;\n\t        }\n\t        if (this.ignored()) {\n\t            trace_1.trace.traceTransitionIgnored(this);\n\t            this._deferred.reject(rejectFactory_1.Rejection.ignored());\n\t            return this.promise;\n\t        }\n\t        // When the chain is complete, then resolve or reject the deferred\n\t        var transitionSuccess = function () {\n\t            trace_1.trace.traceSuccess(_this.$to(), _this);\n\t            _this.success = true;\n\t            _this._deferred.resolve(_this.to());\n\t            runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\n\t        };\n\t        var transitionError = function (error) {\n\t            trace_1.trace.traceError(error, _this);\n\t            _this.success = false;\n\t            _this._deferred.reject(error);\n\t            runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\n\t        };\n\t        trace_1.trace.traceTransitionStart(this);\n\t        // Chain the next hook off the previous\n\t        var appendHookToChain = function (prev, nextHook) {\n\t            return prev.then(function () { return nextHook.invokeHook(); });\n\t        };\n\t        // Run the hooks, then resolve or reject the overall deferred in the .then() handler\n\t        hookBuilder.asyncHooks()\n\t            .reduce(appendHookToChain, syncResult)\n\t            .then(transitionSuccess, transitionError);\n\t        return this.promise;\n\t    };\n\t    /**\n\t     * Checks if the Transition is valid\n\t     *\n\t     * @returns true if the Transition is valid\n\t     */\n\t    Transition.prototype.valid = function () {\n\t        return !this.error();\n\t    };\n\t    /**\n\t     * The reason the Transition is invalid\n\t     *\n\t     * @returns an error message explaining why the transition is invalid\n\t     */\n\t    Transition.prototype.error = function () {\n\t        var state = this.$to();\n\t        if (state.self[common_1.abstractKey])\n\t            return \"Cannot transition to abstract state '\" + state.name + \"'\";\n\t        if (!param_1.Param.validates(state.parameters(), this.params()))\n\t            return \"Param values not valid for state '\" + state.name + \"'\";\n\t    };\n\t    /**\n\t     * A string representation of the Transition\n\t     *\n\t     * @returns A string representation of the Transition\n\t     */\n\t    Transition.prototype.toString = function () {\n\t        var fromStateOrName = this.from();\n\t        var toStateOrName = this.to();\n\t        var avoidEmptyHash = function (params) {\n\t            return (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : common_1.omit(params, \"#\");\n\t        };\n\t        // (X) means the to state is invalid.\n\t        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? \"\" : \"(X) \", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));\n\t        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\n\t    };\n\t    Transition.diToken = Transition;\n\t    return Transition;\n\t}());\n\texports.Transition = Transition;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * UI-Router Transition Tracing\n\t *\n\t * Enable transition tracing to print transition information to the console, in order to help debug your application.\n\t * Tracing logs detailed information about each Transition to your console.\n\t *\n\t * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n\t *\n\t * ES6\n\t * ```\n\t *\n\t * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n\t * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n\t * ```\n\t *\n\t * CJS\n\t * ```\n\t *\n\t * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n\t * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n\t * ```\n\t *\n\t * Globals\n\t * ```\n\t *\n\t * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n\t * trace.enable(); // Trace everything (very verbose)\n\t * ```\n\t *\n\t * @module trace\n\t */ /** for typedoc */\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar strings_1 = __webpack_require__(9);\n\t/** @hidden */\n\tfunction uiViewString(viewData) {\n\t    if (!viewData)\n\t        return 'ui-view (defunct)';\n\t    return (\"[ui-view#\" + viewData.id + \" tag \") +\n\t        (\"in template from '\" + (viewData.creationContext && viewData.creationContext.name || '(root)') + \"' state]: \") +\n\t        (\"fqn: '\" + viewData.fqn + \"', \") +\n\t        (\"name: '\" + viewData.name + \"@\" + viewData.creationContext + \"')\");\n\t}\n\t/** @hidden */\n\tvar viewConfigString = function (viewConfig) {\n\t    return (\"[ViewConfig#\" + viewConfig.$id + \" from '\" + (viewConfig.viewDecl.$context.name || '(root)') + \"' state]: target ui-view: '\" + viewConfig.viewDecl.$uiViewName + \"@\" + viewConfig.viewDecl.$uiViewContextAnchor + \"'\");\n\t};\n\t/** @hidden */\n\tfunction normalizedCat(input) {\n\t    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];\n\t}\n\t/**\n\t * Trace categories\n\t *\n\t * [[Trace.enable]] or [[Trace.disable]] a category\n\t *\n\t * `trace.enable(Category.TRANSITION)`\n\t *\n\t * These can also be provided using a matching string, or position ordinal\n\t *\n\t * `trace.enable(\"TRANSITION\")`\n\t *\n\t * `trace.enable(1)`\n\t */\n\t(function (Category) {\n\t    Category[Category[\"RESOLVE\"] = 0] = \"RESOLVE\";\n\t    Category[Category[\"TRANSITION\"] = 1] = \"TRANSITION\";\n\t    Category[Category[\"HOOK\"] = 2] = \"HOOK\";\n\t    Category[Category[\"INVOKE\"] = 3] = \"INVOKE\";\n\t    Category[Category[\"UIVIEW\"] = 4] = \"UIVIEW\";\n\t    Category[Category[\"VIEWCONFIG\"] = 5] = \"VIEWCONFIG\";\n\t})(exports.Category || (exports.Category = {}));\n\tvar Category = exports.Category;\n\t/**\n\t * Prints UI-Router Transition trace information to the console.\n\t */\n\tvar Trace = (function () {\n\t    function Trace() {\n\t        /** @hidden */\n\t        this._enabled = {};\n\t        this.approximateDigests = 0;\n\t    }\n\t    /** @hidden */\n\t    Trace.prototype._set = function (enabled, categories) {\n\t        var _this = this;\n\t        if (!categories.length) {\n\t            categories = Object.keys(Category)\n\t                .filter(function (k) { return isNaN(parseInt(k, 10)); })\n\t                .map(function (key) { return Category[key]; });\n\t        }\n\t        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });\n\t    };\n\t    /**\n\t     * Enables a trace [[Category]]\n\t     *\n\t     * ```\n\t     * trace.enable(\"TRANSITION\");\n\t     * ```\n\t     *\n\t     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n\t     *        Also takes strings (category name) or ordinal (category position)\n\t     */\n\t    Trace.prototype.enable = function () {\n\t        var categories = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            categories[_i - 0] = arguments[_i];\n\t        }\n\t        this._set(true, categories);\n\t    };\n\t    /**\n\t     * Disables a trace [[Category]]\n\t     *\n\t     * ```\n\t     * trace.disable(\"VIEWCONFIG\");\n\t     * ```\n\t     *\n\t     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n\t     *        Also takes strings (category name) or ordinal (category position)\n\t     */\n\t    Trace.prototype.disable = function () {\n\t        var categories = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            categories[_i - 0] = arguments[_i];\n\t        }\n\t        this._set(false, categories);\n\t    };\n\t    /**\n\t     * Retrieves the enabled stateus of a [[Category]]\n\t     *\n\t     * ```\n\t     * trace.enabled(\"VIEWCONFIG\"); // true or false\n\t     * ```\n\t     *\n\t     * @returns boolean true if the category is enabled\n\t     */\n\t    Trace.prototype.enabled = function (category) {\n\t        return !!this._enabled[normalizedCat(category)];\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceTransitionStart = function (transition) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Started  -> \" + transitionStr);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceTransitionIgnored = function (trans) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Ignored  <> \" + transitionStr);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceHookInvocation = function (step, options) {\n\t        if (!this.enabled(Category.HOOK))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.functionToString(step.fn);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   Hook -> \" + event + \" context: \" + context + \", \" + strings_1.maxLength(200, name));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceHookResult = function (hookResult, transitionResult, transitionOptions) {\n\t        if (!this.enabled(Category.HOOK))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult), transitionResultStr = strings_1.stringify(transitionResult);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   <- Hook returned: \" + strings_1.maxLength(200, hookResultStr) + \", transition result: \" + strings_1.maxLength(200, transitionResultStr));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolvePath = function (path, when, trans) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, pathStr = path && path.toString();\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":         Resolving \" + pathStr + \" (\" + when + \")\");\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":               <- Resolved  \" + resolvableStr + \" to: \" + strings_1.maxLength(200, result));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceError = function (error, trans) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Rejected \" + transitionStr + \", reason: \" + error);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceSuccess = function (finalState, trans) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(trans);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Success  \" + transitionStr + \", final state: \" + state);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {\n\t        if (extra === void 0) { extra = \"\"; }\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        console.log(\"ui-view: \" + strings_1.padString(30, event) + \" \" + uiViewString(viewData) + extra);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUIViewEvent(\"Updating\", viewData, \" with ViewConfig from context='\" + context + \"'\");\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewScopeCreated = function (viewData, newScope) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUIViewEvent(\"Created scope for\", viewData, \", scope #\" + newScope.$id);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewFill = function (viewData, html) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUIViewEvent(\"Fill\", viewData, \" with: \" + strings_1.maxLength(200, html));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\n\t        if (!this.enabled(Category.VIEWCONFIG))\n\t            return;\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + viewConfigString(viewConfig));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {\n\t        if (!this.enabled(Category.VIEWCONFIG))\n\t            return;\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + uiViewString(viewData));\n\t    };\n\t    return Trace;\n\t}());\n\texports.Trace = Trace;\n\t/**\n\t * The [[Trace]] singleton\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * import {trace} from \"angular-ui-router\";\n\t * trace.enable(1, 5);\n\t * ```\n\t */\n\tvar trace = new Trace();\n\texports.trace = trace;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar strings_1 = __webpack_require__(9);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar trace_1 = __webpack_require__(12);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar targetState_1 = __webpack_require__(14);\n\tvar defaultOptions = {\n\t    async: true,\n\t    rejectIfSuperseded: true,\n\t    current: common_1.noop,\n\t    transition: null,\n\t    traceData: {},\n\t    bind: null\n\t};\n\t/** @hidden */\n\tvar TransitionHook = (function () {\n\t    function TransitionHook(transition, stateContext, hookFn, resolveContext, options) {\n\t        var _this = this;\n\t        this.transition = transition;\n\t        this.stateContext = stateContext;\n\t        this.hookFn = hookFn;\n\t        this.resolveContext = resolveContext;\n\t        this.options = options;\n\t        this.isSuperseded = function () { return _this.options.current() !== _this.options.transition; };\n\t        this.options = common_1.defaults(options, defaultOptions);\n\t    }\n\t    TransitionHook.prototype.invokeHook = function () {\n\t        var _a = this, options = _a.options, hookFn = _a.hookFn, resolveContext = _a.resolveContext;\n\t        trace_1.trace.traceHookInvocation(this, options);\n\t        if (options.rejectIfSuperseded && this.isSuperseded()) {\n\t            return rejectFactory_1.Rejection.superseded(options.current()).toPromise();\n\t        }\n\t        var hookResult = hookFn.call(options.bind, this.transition, this.stateContext);\n\t        return this.handleHookResult(hookResult);\n\t    };\n\t    /**\n\t     * This method handles the return value of a Transition Hook.\n\t     *\n\t     * A hook can return false, a redirect (TargetState), or a promise (which may resolve to false or a redirect)\n\t     */\n\t    TransitionHook.prototype.handleHookResult = function (hookResult) {\n\t        var _this = this;\n\t        if (!predicates_1.isDefined(hookResult))\n\t            return undefined;\n\t        /**\n\t         * Handles transition superseded, transition aborted and transition redirect.\n\t         */\n\t        var mapHookResult = hof_1.pattern([\n\t            // Transition is no longer current\n\t            [this.isSuperseded, function () { return rejectFactory_1.Rejection.superseded(_this.options.current()).toPromise(); }],\n\t            // If the hook returns false, abort the current Transition\n\t            [hof_1.eq(false), function () { return rejectFactory_1.Rejection.aborted(\"Hook aborted transition\").toPromise(); }],\n\t            // If the hook returns a Transition, halt the current Transition and redirect to that Transition.\n\t            [hof_1.is(targetState_1.TargetState), function (target) { return rejectFactory_1.Rejection.redirected(target).toPromise(); }],\n\t            // A promise was returned, wait for the promise and then chain another hookHandler\n\t            [predicates_1.isPromise, function (promise) { return promise.then(_this.handleHookResult.bind(_this)); }]\n\t        ]);\n\t        var transitionResult = mapHookResult(hookResult);\n\t        if (transitionResult)\n\t            trace_1.trace.traceHookResult(hookResult, transitionResult, this.options);\n\t        return transitionResult;\n\t    };\n\t    TransitionHook.prototype.toString = function () {\n\t        var _a = this, options = _a.options, hookFn = _a.hookFn;\n\t        var event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.fnToString(hookFn);\n\t        return event + \" context: \" + context + \", \" + strings_1.maxLength(200, name);\n\t    };\n\t    /**\n\t     * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n\t     *\n\t     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n\t     */\n\t    TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {\n\t        if (swallowExceptions === void 0) { swallowExceptions = false; }\n\t        var results = [];\n\t        for (var i = 0; i < hooks.length; i++) {\n\t            try {\n\t                results.push(hooks[i].invokeHook());\n\t            }\n\t            catch (exception) {\n\t                if (!swallowExceptions) {\n\t                    return rejectFactory_1.Rejection.errored(exception).toPromise();\n\t                }\n\t                console.error(\"Swallowed exception during synchronous hook handler: \" + exception); // TODO: What to do here?\n\t            }\n\t        }\n\t        var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);\n\t        if (rejections.length)\n\t            return rejections[0];\n\t        return results\n\t            .filter(predicates_1.isPromise)\n\t            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());\n\t    };\n\t    return TransitionHook;\n\t}());\n\texports.TransitionHook = TransitionHook;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.type:TargetState\n\t *\n\t * @description\n\t * Encapsulate the desired target of a transition.\n\t * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n\t *\n\t * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n\t *            used to define the state.\n\t * @param {IState} _definition The `State` object definition.\n\t * @param {ParamsOrArray} _params Parameters for the target state\n\t * @param {TransitionOptions} _options Transition options.\n\t */\n\tvar TargetState = (function () {\n\t    function TargetState(_identifier, _definition, _params, _options) {\n\t        if (_params === void 0) { _params = {}; }\n\t        if (_options === void 0) { _options = {}; }\n\t        this._identifier = _identifier;\n\t        this._definition = _definition;\n\t        this._options = _options;\n\t        this._params = _params || {};\n\t    }\n\t    TargetState.prototype.name = function () {\n\t        return this._definition && this._definition.name || this._identifier;\n\t    };\n\t    TargetState.prototype.identifier = function () {\n\t        return this._identifier;\n\t    };\n\t    TargetState.prototype.params = function () {\n\t        return this._params;\n\t    };\n\t    TargetState.prototype.$state = function () {\n\t        return this._definition;\n\t    };\n\t    TargetState.prototype.state = function () {\n\t        return this._definition && this._definition.self;\n\t    };\n\t    TargetState.prototype.options = function () {\n\t        return this._options;\n\t    };\n\t    TargetState.prototype.exists = function () {\n\t        return !!(this._definition && this._definition.self);\n\t    };\n\t    TargetState.prototype.valid = function () {\n\t        return !this.error();\n\t    };\n\t    TargetState.prototype.error = function () {\n\t        var base = this.options().relative;\n\t        if (!this._definition && !!base) {\n\t            var stateName = base.name ? base.name : base;\n\t            return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\n\t        }\n\t        if (!this._definition)\n\t            return \"No such state '\" + this.name() + \"'\";\n\t        if (!this._definition.self)\n\t            return \"State '\" + this.name() + \"' has an invalid definition\";\n\t    };\n\t    return TargetState;\n\t}());\n\texports.TargetState = TargetState;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module transition */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar glob_1 = __webpack_require__(7);\n\t/**\n\t * Determines if the given state matches the matchCriteria\n\t *\n\t * @hidden\n\t *\n\t * @param state a State Object to test against\n\t * @param criterion\n\t * - If a string, matchState uses the string as a glob-matcher against the state name\n\t * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n\t *   and returns a positive match if any of the globs match.\n\t * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n\t * @returns {boolean}\n\t */\n\tfunction matchState(state, criterion) {\n\t    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;\n\t    function matchGlobs(_state) {\n\t        var globStrings = toMatch;\n\t        for (var i = 0; i < globStrings.length; i++) {\n\t            var glob = glob_1.Glob.fromString(globStrings[i]);\n\t            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);\n\t    return !!matchFn(state);\n\t}\n\texports.matchState = matchState;\n\t/** @hidden */\n\tvar EventHook = (function () {\n\t    function EventHook(matchCriteria, callback, options) {\n\t        if (options === void 0) { options = {}; }\n\t        this.callback = callback;\n\t        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n\t        this.priority = options.priority || 0;\n\t        this.bind = options.bind || null;\n\t    }\n\t    EventHook._matchingNodes = function (nodes, criterion) {\n\t        if (criterion === true)\n\t            return nodes;\n\t        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });\n\t        return matching.length ? matching : null;\n\t    };\n\t    /**\n\t     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n\t     *\n\t     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n\t     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n\t     */\n\t    EventHook.prototype.matches = function (treeChanges) {\n\t        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n\t        var matches = {\n\t            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),\n\t            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),\n\t            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n\t            retained: _matchingNodes(treeChanges.retained, mc.retained),\n\t            entering: _matchingNodes(treeChanges.entering, mc.entering),\n\t        };\n\t        // Check if all the criteria matched the TreeChanges object\n\t        var allMatched = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n\t            .map(function (prop) { return matches[prop]; })\n\t            .reduce(common_1.allTrueR, true);\n\t        return allMatched ? matches : null;\n\t    };\n\t    return EventHook;\n\t}());\n\texports.EventHook = EventHook;\n\t/** @hidden Return a registration function of the requested type. */\n\tfunction makeHookRegistrationFn(hooks, name) {\n\t    return function (matchObject, callback, options) {\n\t        if (options === void 0) { options = {}; }\n\t        var eventHook = new EventHook(matchObject, callback, options);\n\t        hooks[name].push(eventHook);\n\t        return function deregisterEventHook() {\n\t            common_1.removeFrom(hooks[name])(eventHook);\n\t        };\n\t    };\n\t}\n\t/**\n\t * Mixin class acts as a Transition Hook registry.\n\t *\n\t * Holds the registered [[HookFn]] objects.\n\t * Exposes functions to register new hooks.\n\t *\n\t * This is a Mixin class which can be applied to other objects.\n\t *\n\t * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\n\t *\n\t * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\n\t * Global hooks are added to the [[TransitionService]].\n\t * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\n\t * (note: the hook criteria still must match the Transition).\n\t */\n\tvar HookRegistry = (function () {\n\t    function HookRegistry() {\n\t        var _this = this;\n\t        this._transitionEvents = {\n\t            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n\t        };\n\t        this.getHooks = function (name) { return _this._transitionEvents[name]; };\n\t        /** @inheritdoc */\n\t        this.onBefore = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n\t        /** @inheritdoc */\n\t        this.onStart = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n\t        /** @inheritdoc */\n\t        this.onEnter = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n\t        /** @inheritdoc */\n\t        this.onRetain = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n\t        /** @inheritdoc */\n\t        this.onExit = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n\t        /** @inheritdoc */\n\t        this.onFinish = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n\t        /** @inheritdoc */\n\t        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n\t        /** @inheritdoc */\n\t        this.onError = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n\t    }\n\t    HookRegistry.mixin = function (source, target) {\n\t        Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(function (key) { return target[key] = source[key]; });\n\t    };\n\t    return HookRegistry;\n\t}());\n\texports.HookRegistry = HookRegistry;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar transitionHook_1 = __webpack_require__(13);\n\tvar resolveContext_1 = __webpack_require__(17);\n\t/**\n\t * This class returns applicable TransitionHooks for a specific Transition instance.\n\t *\n\t * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n\t * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n\t * determined by the type of hook)\n\t *\n\t * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n\t *\n\t * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n\t * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n\t * in the Transition class, so we must also provide the Transition's _treeChanges)\n\t *\n\t */\n\tvar HookBuilder = (function () {\n\t    function HookBuilder($transitions, transition, baseHookOptions) {\n\t        var _this = this;\n\t        this.$transitions = $transitions;\n\t        this.transition = transition;\n\t        this.baseHookOptions = baseHookOptions;\n\t        this.getOnBeforeHooks = function () { return _this._buildNodeHooks(\"onBefore\", \"to\", tupleSort(), { async: false }); };\n\t        this.getOnStartHooks = function () { return _this._buildNodeHooks(\"onStart\", \"to\", tupleSort()); };\n\t        this.getOnExitHooks = function () { return _this._buildNodeHooks(\"onExit\", \"exiting\", tupleSort(true), { stateHook: true }); };\n\t        this.getOnRetainHooks = function () { return _this._buildNodeHooks(\"onRetain\", \"retained\", tupleSort(false), { stateHook: true }); };\n\t        this.getOnEnterHooks = function () { return _this._buildNodeHooks(\"onEnter\", \"entering\", tupleSort(false), { stateHook: true }); };\n\t        this.getOnFinishHooks = function () { return _this._buildNodeHooks(\"onFinish\", \"to\", tupleSort()); };\n\t        this.getOnSuccessHooks = function () { return _this._buildNodeHooks(\"onSuccess\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\n\t        this.getOnErrorHooks = function () { return _this._buildNodeHooks(\"onError\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\n\t        this.treeChanges = transition.treeChanges();\n\t        this.toState = common_1.tail(this.treeChanges.to).state;\n\t        this.fromState = common_1.tail(this.treeChanges.from).state;\n\t        this.transitionOptions = transition.options();\n\t    }\n\t    HookBuilder.prototype.asyncHooks = function () {\n\t        var onStartHooks = this.getOnStartHooks();\n\t        var onExitHooks = this.getOnExitHooks();\n\t        var onRetainHooks = this.getOnRetainHooks();\n\t        var onEnterHooks = this.getOnEnterHooks();\n\t        var onFinishHooks = this.getOnFinishHooks();\n\t        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n\t        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);\n\t    };\n\t    /**\n\t     * Returns an array of newly built TransitionHook objects.\n\t     *\n\t     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n\t     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n\t     * - For each of the [[PathNode]]s, creates a TransitionHook\n\t     *\n\t     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n\t     * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\n\t     * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\n\t     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n\t     * @param options any specific Transition Hook Options\n\t     */\n\t    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {\n\t        var _this = this;\n\t        // Find all the matching registered hooks for a given hook type\n\t        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n\t        if (!matchingHooks)\n\t            return [];\n\t        var makeTransitionHooks = function (hook) {\n\t            // Fetch the Nodes that caused this hook to match.\n\t            var matches = hook.matches(_this.treeChanges);\n\t            // Select the PathNode[] that will be used as TransitionHook context objects\n\t            var matchingNodes = matches[matchingNodesProp];\n\t            // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\n\t            // Everything else gets the \"to path\"\n\t            var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;\n\t            var resolveContext = new resolveContext_1.ResolveContext(resolvePath);\n\t            // Return an array of HookTuples\n\t            return matchingNodes.map(function (node) {\n\t                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);\n\t                var state = _options.stateHook ? node.state : null;\n\t                var context = resolveContext.subContext(node.state);\n\t                var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook.callback, context, _options);\n\t                return { hook: hook, node: node, transitionHook: transitionHook };\n\t            });\n\t        };\n\t        return matchingHooks.map(makeTransitionHooks)\n\t            .reduce(common_1.unnestR, [])\n\t            .sort(sortHooksFn)\n\t            .map(function (tuple) { return tuple.transitionHook; });\n\t    };\n\t    /**\n\t     * Finds all IEventHooks from:\n\t     * - The Transition object instance hook registry\n\t     * - The TransitionService ($transitions) global hook registry\n\t     *\n\t     * which matched:\n\t     * - the eventType\n\t     * - the matchCriteria (to, from, exiting, retained, entering)\n\t     *\n\t     * @returns an array of matched [[IEventHook]]s\n\t     */\n\t    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {\n\t        return [this.transition, this.$transitions] // Instance and Global hook registries\n\t            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries\n\t            .filter(common_1.assertPredicate(predicates_1.isArray, \"broken event named: \" + hookName)) // Sanity check\n\t            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array\n\t            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria\n\t    };\n\t    return HookBuilder;\n\t}());\n\texports.HookBuilder = HookBuilder;\n\t/**\n\t * A factory for a sort function for HookTuples.\n\t *\n\t * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n\t * the EventHook priority.\n\t *\n\t * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n\t * @returns a tuple sort function\n\t */\n\tfunction tupleSort(reverseDepthSort) {\n\t    if (reverseDepthSort === void 0) { reverseDepthSort = false; }\n\t    return function nodeDepthThenPriority(l, r) {\n\t        var factor = reverseDepthSort ? -1 : 1;\n\t        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n\t        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n\t    };\n\t}\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module resolve */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar trace_1 = __webpack_require__(12);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar interface_1 = __webpack_require__(18);\n\tvar resolvable_1 = __webpack_require__(19);\n\tvar pathFactory_1 = __webpack_require__(20);\n\tvar strings_1 = __webpack_require__(9);\n\tvar when = interface_1.resolvePolicies.when;\n\tvar ALL_WHENS = [when.EAGER, when.LAZY];\n\tvar EAGER_WHENS = [when.EAGER];\n\t/**\n\t * Encapsulates Depenency Injection for a path of nodes\n\t *\n\t * UI-Router states are organized as a tree.\n\t * A nested state has a path of ancestors to the root of the tree.\n\t * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n\t * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n\t *\n\t * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n\t */\n\tvar ResolveContext = (function () {\n\t    function ResolveContext(_path) {\n\t        this._path = _path;\n\t    }\n\t    /** Gets all the tokens found in the resolve context, de-duplicated */\n\t    ResolveContext.prototype.getTokens = function () {\n\t        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);\n\t    };\n\t    /**\n\t     * Gets the Resolvable that matches the token\n\t     *\n\t     * Gets the last Resolvable that matches the token in this context, or undefined.\n\t     * Throws an error if it doesn't exist in the ResolveContext\n\t     */\n\t    ResolveContext.prototype.getResolvable = function (token) {\n\t        var matching = this._path.map(function (node) { return node.resolvables; })\n\t            .reduce(common_1.unnestR, [])\n\t            .filter(function (r) { return r.token === token; });\n\t        return common_1.tail(matching);\n\t    };\n\t    /**\n\t     * Returns a ResolveContext that includes a portion of this one\n\t     *\n\t     * Given a state, this method creates a new ResolveContext from this one.\n\t     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n\t     *\n\t     * #### Why\n\t     *\n\t     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n\t     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n\t     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n\t     * This method is used to create a narrower context when injecting ancestor nodes.\n\t     *\n\t     * @example\n\t     * `let ABCD = new ResolveContext([A, B, C, D]);`\n\t     *\n\t     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n\t     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n\t     * However, `B` should only be able to access resolvables from `A`, `B`.\n\t     *\n\t     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n\t     * `let AB = ABCD.subcontext(a)`\n\t     */\n\t    ResolveContext.prototype.subContext = function (state) {\n\t        return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) { return node.state === state; }));\n\t    };\n\t    /**\n\t     * Adds Resolvables to the node that matches the state\n\t     *\n\t     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n\t     * The resolvable is added to the node matching the `state` parameter.\n\t     *\n\t     * These new resolvables are not automatically fetched.\n\t     * The calling code should either fetch them, fetch something that depends on them,\n\t     * or rely on [[resolvePath]] being called when some state is being entered.\n\t     *\n\t     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n\t     *\n\t     * @param newResolvables the new Resolvables\n\t     * @param state Used to find the node to put the resolvable on\n\t     */\n\t    ResolveContext.prototype.addResolvables = function (newResolvables, state) {\n\t        var node = common_1.find(this._path, hof_1.propEq('state', state));\n\t        var keys = newResolvables.map(function (r) { return r.token; });\n\t        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);\n\t    };\n\t    /**\n\t     * Returns a promise for an array of resolved path Element promises\n\t     *\n\t     * @param when\n\t     * @param trans\n\t     * @returns {Promise<any>|any}\n\t     */\n\t    ResolveContext.prototype.resolvePath = function (when, trans) {\n\t        var _this = this;\n\t        if (when === void 0) { when = \"LAZY\"; }\n\t        // This option determines which 'when' policy Resolvables we are about to fetch.\n\t        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : \"LAZY\";\n\t        // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n\t        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n\t        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n\t        // get the subpath to the state argument, if provided\n\t        trace_1.trace.traceResolvePath(this._path, when, trans);\n\t        var promises = this._path.reduce(function (acc, node) {\n\t            var matchesRequestedPolicy = function (resolvable) {\n\t                return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);\n\t            };\n\t            var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\n\t            var subContext = _this.subContext(node.state);\n\t            // For the matching Resolvables, start their async fetch process.\n\t            var getResult = function (r) { return r.get(subContext, trans)\n\t                .then(function (value) { return ({ token: r.token, value: value }); }); };\n\t            return acc.concat(nodeResolvables.map(getResult));\n\t        }, []);\n\t        return coreservices_1.services.$q.all(promises);\n\t    };\n\t    ResolveContext.prototype.injector = function () {\n\t        return new UIInjectorImpl(this);\n\t    };\n\t    ResolveContext.prototype.findNode = function (resolvable) {\n\t        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });\n\t    };\n\t    /**\n\t     * Gets the async dependencies of a Resolvable\n\t     *\n\t     * Given a Resolvable, returns its dependencies as a Resolvable[]\n\t     */\n\t    ResolveContext.prototype.getDependencies = function (resolvable) {\n\t        var node = this.findNode(resolvable);\n\t        // Find which other resolvables are \"visible\" to the `resolvable` argument\n\t        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n\t        var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) { return x === node; }) || this._path;\n\t        var availableResolvables = subPath\n\t            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables\n\t            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument\n\t        var getDependency = function (token) {\n\t            var matching = availableResolvables.filter(function (r) { return r.token === token; });\n\t            if (matching.length)\n\t                return common_1.tail(matching);\n\t            var fromInjector = coreservices_1.services.$injector.get(token);\n\t            if (!fromInjector) {\n\t                throw new Error(\"Could not find Dependency Injection token: \" + strings_1.stringify(token));\n\t            }\n\t            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);\n\t        };\n\t        return resolvable.deps.map(getDependency);\n\t    };\n\t    return ResolveContext;\n\t}());\n\texports.ResolveContext = ResolveContext;\n\tvar UIInjectorImpl = (function () {\n\t    function UIInjectorImpl(context) {\n\t        this.context = context;\n\t        /** The native injector ($injector on ng1, Root Injector on ng2, justjs injector for everything else) */\n\t        this.native = coreservices_1.services.$injector;\n\t    }\n\t    UIInjectorImpl.prototype.get = function (token) {\n\t        var resolvable = this.context.getResolvable(token);\n\t        if (resolvable) {\n\t            if (!resolvable.resolved) {\n\t                throw new Error(\"Resolvable async .get() not complete:\" + strings_1.stringify(resolvable.token));\n\t            }\n\t            return resolvable.data;\n\t        }\n\t        return coreservices_1.services.$injector.get(token);\n\t    };\n\t    UIInjectorImpl.prototype.getAsync = function (token) {\n\t        var resolvable = this.context.getResolvable(token);\n\t        if (resolvable)\n\t            return resolvable.get(this.context);\n\t        return coreservices_1.services.$q.when(coreservices_1.services.$injector.get(token));\n\t    };\n\t    return UIInjectorImpl;\n\t}());\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.resolvePolicies = {\n\t    when: {\n\t        LAZY: \"LAZY\",\n\t        EAGER: \"EAGER\"\n\t    },\n\t    async: {\n\t        WAIT: \"WAIT\",\n\t        NOWAIT: \"NOWAIT\",\n\t        RXWAIT: \"RXWAIT\"\n\t    }\n\t};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module resolve */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar trace_1 = __webpack_require__(12);\n\tvar strings_1 = __webpack_require__(9);\n\tvar predicates_1 = __webpack_require__(4);\n\t// TODO: explicitly make this user configurable\n\texports.defaultResolvePolicy = {\n\t    when: \"LAZY\",\n\t    async: \"WAIT\"\n\t};\n\t/**\n\t * The basic building block for the resolve system.\n\t *\n\t * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n\t * and the unwrapped-when-complete (.data) result of the resolveFn.\n\t *\n\t * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n\t * resolveFn) and returns the resulting promise.\n\t *\n\t * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n\t * parameter to those fns.\n\t */\n\tvar Resolvable = (function () {\n\t    function Resolvable(arg1, resolveFn, deps, policy, data) {\n\t        this.resolved = false;\n\t        this.promise = undefined;\n\t        if (arg1 instanceof Resolvable) {\n\t            common_1.extend(this, arg1);\n\t        }\n\t        else if (predicates_1.isFunction(resolveFn)) {\n\t            if (arg1 == null || arg1 == undefined)\n\t                throw new Error(\"new Resolvable(): token argument is required\");\n\t            if (!predicates_1.isFunction(resolveFn))\n\t                throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n\t            this.token = arg1;\n\t            this.policy = policy;\n\t            this.resolveFn = resolveFn;\n\t            this.deps = deps || [];\n\t            this.data = data;\n\t            this.resolved = data !== undefined;\n\t            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;\n\t        }\n\t        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {\n\t            var literal = arg1;\n\t            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n\t        }\n\t    }\n\t    Resolvable.prototype.getPolicy = function (state) {\n\t        var thisPolicy = this.policy || {};\n\t        var statePolicy = state && state.resolvePolicy || {};\n\t        return {\n\t            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,\n\t            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,\n\t        };\n\t    };\n\t    /**\n\t     * Asynchronously resolve this Resolvable's data\n\t     *\n\t     * Given a ResolveContext that this Resolvable is found in:\n\t     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n\t     * and update the Resolvable's state\n\t     */\n\t    Resolvable.prototype.resolve = function (resolveContext, trans) {\n\t        var _this = this;\n\t        var $q = coreservices_1.services.$q;\n\t        // Gets all dependencies from ResolveContext and wait for them to be resolved\n\t        var getResolvableDependencies = function () {\n\t            return $q.all(resolveContext.getDependencies(_this).map(function (r) {\n\t                return r.get(resolveContext, trans);\n\t            }));\n\t        };\n\t        // Invokes the resolve function passing the resolved dependencies as arguments\n\t        var invokeResolveFn = function (resolvedDeps) {\n\t            return _this.resolveFn.apply(null, resolvedDeps);\n\t        };\n\t        /**\n\t         * For RXWAIT policy:\n\t         *\n\t         * Given an observable returned from a resolve function:\n\t         * - enables .cache() mode (this allows multicast subscribers)\n\t         * - then calls toPromise() (this triggers subscribe() and thus fetches)\n\t         * - Waits for the promise, then return the cached observable (not the first emitted value).\n\t         */\n\t        var waitForRx = function (observable$) {\n\t            var cached = observable$.cache();\n\t            return cached.toPromise().then(function () { return cached; });\n\t        };\n\t        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n\t        var node = resolveContext.findNode(this);\n\t        var state = node && node.state;\n\t        var maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : function (x) { return x; };\n\t        // After the final value has been resolved, update the state of the Resolvable\n\t        var applyResolvedValue = function (resolvedValue) {\n\t            _this.data = resolvedValue;\n\t            _this.resolved = true;\n\t            trace_1.trace.traceResolvableResolved(_this, trans);\n\t            return _this.data;\n\t        };\n\t        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n\t        return this.promise = $q.when()\n\t            .then(getResolvableDependencies)\n\t            .then(invokeResolveFn)\n\t            .then(maybeWaitForRx)\n\t            .then(applyResolvedValue);\n\t    };\n\t    /**\n\t     * Gets a promise for this Resolvable's data.\n\t     *\n\t     * Fetches the data and returns a promise.\n\t     * Returns the existing promise if it has already been fetched once.\n\t     */\n\t    Resolvable.prototype.get = function (resolveContext, trans) {\n\t        return this.promise || this.resolve(resolveContext, trans);\n\t    };\n\t    Resolvable.prototype.toString = function () {\n\t        return \"Resolvable(token: \" + strings_1.stringify(this.token) + \", requires: [\" + this.deps.map(strings_1.stringify) + \"])\";\n\t    };\n\t    Resolvable.prototype.clone = function () {\n\t        return new Resolvable(this);\n\t    };\n\t    return Resolvable;\n\t}());\n\texports.Resolvable = Resolvable;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module path */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar targetState_1 = __webpack_require__(14);\n\tvar node_1 = __webpack_require__(21);\n\t/**\n\t * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n\t */\n\tvar PathFactory = (function () {\n\t    function PathFactory() {\n\t    }\n\t    /** Given a PathNode[], create an TargetState */\n\t    PathFactory.makeTargetState = function (path) {\n\t        var state = common_1.tail(path).state;\n\t        return new targetState_1.TargetState(state, state, path.map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\n\t    };\n\t    PathFactory.buildPath = function (targetState) {\n\t        var toParams = targetState.params();\n\t        return targetState.$state().path.map(function (state) { return new node_1.PathNode(state).applyRawParams(toParams); });\n\t    };\n\t    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n\t    PathFactory.buildToPath = function (fromPath, targetState) {\n\t        var toPath = PathFactory.buildPath(targetState);\n\t        if (targetState.options().inherit) {\n\t            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n\t        }\n\t        return toPath;\n\t    };\n\t    /**\n\t     * Creates ViewConfig objects and adds to nodes.\n\t     *\n\t     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n\t     */\n\t    PathFactory.applyViewConfigs = function ($view, path, states) {\n\t        // Only apply the viewConfigs to the nodes for the given states\n\t        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {\n\t            var viewDecls = common_1.values(node.state.views || {});\n\t            var subPath = PathFactory.subPath(path, function (n) { return n === node; });\n\t            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });\n\t            node.views = viewConfigs.reduce(common_1.unnestR, []);\n\t        });\n\t    };\n\t    /**\n\t     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n\t     *\n\t     * For a parameter in a node to be inherited from the from path:\n\t     * - The toPath's node must have a matching node in the fromPath (by state).\n\t     * - The parameter name must not be found in the toKeys parameter array.\n\t     *\n\t     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n\t     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n\t     * it is not inherited from the fromPath.\n\t     */\n\t    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {\n\t        if (toKeys === void 0) { toKeys = []; }\n\t        function nodeParamVals(path, state) {\n\t            var node = common_1.find(path, hof_1.propEq('state', state));\n\t            return common_1.extend({}, node && node.paramValues);\n\t        }\n\t        /**\n\t         * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n\t         * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n\t         */\n\t        function makeInheritedParamsNode(toNode) {\n\t            // All param values for the node (may include default key/vals, when key was not found in toParams)\n\t            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);\n\t            // limited to only those keys found in toParams\n\t            var incomingParamVals = common_1.pick(toParamVals, toKeys);\n\t            toParamVals = common_1.omit(toParamVals, toKeys);\n\t            var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\n\t            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n\t            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);\n\t            return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);\n\t        }\n\t        // The param keys specified by the incoming toParams\n\t        return toPath.map(makeInheritedParamsNode);\n\t    };\n\t    /**\n\t     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n\t     */\n\t    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {\n\t        var keep = 0, max = Math.min(fromPath.length, toPath.length);\n\t        var staticParams = function (state) { return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id')); };\n\t        var nodesMatch = function (node1, node2) { return node1.equals(node2, staticParams(node1.state)); };\n\t        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n\t            keep++;\n\t        }\n\t        /** Given a retained node, return a new node which uses the to node's param values */\n\t        function applyToParams(retainedNode, idx) {\n\t            var cloned = node_1.PathNode.clone(retainedNode);\n\t            cloned.paramValues = toPath[idx].paramValues;\n\t            return cloned;\n\t        }\n\t        var from, retained, exiting, entering, to;\n\t        from = fromPath;\n\t        retained = from.slice(0, keep);\n\t        exiting = from.slice(keep);\n\t        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n\t        var retainedWithToParams = retained.map(applyToParams);\n\t        entering = toPath.slice(keep);\n\t        to = (retainedWithToParams).concat(entering);\n\t        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };\n\t    };\n\t    /**\n\t     * Return a subpath of a path, which stops at the first matching node\n\t     *\n\t     * Given an array of nodes, returns a subset of the array starting from the first node,\n\t     * stopping when the first node matches the predicate.\n\t     *\n\t     * @param path a path of [[PathNode]]s\n\t     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n\t     * @returns a subpath up to the matching node, or undefined if no match is found\n\t     */\n\t    PathFactory.subPath = function (path, predicate) {\n\t        var node = common_1.find(path, predicate);\n\t        var elementIdx = path.indexOf(node);\n\t        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n\t    };\n\t    /** Gets the raw parameter values from a path */\n\t    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };\n\t    return PathFactory;\n\t}());\n\texports.PathFactory = PathFactory;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module path */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar param_1 = __webpack_require__(22);\n\t/**\n\t * A node in a [[TreeChanges]] path\n\t *\n\t * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n\t * Each PathNode corresponds to a state being entered, exited, or retained.\n\t * The stateful information includes parameter values and resolve data.\n\t */\n\tvar PathNode = (function () {\n\t    function PathNode(state) {\n\t        if (state instanceof PathNode) {\n\t            var node = state;\n\t            this.state = node.state;\n\t            this.paramSchema = node.paramSchema.slice();\n\t            this.paramValues = common_1.extend({}, node.paramValues);\n\t            this.resolvables = node.resolvables.slice();\n\t            this.views = node.views && node.views.slice();\n\t        }\n\t        else {\n\t            this.state = state;\n\t            this.paramSchema = state.parameters({ inherit: false });\n\t            this.paramValues = {};\n\t            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });\n\t        }\n\t    }\n\t    /** Sets [[paramValues]] for the node, from the values of an object hash */\n\t    PathNode.prototype.applyRawParams = function (params) {\n\t        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };\n\t        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});\n\t        return this;\n\t    };\n\t    /** Gets a specific [[Param]] metadata that belongs to the node */\n\t    PathNode.prototype.parameter = function (name) {\n\t        return common_1.find(this.paramSchema, hof_1.propEq(\"id\", name));\n\t    };\n\t    /**\n\t     * @returns true if the state and parameter values for another PathNode are\n\t     * equal to the state and param values for this PathNode\n\t     */\n\t    PathNode.prototype.equals = function (node, keys) {\n\t        var _this = this;\n\t        if (keys === void 0) { keys = this.paramSchema.map(hof_1.prop('id')); }\n\t        var paramValsEq = function (key) { return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]); };\n\t        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);\n\t    };\n\t    /** Returns a clone of the PathNode */\n\t    PathNode.clone = function (node) {\n\t        return new PathNode(node);\n\t    };\n\t    /**\n\t     * Returns a new path which is a subpath of the first path which matched the second path.\n\t     *\n\t     * The new path starts from root and contains any nodes that match the nodes in the second path.\n\t     * Nodes are compared using their state property and parameter values.\n\t     */\n\t    PathNode.matching = function (pathA, pathB) {\n\t        var matching = [];\n\t        for (var i = 0; i < pathA.length && i < pathB.length; i++) {\n\t            var a = pathA[i], b = pathB[i];\n\t            if (a.state !== b.state)\n\t                break;\n\t            if (!param_1.Param.equals(a.paramSchema, a.paramValues, b.paramValues))\n\t                break;\n\t            matching.push(a);\n\t        }\n\t        return matching;\n\t    };\n\t    return PathNode;\n\t}());\n\texports.PathNode = PathNode;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar urlMatcherConfig_1 = __webpack_require__(23);\n\tvar type_1 = __webpack_require__(24);\n\tvar paramTypes_1 = __webpack_require__(25);\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar isShorthand = function (cfg) { return [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0; };\n\t(function (DefType) {\n\t    DefType[DefType[\"PATH\"] = 0] = \"PATH\";\n\t    DefType[DefType[\"SEARCH\"] = 1] = \"SEARCH\";\n\t    DefType[DefType[\"CONFIG\"] = 2] = \"CONFIG\";\n\t})(exports.DefType || (exports.DefType = {}));\n\tvar DefType = exports.DefType;\n\tfunction unwrapShorthand(cfg) {\n\t    cfg = isShorthand(cfg) && { value: cfg } || cfg;\n\t    return common_1.extend(cfg, {\n\t        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }\n\t    });\n\t}\n\tfunction getType(cfg, urlType, location, id) {\n\t    if (cfg.type && urlType && urlType.name !== 'string')\n\t        throw new Error(\"Param '\" + id + \"' has two type configurations.\");\n\t    if (cfg.type && urlType && urlType.name === 'string' && paramTypes_1.paramTypes.type(cfg.type))\n\t        return paramTypes_1.paramTypes.type(cfg.type);\n\t    if (urlType)\n\t        return urlType;\n\t    if (!cfg.type)\n\t        return (location === DefType.CONFIG ? paramTypes_1.paramTypes.type(\"any\") : paramTypes_1.paramTypes.type(\"string\"));\n\t    return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes_1.paramTypes.type(cfg.type);\n\t}\n\t/**\n\t * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n\t */\n\tfunction getSquashPolicy(config, isOptional) {\n\t    var squash = config.squash;\n\t    if (!isOptional || squash === false)\n\t        return false;\n\t    if (!predicates_1.isDefined(squash) || squash == null)\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();\n\t    if (squash === true || predicates_1.isString(squash))\n\t        return squash;\n\t    throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n\t}\n\tfunction getReplace(config, arrayMode, isOptional, squash) {\n\t    var replace, configuredKeys, defaultPolicy = [\n\t        { from: \"\", to: (isOptional || arrayMode ? undefined : \"\") },\n\t        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\n\t    ];\n\t    replace = predicates_1.isArray(config.replace) ? config.replace : [];\n\t    if (predicates_1.isString(squash))\n\t        replace.push({ from: squash, to: undefined });\n\t    configuredKeys = common_1.map(replace, hof_1.prop(\"from\"));\n\t    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);\n\t}\n\tvar Param = (function () {\n\t    function Param(id, type, config, location) {\n\t        config = unwrapShorthand(config);\n\t        type = getType(config, type, location, id);\n\t        var arrayMode = getArrayMode();\n\t        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n\t        var isOptional = config.value !== undefined;\n\t        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n\t        var squash = getSquashPolicy(config, isOptional);\n\t        var replace = getReplace(config, arrayMode, isOptional, squash);\n\t        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n\t        function getArrayMode() {\n\t            var arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n\t            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n\t            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;\n\t        }\n\t        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });\n\t    }\n\t    Param.prototype.isDefaultValue = function (value) {\n\t        return this.isOptional && this.type.equals(this.value(), value);\n\t    };\n\t    /**\n\t     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n\t     * default value, which may be the result of an injectable function.\n\t     */\n\t    Param.prototype.value = function (value) {\n\t        var _this = this;\n\t        /**\n\t         * [Internal] Get the default value of a parameter, which may be an injectable function.\n\t         */\n\t        var $$getDefaultValue = function () {\n\t            if (!coreservices_1.services.$injector)\n\t                throw new Error(\"Injectable functions cannot be called at configuration time\");\n\t            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);\n\t            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))\n\t                throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + _this.id + \"' is not an instance of ParamType (\" + _this.type.name + \")\");\n\t            return defaultValue;\n\t        };\n\t        var $replace = function (val) {\n\t            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop(\"to\"));\n\t            return replacement.length ? replacement[0] : val;\n\t        };\n\t        value = $replace(value);\n\t        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n\t    };\n\t    Param.prototype.isSearch = function () {\n\t        return this.location === DefType.SEARCH;\n\t    };\n\t    Param.prototype.validates = function (value) {\n\t        // There was no parameter value, but the param is optional\n\t        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)\n\t            return true;\n\t        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n\t        var normalized = this.type.$normalize(value);\n\t        if (!this.type.is(normalized))\n\t            return false;\n\t        // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n\t        var encoded = this.type.encode(normalized);\n\t        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));\n\t    };\n\t    Param.prototype.toString = function () {\n\t        return \"{Param:\" + this.id + \" \" + this.type + \" squash: '\" + this.squash + \"' optional: \" + this.isOptional + \"}\";\n\t    };\n\t    /** Creates a new [[Param]] from a CONFIG block */\n\t    Param.fromConfig = function (id, type, config) {\n\t        return new Param(id, type, config, DefType.CONFIG);\n\t    };\n\t    /** Creates a new [[Param]] from a url PATH */\n\t    Param.fromPath = function (id, type, config) {\n\t        return new Param(id, type, config, DefType.PATH);\n\t    };\n\t    /** Creates a new [[Param]] from a url SEARCH */\n\t    Param.fromSearch = function (id, type, config) {\n\t        return new Param(id, type, config, DefType.SEARCH);\n\t    };\n\t    Param.values = function (params, values) {\n\t        if (values === void 0) { values = {}; }\n\t        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});\n\t    };\n\t    /**\n\t     * Finds [[Param]] objects which have different param values\n\t     *\n\t     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n\t     *\n\t     * @param params: The list of Param objects to filter\n\t     * @param values1: The first set of parameter values\n\t     * @param values2: the second set of parameter values\n\t     *\n\t     * @returns any Param objects whose values were different between values1 and values2\n\t     */\n\t    Param.changed = function (params, values1, values2) {\n\t        if (values1 === void 0) { values1 = {}; }\n\t        if (values2 === void 0) { values2 = {}; }\n\t        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });\n\t    };\n\t    /**\n\t     * Checks if two param value objects are equal (for a set of [[Param]] objects)\n\t     *\n\t     * @param params The list of [[Param]] objects to check\n\t     * @param values1 The first set of param values\n\t     * @param values2 The second set of param values\n\t     *\n\t     * @returns true if the param values in values1 and values2 are equal\n\t     */\n\t    Param.equals = function (params, values1, values2) {\n\t        if (values1 === void 0) { values1 = {}; }\n\t        if (values2 === void 0) { values2 = {}; }\n\t        return Param.changed(params, values1, values2).length === 0;\n\t    };\n\t    /** Returns true if a the parameter values are valid, according to the Param definitions */\n\t    Param.validates = function (params, values) {\n\t        if (values === void 0) { values = {}; }\n\t        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);\n\t    };\n\t    return Param;\n\t}());\n\texports.Param = Param;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar MatcherConfig = (function () {\n\t    function MatcherConfig() {\n\t        this._isCaseInsensitive = false;\n\t        this._isStrictMode = true;\n\t        this._defaultSquashPolicy = false;\n\t    }\n\t    MatcherConfig.prototype.caseInsensitive = function (value) {\n\t        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;\n\t    };\n\t    MatcherConfig.prototype.strictMode = function (value) {\n\t        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;\n\t    };\n\t    MatcherConfig.prototype.defaultSquashPolicy = function (value) {\n\t        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))\n\t            throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n\t        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;\n\t    };\n\t    return MatcherConfig;\n\t}());\n\texports.MatcherConfig = MatcherConfig;\n\t// TODO: Do not export global instance; create one in UIRouter() constructor\n\texports.matcherConfig = new MatcherConfig();\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\t/**\n\t * Wraps up a `ParamType` object to handle array values.\n\t */\n\tfunction ArrayType(type, mode) {\n\t    var _this = this;\n\t    // Wrap non-array value as array\n\t    function arrayWrap(val) { return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []); }\n\t    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n\t    function arrayUnwrap(val) {\n\t        switch (val.length) {\n\t            case 0: return undefined;\n\t            case 1: return mode === \"auto\" ? val[0] : val;\n\t            default: return val;\n\t        }\n\t    }\n\t    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n\t    function arrayHandler(callback, allTruthyMode) {\n\t        return function handleArray(val) {\n\t            if (predicates_1.isArray(val) && val.length === 0)\n\t                return val;\n\t            var arr = arrayWrap(val);\n\t            var result = common_1.map(arr, callback);\n\t            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);\n\t        };\n\t    }\n\t    // Wraps type (.equals) functions to operate on each value of an array\n\t    function arrayEqualsHandler(callback) {\n\t        return function handleArray(val1, val2) {\n\t            var left = arrayWrap(val1), right = arrayWrap(val2);\n\t            if (left.length !== right.length)\n\t                return false;\n\t            for (var i = 0; i < left.length; i++) {\n\t                if (!callback(left[i], right[i]))\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t    }\n\t    ['encode', 'decode', 'equals', '$normalize'].map(function (name) {\n\t        _this[name] = (name === 'equals' ? arrayEqualsHandler : arrayHandler)(type[name].bind(type));\n\t    });\n\t    common_1.extend(this, {\n\t        dynamic: type.dynamic,\n\t        name: type.name,\n\t        pattern: type.pattern,\n\t        is: arrayHandler(type.is.bind(type), true),\n\t        $arrayMode: mode\n\t    });\n\t}\n\t/**\n\t * A class that implements Custom Parameter Type functionality.\n\t *\n\t * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n\t *\n\t * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\n\t *\n\t * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * {\n\t *   decode: function(val) { return parseInt(val, 10); },\n\t *   encode: function(val) { return val && val.toString(); },\n\t *   equals: function(a, b) { return this.is(a) && a === b; },\n\t *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n\t *   pattern: /\\d+/\n\t * }\n\t * ```\n\t */\n\tvar ParamType = (function () {\n\t    /**\n\t     * @param def  A configuration object which contains the custom type definition.  The object's\n\t     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n\t     * @returns a new ParamType object\n\t     */\n\t    function ParamType(def) {\n\t        this.pattern = /.*/;\n\t        common_1.extend(this, def);\n\t    }\n\t    // consider these four methods to be \"abstract methods\" that should be overridden\n\t    /** @inheritdoc */\n\t    ParamType.prototype.is = function (val, key) { return true; };\n\t    /** @inheritdoc */\n\t    ParamType.prototype.encode = function (val, key) { return val; };\n\t    /** @inheritdoc */\n\t    ParamType.prototype.decode = function (val, key) { return val; };\n\t    /** @inheritdoc */\n\t    ParamType.prototype.equals = function (a, b) { return a == b; };\n\t    ParamType.prototype.$subPattern = function () {\n\t        var sub = this.pattern.toString();\n\t        return sub.substr(1, sub.length - 2);\n\t    };\n\t    ParamType.prototype.toString = function () {\n\t        return \"{ParamType:\" + this.name + \"}\";\n\t    };\n\t    /** Given an encoded string, or a decoded object, returns a decoded object */\n\t    ParamType.prototype.$normalize = function (val) {\n\t        return this.is(val) ? val : this.decode(val);\n\t    };\n\t    /**\n\t     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n\t     * e.g.:\n\t     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n\t     * - url: \"/path?queryParam=1&queryParam=2\n\t     * - $stateParams.queryParam will be [1, 2]\n\t     * if `mode` is \"auto\", then\n\t     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n\t     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n\t     */\n\t    ParamType.prototype.$asArray = function (mode, isSearch) {\n\t        if (!mode)\n\t            return this;\n\t        if (mode === \"auto\" && !isSearch)\n\t            throw new Error(\"'auto' array mode is for query parameters only\");\n\t        return new ArrayType(this, mode);\n\t    };\n\t    return ParamType;\n\t}());\n\texports.ParamType = ParamType;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar type_1 = __webpack_require__(24);\n\t// Use tildes to pre-encode slashes.\n\t// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n\t// and bidirectional encoding/decoding fails.\n\t// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\n\tfunction valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\n\tfunction valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\n\tvar ParamTypes = (function () {\n\t    function ParamTypes() {\n\t        this.enqueue = true;\n\t        this.typeQueue = [];\n\t        this.defaultTypes = {\n\t            \"hash\": {\n\t                encode: valToString,\n\t                decode: valFromString,\n\t                is: hof_1.is(String),\n\t                pattern: /.*/,\n\t                equals: function (a, b) { return a == b; } // allow coersion for null/undefined/\"\"\n\t            },\n\t            \"string\": {\n\t                encode: valToString,\n\t                decode: valFromString,\n\t                is: hof_1.is(String),\n\t                pattern: /[^/]*/\n\t            },\n\t            \"int\": {\n\t                encode: valToString,\n\t                decode: function (val) { return parseInt(val, 10); },\n\t                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },\n\t                pattern: /-?\\d+/\n\t            },\n\t            \"bool\": {\n\t                encode: function (val) { return val && 1 || 0; },\n\t                decode: function (val) { return parseInt(val, 10) !== 0; },\n\t                is: hof_1.is(Boolean),\n\t                pattern: /0|1/\n\t            },\n\t            \"date\": {\n\t                encode: function (val) {\n\t                    return !this.is(val) ? undefined : [\n\t                        val.getFullYear(),\n\t                        ('0' + (val.getMonth() + 1)).slice(-2),\n\t                        ('0' + val.getDate()).slice(-2)\n\t                    ].join(\"-\");\n\t                },\n\t                decode: function (val) {\n\t                    if (this.is(val))\n\t                        return val;\n\t                    var match = this.capture.exec(val);\n\t                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n\t                },\n\t                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },\n\t                equals: function (l, r) {\n\t                    return ['getFullYear', 'getMonth', 'getDate']\n\t                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);\n\t                },\n\t                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n\t                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n\t            },\n\t            \"json\": {\n\t                encode: common_1.toJson,\n\t                decode: common_1.fromJson,\n\t                is: hof_1.is(Object),\n\t                equals: common_1.equals,\n\t                pattern: /[^/]*/\n\t            },\n\t            \"any\": {\n\t                encode: common_1.identity,\n\t                decode: common_1.identity,\n\t                equals: common_1.equals,\n\t                pattern: /.*/\n\t            }\n\t        };\n\t        // Register default types. Store them in the prototype of this.types.\n\t        var makeType = function (definition, name) { return new type_1.ParamType(common_1.extend({ name: name }, definition)); };\n\t        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});\n\t    }\n\t    ParamTypes.prototype.type = function (name, definition, definitionFn) {\n\t        if (!predicates_1.isDefined(definition))\n\t            return this.types[name];\n\t        if (this.types.hasOwnProperty(name))\n\t            throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n\t        this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));\n\t        if (definitionFn) {\n\t            this.typeQueue.push({ name: name, def: definitionFn });\n\t            if (!this.enqueue)\n\t                this._flushTypeQueue();\n\t        }\n\t        return this;\n\t    };\n\t    ParamTypes.prototype._flushTypeQueue = function () {\n\t        while (this.typeQueue.length) {\n\t            var type = this.typeQueue.shift();\n\t            if (type.pattern)\n\t                throw new Error(\"You cannot override a type's .pattern at runtime.\");\n\t            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));\n\t        }\n\t    };\n\t    return ParamTypes;\n\t}());\n\texports.ParamTypes = ParamTypes;\n\texports.paramTypes = new ParamTypes();\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module core */ /** */\n\tvar urlMatcherFactory_1 = __webpack_require__(27);\n\tvar urlRouter_1 = __webpack_require__(29);\n\tvar state_1 = __webpack_require__(30);\n\tvar urlRouter_2 = __webpack_require__(29);\n\tvar transitionService_1 = __webpack_require__(31);\n\tvar view_1 = __webpack_require__(37);\n\tvar stateRegistry_1 = __webpack_require__(38);\n\tvar stateService_1 = __webpack_require__(43);\n\tvar globals_1 = __webpack_require__(44);\n\t/**\n\t * The master class used to instantiate an instance of UI-Router.\n\t *\n\t * This class instantiates and wires the global UI-Router services.\n\t *\n\t * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n\t * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n\t * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n\t */\n\tvar UIRouter = (function () {\n\t    function UIRouter() {\n\t        this.viewService = new view_1.ViewService();\n\t        this.transitionService = new transitionService_1.TransitionService(this);\n\t        this.globals = new globals_1.Globals(this.transitionService);\n\t        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();\n\t        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n\t        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);\n\t        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n\t        /** @hidden TODO: move this to ng1.ts */\n\t        this.stateProvider = new state_1.StateProvider(this.stateRegistry);\n\t        this.stateService = new stateService_1.StateService(this);\n\t        this.viewService.rootContext(this.stateRegistry.root());\n\t        this.globals.$current = this.stateRegistry.root();\n\t        this.globals.current = this.globals.$current.self;\n\t    }\n\t    return UIRouter;\n\t}());\n\texports.UIRouter = UIRouter;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar urlMatcher_1 = __webpack_require__(28);\n\tvar urlMatcherConfig_1 = __webpack_require__(23);\n\tvar param_1 = __webpack_require__(22);\n\tvar paramTypes_1 = __webpack_require__(25);\n\t/** @hidden */\n\tfunction getDefaultConfig() {\n\t    return {\n\t        strict: urlMatcherConfig_1.matcherConfig.strictMode(),\n\t        caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()\n\t    };\n\t}\n\t/**\n\t * Factory for [[UrlMatcher]] instances.\n\t *\n\t * The factory is available to ng1 services as\n\t * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n\t */\n\tvar UrlMatcherFactory = (function () {\n\t    function UrlMatcherFactory() {\n\t        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });\n\t    }\n\t    /**\n\t     * Defines whether URL matching should be case sensitive (the default behavior), or not.\n\t     *\n\t     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n\t     * @returns the current value of caseInsensitive\n\t     */\n\t    UrlMatcherFactory.prototype.caseInsensitive = function (value) {\n\t        return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);\n\t    };\n\t    /**\n\t     * Defines whether URLs should match trailing slashes, or not (the default behavior).\n\t     *\n\t     * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n\t     * @returns the current value of strictMode\n\t     */\n\t    UrlMatcherFactory.prototype.strictMode = function (value) {\n\t        return urlMatcherConfig_1.matcherConfig.strictMode(value);\n\t    };\n\t    /**\n\t     * Sets the default behavior when generating or matching URLs with default parameter values.\n\t     *\n\t     * @param value A string that defines the default parameter URL squashing behavior.\n\t     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n\t     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n\t     *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n\t     *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n\t     *             the parameter value from the URL and replace it with this string.\n\t     * @returns the current value of defaultSquashPolicy\n\t     */\n\t    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);\n\t    };\n\t    /**\n\t     * Creates a [[UrlMatcher]] for the specified pattern.\n\t     *\n\t     * @param pattern  The URL pattern.\n\t     * @param config  The config object hash.\n\t     * @returns The UrlMatcher.\n\t     */\n\t    UrlMatcherFactory.prototype.compile = function (pattern, config) {\n\t        return new urlMatcher_1.UrlMatcher(pattern, common_1.extend(getDefaultConfig(), config));\n\t    };\n\t    /**\n\t     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n\t     *\n\t     * @param object  The object to perform the type check against.\n\t     * @returns `true` if the object matches the `UrlMatcher` interface, by\n\t     *          implementing all the same methods.\n\t     */\n\t    UrlMatcherFactory.prototype.isMatcher = function (object) {\n\t        // TODO: typeof?\n\t        if (!predicates_1.isObject(object))\n\t            return false;\n\t        var result = true;\n\t        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {\n\t            if (predicates_1.isFunction(val))\n\t                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));\n\t        });\n\t        return result;\n\t    };\n\t    ;\n\t    /**\n\t     * Creates and registers a custom [[ParamType]] object that can be used to generate URLs with typed parameters.\n\t     *\n\t     * @param name  The type name.\n\t     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n\t     * @param definitionFn A function that is injected before the app\n\t     *        runtime starts.  The result of this function is merged into the existing `definition`.\n\t     *        See [[ParamType]] for information on the values accepted.\n\t     *\n\t     * @returns - if a type was registered: the [[UrlMatcherFactory]]\n\t     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n\t     *\n\t     * This is a simple example of a custom type that encodes and decodes items from an\n\t     * array, using the array index as the URL-encoded value:\n\t     */\n\t    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {\n\t        var type = paramTypes_1.paramTypes.type(name, definition, definitionFn);\n\t        return !predicates_1.isDefined(definition) ? type : this;\n\t    };\n\t    ;\n\t    /** @hidden */\n\t    UrlMatcherFactory.prototype.$get = function () {\n\t        paramTypes_1.paramTypes.enqueue = false;\n\t        paramTypes_1.paramTypes._flushTypeQueue();\n\t        return this;\n\t    };\n\t    ;\n\t    return UrlMatcherFactory;\n\t}());\n\texports.UrlMatcherFactory = UrlMatcherFactory;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar param_1 = __webpack_require__(22);\n\tvar paramTypes_1 = __webpack_require__(25);\n\tvar predicates_2 = __webpack_require__(4);\n\tvar param_2 = __webpack_require__(22);\n\tvar common_2 = __webpack_require__(3);\n\tvar common_3 = __webpack_require__(3);\n\t/** @hidden */\n\tfunction quoteRegExp(string, param) {\n\t    var surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n\t    if (!param)\n\t        return result;\n\t    switch (param.squash) {\n\t        case false:\n\t            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n\t            break;\n\t        case true:\n\t            result = result.replace(/\\/$/, '');\n\t            surroundPattern = ['(?:\\/(', ')|\\/)?'];\n\t            break;\n\t        default:\n\t            surroundPattern = [(\"(\" + param.squash + \"|\"), ')?'];\n\t            break;\n\t    }\n\t    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n\t}\n\t/** @hidden */\n\tvar memoizeTo = function (obj, prop, fn) { return obj[prop] = obj[prop] || fn(); };\n\t/**\n\t * Matches URLs against patterns.\n\t *\n\t * Matches URLs against patterns and extracts named parameters from the path or the search\n\t * part of the URL.\n\t *\n\t * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n\t * parameters. Multiple search parameter names are separated by '&'. Search parameters\n\t * do not influence whether or not a URL is matched, but their values are passed through into\n\t * the matched parameters returned by [[UrlMatcher.exec]].\n\t *\n\t * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n\t * or colon placeholders (`/somePath/:param`).\n\t *\n\t * - *A parameter RegExp* may be defined for a param after a colon\n\t * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n\t * The regexp must match for the url to be matched.\n\t * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n\t *\n\t * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\n\t * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\n\t *\n\t * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\n\t * parameter value will contain the remainder of the URL.\n\t *\n\t * ---\n\t *\n\t * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n\t * must be unique within the pattern (across both path and search parameters).\n\t * A path parameter matches any number of characters other than '/'. For catch-all\n\t * placeholders the path parameter matches any number of characters.\n\t *\n\t * Examples:\n\t *\n\t * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n\t *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n\t * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n\t *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n\t * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n\t * * `'/user/{id:[^/]*}'` - Same as the previous example.\n\t * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n\t *   parameter consists of 1 to 8 hex digits.\n\t * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n\t *   path into the parameter 'path'.\n\t * * `'/files/*path'` - ditto.\n\t * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n\t *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n\t *\n\t */\n\tvar UrlMatcher = (function () {\n\t    /**\n\t     * @param pattern The pattern to compile into a matcher.\n\t     * @param config  A configuration object hash\n\t     * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n\t     * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n\t     *\n\t     * @property {string} pattern  The pattern that was passed into the constructor\n\t     */\n\t    function UrlMatcher(pattern, config) {\n\t        var _this = this;\n\t        this.config = config;\n\t        /** @hidden */\n\t        this._cache = { path: [], pattern: null };\n\t        /** @hidden */\n\t        this._children = [];\n\t        /** @hidden */\n\t        this._params = [];\n\t        /** @hidden */\n\t        this._segments = [];\n\t        /** @hidden */\n\t        this._compiled = [];\n\t        this.pattern = pattern;\n\t        this.config = common_1.defaults(this.config, {\n\t            params: {},\n\t            strict: true,\n\t            caseInsensitive: false,\n\t            paramMap: common_1.identity\n\t        });\n\t        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n\t        //   '*' name\n\t        //   ':' name\n\t        //   '{' name '}'\n\t        //   '{' name ':' regexp '}'\n\t        // The regular expression is somewhat complicated due to the need to allow curly braces\n\t        // inside the regular expression. The placeholder regexp breaks down as follows:\n\t        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n\t        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n\t        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n\t        //    [^{}\\\\]+                       - anything other than curly braces or backslash\n\t        //    \\\\.                            - a backslash escape\n\t        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n\t        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, last = 0, m, patterns = [];\n\t        var checkParamErrors = function (id) {\n\t            if (!UrlMatcher.nameValidator.test(id))\n\t                throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n\t            if (common_1.find(_this._params, hof_1.propEq('id', id)))\n\t                throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n\t        };\n\t        // Split into static segments separated by path parameter placeholders.\n\t        // The number of segments is always 1 more than the number of parameters.\n\t        var matchDetails = function (m, isSearch) {\n\t            // IE[78] returns '' for unmatched groups instead of null\n\t            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n\t            return {\n\t                id: id,\n\t                regexp: regexp,\n\t                cfg: _this.config.params[id],\n\t                segment: pattern.substring(last, m.index),\n\t                type: !regexp ? null : paramTypes_1.paramTypes.type(regexp || \"string\") || common_1.inherit(paramTypes_1.paramTypes.type(\"string\"), {\n\t                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)\n\t                })\n\t            };\n\t        };\n\t        var p, segment;\n\t        while ((m = placeholder.exec(pattern))) {\n\t            p = matchDetails(m, false);\n\t            if (p.segment.indexOf('?') >= 0)\n\t                break; // we're into the search part\n\t            checkParamErrors(p.id);\n\t            this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n\t            this._segments.push(p.segment);\n\t            patterns.push([p.segment, common_1.tail(this._params)]);\n\t            last = placeholder.lastIndex;\n\t        }\n\t        segment = pattern.substring(last);\n\t        // Find any search parameter names and remove them from the last segment\n\t        var i = segment.indexOf('?');\n\t        if (i >= 0) {\n\t            var search = segment.substring(i);\n\t            segment = segment.substring(0, i);\n\t            if (search.length > 0) {\n\t                last = 0;\n\t                while ((m = searchPlaceholder.exec(search))) {\n\t                    p = matchDetails(m, true);\n\t                    checkParamErrors(p.id);\n\t                    this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n\t                    last = placeholder.lastIndex;\n\t                }\n\t            }\n\t        }\n\t        this._segments.push(segment);\n\t        common_1.extend(this, {\n\t            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),\n\t            prefix: this._segments[0]\n\t        });\n\t        Object.freeze(this);\n\t    }\n\t    /**\n\t     * Creates a new concatenated UrlMatcher\n\t     *\n\t     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n\t     *\n\t     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n\t     */\n\t    UrlMatcher.prototype.append = function (url) {\n\t        this._children.push(url);\n\t        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });\n\t        url._cache.path = this._cache.path.concat(this);\n\t        return url;\n\t    };\n\t    /** @hidden */\n\t    UrlMatcher.prototype.isRoot = function () {\n\t        return this._cache.path.length === 0;\n\t    };\n\t    /** Returns the input pattern string */\n\t    UrlMatcher.prototype.toString = function () {\n\t        return this.pattern;\n\t    };\n\t    /**\n\t     * Tests the specified url/path against this matcher.\n\t     *\n\t     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n\t     * parameter values.  Returns null if the path does not match.\n\t     *\n\t     * The returned object contains the values\n\t     * of any search parameters that are mentioned in the pattern, but their value may be null if\n\t     * they are not present in `search`. This means that search parameters are always treated\n\t     * as optional.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n\t     *   x: '1', q: 'hello'\n\t     * });\n\t     * // returns { id: 'bob', q: 'hello', r: null }\n\t     * ```\n\t     *\n\t     * @param path    The URL path to match, e.g. `$location.path()`.\n\t     * @param search  URL search parameters, e.g. `$location.search()`.\n\t     * @param hash    URL hash e.g. `$location.hash()`.\n\t     * @param options\n\t     *\n\t     * @returns The captured parameter values.\n\t     */\n\t    UrlMatcher.prototype.exec = function (path, search, hash, options) {\n\t        var _this = this;\n\t        if (search === void 0) { search = {}; }\n\t        if (options === void 0) { options = {}; }\n\t        var match = memoizeTo(this._cache, 'pattern', function () {\n\t            return new RegExp([\n\t                '^',\n\t                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),\n\t                _this.config.strict === false ? '\\/?' : '',\n\t                '$'\n\t            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);\n\t        }).exec(path);\n\t        if (!match)\n\t            return null;\n\t        //options = defaults(options, { isolate: false });\n\t        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};\n\t        if (nPathSegments !== match.length - 1)\n\t            throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\n\t        function decodePathArray(string) {\n\t            var reverseString = function (str) { return str.split(\"\").reverse().join(\"\"); };\n\t            var unquoteDashes = function (str) { return str.replace(/\\\\-/g, \"-\"); };\n\t            var split = reverseString(string).split(/-(?!\\\\)/);\n\t            var allReversed = common_1.map(split, reverseString);\n\t            return common_1.map(allReversed, unquoteDashes).reverse();\n\t        }\n\t        for (var i = 0; i < nPathSegments; i++) {\n\t            var param = pathParams[i];\n\t            var value = match[i + 1];\n\t            // if the param value matches a pre-replace pair, replace the value before decoding.\n\t            for (var j = 0; j < param.replace.length; j++) {\n\t                if (param.replace[j].from === value)\n\t                    value = param.replace[j].to;\n\t            }\n\t            if (value && param.array === true)\n\t                value = decodePathArray(value);\n\t            if (predicates_2.isDefined(value))\n\t                value = param.type.decode(value);\n\t            values[param.id] = param.value(value);\n\t        }\n\t        common_1.forEach(searchParams, function (param) {\n\t            var value = search[param.id];\n\t            for (var j = 0; j < param.replace.length; j++) {\n\t                if (param.replace[j].from === value)\n\t                    value = param.replace[j].to;\n\t            }\n\t            if (predicates_2.isDefined(value))\n\t                value = param.type.decode(value);\n\t            values[param.id] = param.value(value);\n\t        });\n\t        if (hash)\n\t            values[\"#\"] = hash;\n\t        return values;\n\t    };\n\t    /**\n\t     * @hidden\n\t     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n\t     *\n\t     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n\t     *    pattern has no parameters, an empty array is returned.\n\t     */\n\t    UrlMatcher.prototype.parameters = function (opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        if (opts.inherit === false)\n\t            return this._params;\n\t        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));\n\t    };\n\t    /**\n\t     * @hidden\n\t     * Returns a single parameter from this UrlMatcher by id\n\t     *\n\t     * @param id\n\t     * @param opts\n\t     * @returns {T|Param|any|boolean|UrlMatcher|null}\n\t     */\n\t    UrlMatcher.prototype.parameter = function (id, opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        var parent = common_1.tail(this._cache.path);\n\t        return (common_1.find(this._params, hof_1.propEq('id', id)) ||\n\t            (opts.inherit !== false && parent && parent.parameter(id)) ||\n\t            null);\n\t    };\n\t    /**\n\t     * Validates the input parameter values against this UrlMatcher\n\t     *\n\t     * Checks an object hash of parameters to validate their correctness according to the parameter\n\t     * types of this `UrlMatcher`.\n\t     *\n\t     * @param params The object hash of parameters to validate.\n\t     * @returns Returns `true` if `params` validates, otherwise `false`.\n\t     */\n\t    UrlMatcher.prototype.validates = function (params) {\n\t        var _this = this;\n\t        var validParamVal = function (param, val) { return !param || param.validates(val); };\n\t        return common_1.pairs(params || {}).map(function (_a) {\n\t            var key = _a[0], val = _a[1];\n\t            return validParamVal(_this.parameter(key), val);\n\t        }).reduce(common_1.allTrueR, true);\n\t    };\n\t    /**\n\t     * Given a set of parameter values, creates a URL from this UrlMatcher.\n\t     *\n\t     * Creates a URL that matches this pattern by substituting the specified values\n\t     * for the path and search parameters.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n\t     * // returns '/user/bob?q=yes'\n\t     * ```\n\t     *\n\t     * @param values  the values to substitute for the parameters in this pattern.\n\t     * @returns the formatted URL (path and optionally search part).\n\t     */\n\t    UrlMatcher.prototype.format = function (values) {\n\t        if (values === void 0) { values = {}; }\n\t        if (!this.validates(values))\n\t            return null;\n\t        // Build the full path of UrlMatchers (including all parent UrlMatchers)\n\t        var urlMatchers = this._cache.path.slice().concat(this);\n\t        // Extract all the static segments and Params into an ordered array\n\t        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);\n\t        // Extract the query params into a separate array\n\t        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);\n\t        /**\n\t         * Given a Param,\n\t         * Applies the parameter value, then returns details about it\n\t         */\n\t        function getDetails(param) {\n\t            // Normalize to typed value\n\t            var value = param.value(values[param.id]);\n\t            var isDefaultValue = param.isDefaultValue(value);\n\t            // Check if we're in squash mode for the parameter\n\t            var squash = isDefaultValue ? param.squash : false;\n\t            // Allow the Parameter's Type to encode the value\n\t            var encoded = param.type.encode(value);\n\t            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\n\t        }\n\t        // Build up the path-portion from the list of static segments and parameters\n\t        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\n\t            // The element is a static segment (a raw string); just append it\n\t            if (predicates_1.isString(x))\n\t                return acc + x;\n\t            // Otherwise, it's a Param.  Fetch details about the parameter value\n\t            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;\n\t            // If squash is === true, try to remove a slash from the path\n\t            if (squash === true)\n\t                return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n\t            // If squash is a string, use the string for the param value\n\t            if (predicates_1.isString(squash))\n\t                return acc + squash;\n\t            if (squash !== false)\n\t                return acc; // ?\n\t            if (encoded == null)\n\t                return acc;\n\t            // If this parameter value is an array, encode the value using encodeDashes\n\t            if (predicates_1.isArray(encoded))\n\t                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join(\"-\");\n\t            // If the parameter type is \"raw\", then do not encodeURIComponent\n\t            if (param.type.raw)\n\t                return acc + encoded;\n\t            // Encode the value\n\t            return acc + encodeURIComponent(encoded);\n\t        }, \"\");\n\t        // Build the query string by applying parameter values (array or regular)\n\t        // then mapping to key=value, then flattening and joining using \"&\"\n\t        var queryString = queryParams.map(function (param) {\n\t            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;\n\t            if (encoded == null || (isDefaultValue && squash !== false))\n\t                return;\n\t            if (!predicates_1.isArray(encoded))\n\t                encoded = [encoded];\n\t            if (encoded.length === 0)\n\t                return;\n\t            if (!param.type.raw)\n\t                encoded = common_1.map(encoded, encodeURIComponent);\n\t            return encoded.map(function (val) { return (param.id + \"=\" + val); });\n\t        }).filter(common_1.identity).reduce(common_2.unnestR, []).join(\"&\");\n\t        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n\t        return pathString + (queryString ? \"?\" + queryString : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n\t    };\n\t    /** @hidden */\n\t    UrlMatcher.encodeDashes = function (str) {\n\t        return encodeURIComponent(str).replace(/-/g, function (c) { return (\"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase()); });\n\t    };\n\t    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n\t    UrlMatcher.pathSegmentsAndParams = function (matcher) {\n\t        var staticSegments = matcher._segments;\n\t        var pathParams = matcher._params.filter(function (p) { return p.location === param_2.DefType.PATH; });\n\t        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== \"\" && predicates_2.isDefined(x); });\n\t    };\n\t    /** @hidden Given a matcher, return an array with the matcher's query params */\n\t    UrlMatcher.queryParams = function (matcher) {\n\t        return matcher._params.filter(function (p) { return p.location === param_2.DefType.SEARCH; });\n\t    };\n\t    /** @hidden */\n\t    UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\t    return UrlMatcher;\n\t}());\n\texports.UrlMatcher = UrlMatcher;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\t/** @hidden */\n\tvar $location = coreservices_1.services.location;\n\t/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\n\tfunction regExpPrefix(re) {\n\t    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n\t    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n\t}\n\t/** @hidden Interpolates matched values into a String.replace()-style pattern */\n\tfunction interpolate(pattern, match) {\n\t    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n\t        return match[what === '$' ? 0 : Number(what)];\n\t    });\n\t}\n\t/** @hidden */\n\tfunction handleIfMatch($injector, $stateParams, handler, match) {\n\t    if (!match)\n\t        return false;\n\t    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n\t    return predicates_1.isDefined(result) ? result : true;\n\t}\n\t/** @hidden */\n\tfunction appendBasePath(url, isHtml5, absolute) {\n\t    var baseHref = coreservices_1.services.locationConfig.baseHref();\n\t    if (baseHref === '/')\n\t        return url;\n\t    if (isHtml5)\n\t        return baseHref.slice(0, -1) + url;\n\t    if (absolute)\n\t        return baseHref.slice(1) + url;\n\t    return url;\n\t}\n\t// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n\t/** @hidden */\n\tfunction update(rules, otherwiseFn, evt) {\n\t    if (evt && evt.defaultPrevented)\n\t        return;\n\t    function check(rule) {\n\t        var handled = rule(coreservices_1.services.$injector, $location);\n\t        if (!handled)\n\t            return false;\n\t        if (predicates_1.isString(handled)) {\n\t            $location.replace();\n\t            $location.url(handled);\n\t        }\n\t        return true;\n\t    }\n\t    var n = rules.length, i;\n\t    for (i = 0; i < n; i++) {\n\t        if (check(rules[i]))\n\t            return;\n\t    }\n\t    // always check otherwise last to allow dynamic updates to the set of rules\n\t    if (otherwiseFn)\n\t        check(otherwiseFn);\n\t}\n\t/**\n\t * Manages rules for client-side URL\n\t *\n\t * This class manages the router rules for what to do when the URL changes.\n\t */\n\tvar UrlRouterProvider = (function () {\n\t    function UrlRouterProvider($urlMatcherFactory, $stateParams) {\n\t        /** @hidden */\n\t        this.rules = [];\n\t        /** @hidden */\n\t        this.interceptDeferred = false;\n\t        this.$urlMatcherFactory = $urlMatcherFactory;\n\t        this.$stateParams = $stateParams;\n\t    }\n\t    /**\n\t     * Registers a url handler function.\n\t     *\n\t     * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\n\t     * a redirect, or performs some action.\n\t     *\n\t     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // Here's an example of how you might allow case insensitive urls\n\t     *   $urlRouterProvider.rule(function ($injector, $location) {\n\t     *     var path = $location.path(),\n\t     *         normalized = path.toLowerCase();\n\t     *\n\t     *     if (path !== normalized) {\n\t     *       return normalized;\n\t     *     }\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param rule\n\t     * Handler function that takes `$injector` and `$location` services as arguments.\n\t     * You can use them to detect a url and return a different url as a string.\n\t     *\n\t     * @return [[$urlRouterProvider]] (`this`)\n\t     */\n\t    UrlRouterProvider.prototype.rule = function (rule) {\n\t        if (!predicates_1.isFunction(rule))\n\t            throw new Error(\"'rule' must be a function\");\n\t        this.rules.push(rule);\n\t        return this;\n\t    };\n\t    ;\n\t    /**\n\t     * Defines the path or behavior to use when no url can be matched.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // if the path doesn't match any of the urls you configured\n\t     *   // otherwise will take care of routing the user to the\n\t     *   // specified url\n\t     *   $urlRouterProvider.otherwise('/index');\n\t     *\n\t     *   // Example of using function rule as param\n\t     *   $urlRouterProvider.otherwise(function ($injector, $location) {\n\t     *     return '/a/valid/url';\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param rule\n\t     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\n\t     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n\t     *\n\t     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n\t     */\n\t    UrlRouterProvider.prototype.otherwise = function (rule) {\n\t        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))\n\t            throw new Error(\"'rule' must be a string or function\");\n\t        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;\n\t        return this;\n\t    };\n\t    ;\n\t    /**\n\t     * Registers a handler for a given url matching.\n\t     *\n\t     * If the handler is a string, it is\n\t     * treated as a redirect, and is interpolated according to the syntax of match\n\t     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n\t     *\n\t     * If the handler is a function, it is injectable.\n\t     * It gets invoked if `$location` matches.\n\t     * You have the option of inject the match object as `$match`.\n\t     *\n\t     * The handler can return\n\t     *\n\t     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n\t     *   will continue trying to find another one that matches.\n\t     * - **string** which is treated as a redirect and passed to `$location.url()`\n\t     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n\t     *     if ($state.$current.navigable !== state ||\n\t     *         !equalForKeys($match, $stateParams) {\n\t     *      $state.transitionTo(state, $match, false);\n\t     *     }\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n\t     * @param handler The path (or function that returns a path) that you want to redirect your user to.\n\t     *\n\t     * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n\t     */\n\t    UrlRouterProvider.prototype.when = function (what, handler) {\n\t        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;\n\t        var redirect, handlerIsString = predicates_1.isString(handler);\n\t        // @todo Queue this\n\t        if (predicates_1.isString(what))\n\t            what = $urlMatcherFactory.compile(what);\n\t        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))\n\t            throw new Error(\"invalid 'handler' in when()\");\n\t        var strategies = {\n\t            matcher: function (_what, _handler) {\n\t                if (handlerIsString) {\n\t                    redirect = $urlMatcherFactory.compile(_handler);\n\t                    _handler = ['$match', redirect.format.bind(redirect)];\n\t                }\n\t                return common_1.extend(function () {\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n\t                }, {\n\t                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''\n\t                });\n\t            },\n\t            regex: function (_what, _handler) {\n\t                if (_what.global || _what.sticky)\n\t                    throw new Error(\"when() RegExp must not be global or sticky\");\n\t                if (handlerIsString) {\n\t                    redirect = _handler;\n\t                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n\t                }\n\t                return common_1.extend(function () {\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));\n\t                }, {\n\t                    prefix: regExpPrefix(_what)\n\t                });\n\t            }\n\t        };\n\t        var check = {\n\t            matcher: $urlMatcherFactory.isMatcher(what),\n\t            regex: what instanceof RegExp\n\t        };\n\t        for (var n in check) {\n\t            if (check[n])\n\t                return this.rule(strategies[n](what, handler));\n\t        }\n\t        throw new Error(\"invalid 'what' in when()\");\n\t    };\n\t    ;\n\t    /**\n\t     * Disables monitoring of the URL.\n\t     *\n\t     * Call this method before UI-Router has bootstrapped.\n\t     * It will stop UI-Router from performing the initial url sync.\n\t     *\n\t     * This can be useful to perform some asynchronous initialization before the router starts.\n\t     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // Prevent $urlRouter from automatically intercepting URL changes;\n\t     *   $urlRouterProvider.deferIntercept();\n\t     * })\n\t     *\n\t     * app.run(function (MyService, $urlRouter, $http) {\n\t     *   $http.get(\"/stuff\").then(function(resp) {\n\t     *     MyService.doStuff(resp.data);\n\t     *     $urlRouter.listen();\n\t     *     $urlRouter.sync();\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param defer Indicates whether to defer location change interception. Passing\n\t     *        no parameter is equivalent to `true`.\n\t     */\n\t    UrlRouterProvider.prototype.deferIntercept = function (defer) {\n\t        if (defer === undefined)\n\t            defer = true;\n\t        this.interceptDeferred = defer;\n\t    };\n\t    ;\n\t    return UrlRouterProvider;\n\t}());\n\texports.UrlRouterProvider = UrlRouterProvider;\n\tvar UrlRouter = (function () {\n\t    /** @hidden */\n\t    function UrlRouter(urlRouterProvider) {\n\t        this.urlRouterProvider = urlRouterProvider;\n\t        common_1.bindFunctions(UrlRouter.prototype, this, this);\n\t    }\n\t    /**\n\t     * Checks the current URL for a matching rule\n\t     *\n\t     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n\t     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n\t     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n\t     * with the transition by calling `$urlRouter.sync()`.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * angular.module('app', ['ui.router'])\n\t     *   .run(function($rootScope, $urlRouter) {\n\t     *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n\t     *       // Halt state change from even starting\n\t     *       evt.preventDefault();\n\t     *       // Perform custom logic\n\t     *       var meetsRequirement = ...\n\t     *       // Continue with the update and state transition if logic allows\n\t     *       if (meetsRequirement) $urlRouter.sync();\n\t     *     });\n\t     * });\n\t     * ```\n\t     */\n\t    UrlRouter.prototype.sync = function () {\n\t        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n\t    };\n\t    /**\n\t     * Starts listening for URL changes\n\t     *\n\t     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n\t     * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\n\t     */\n\t    UrlRouter.prototype.listen = function () {\n\t        var _this = this;\n\t        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });\n\t    };\n\t    /**\n\t     * Internal API.\n\t     */\n\t    UrlRouter.prototype.update = function (read) {\n\t        if (read) {\n\t            this.location = $location.url();\n\t            return;\n\t        }\n\t        if ($location.url() === this.location)\n\t            return;\n\t        $location.url(this.location);\n\t        $location.replace();\n\t    };\n\t    /**\n\t     * Internal API.\n\t     *\n\t     * Pushes a new location to the browser history.\n\t     *\n\t     * @param urlMatcher\n\t     * @param params\n\t     * @param options\n\t     */\n\t    UrlRouter.prototype.push = function (urlMatcher, params, options) {\n\t        $location.url(urlMatcher.format(params || {}));\n\t        if (options && options.replace)\n\t            $location.replace();\n\t    };\n\t    /**\n\t     * Builds and returns a URL with interpolated parameters\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n\t     *   person: \"bob\"\n\t     * });\n\t     * // $bob == \"/about/bob\";\n\t     * ```\n\t     *\n\t     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n\t     * @param params An object of parameter values to fill the matcher's required parameters.\n\t     * @param options Options object. The options are:\n\t     *\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n\t     *\n\t     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n\t     */\n\t    UrlRouter.prototype.href = function (urlMatcher, params, options) {\n\t        if (!urlMatcher.validates(params))\n\t            return null;\n\t        var url = urlMatcher.format(params);\n\t        options = options || { absolute: false };\n\t        var cfg = coreservices_1.services.locationConfig;\n\t        var isHtml5 = cfg.html5Mode();\n\t        if (!isHtml5 && url !== null) {\n\t            url = \"#\" + cfg.hashPrefix() + url;\n\t        }\n\t        url = appendBasePath(url, isHtml5, options.absolute);\n\t        if (!options.absolute || !url) {\n\t            return url;\n\t        }\n\t        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n\t        port = (port === 80 || port === 443 ? '' : ':' + port);\n\t        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n\t    };\n\t    return UrlRouter;\n\t}());\n\texports.UrlRouter = UrlRouter;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar common_1 = __webpack_require__(3);\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.$stateProvider\n\t *\n\t * @requires ui.router.router.$urlRouterProvider\n\t * @requires ui.router.util.$urlMatcherFactoryProvider\n\t *\n\t * @description\n\t * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n\t * on state.\n\t *\n\t * A state corresponds to a \"place\" in the application in terms of the overall UI and\n\t * navigation. A state describes (via the controller / template / view properties) what\n\t * the UI looks like and does at that place.\n\t *\n\t * States often have things in common, and the primary way of factoring out these\n\t * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n\t * nested states.\n\t *\n\t * The `$stateProvider` provides interfaces to declare these states for your app.\n\t */\n\tvar StateProvider = (function () {\n\t    function StateProvider(stateRegistry) {\n\t        this.stateRegistry = stateRegistry;\n\t        this.invalidCallbacks = [];\n\t        common_1.bindFunctions(StateProvider.prototype, this, this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$stateProvider#decorator\n\t     * @methodOf ui.router.state.$stateProvider\n\t     *\n\t     * @description\n\t     * Allows you to extend (carefully) or override (at your own peril) the\n\t     * `stateBuilder` object used internally by `$stateProvider`. This can be used\n\t     * to add custom functionality to ui-router, for example inferring templateUrl\n\t     * based on the state name.\n\t     *\n\t     * When passing only a name, it returns the current (original or decorated) builder\n\t     * function that matches `name`.\n\t     *\n\t     * The builder functions that can be decorated are listed below. Though not all\n\t     * necessarily have a good use case for decoration, that is up to you to decide.\n\t     *\n\t     * In addition, users can attach custom decorators, which will generate new\n\t     * properties within the state's internal definition. There is currently no clear\n\t     * use-case for this beyond accessing internal states (i.e. $state.$current),\n\t     * however, expect this to become increasingly relevant as we introduce additional\n\t     * meta-programming features.\n\t     *\n\t     * **Warning**: Decorators should not be interdependent because the order of\n\t     * execution of the builder functions in non-deterministic. Builder functions\n\t     * should only be dependent on the state definition object and super function.\n\t     *\n\t     *\n\t     * Existing builder functions and current return values:\n\t     *\n\t     * - **parent** `{object}` - returns the parent state object.\n\t     * - **data** `{object}` - returns state data, including any inherited data that is not\n\t     *   overridden by own values (if any).\n\t     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n\t     *   or `null`.\n\t     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n\t     *   navigable).\n\t     * - **params** `{object}` - returns an array of state params that are ensured to\n\t     *   be a super-set of parent's params.\n\t     * - **views** `{object}` - returns a views object where each key is an absolute view\n\t     *   name (i.e. \"viewName@stateName\") and each value is the config object\n\t     *   (template, controller) for the view. Even when you don't use the views object\n\t     *   explicitly on a state config, one is still created for you internally.\n\t     *   So by decorating this builder function you have access to decorating template\n\t     *   and controller properties.\n\t     * - **ownParams** `{object}` - returns an array of params that belong to the state,\n\t     *   not including any params defined by ancestor states.\n\t     * - **path** `{string}` - returns the full path from the root down to this state.\n\t     *   Needed for state activation.\n\t     * - **includes** `{object}` - returns an object that includes every state that\n\t     *   would pass a `$state.includes()` test.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * // Override the internal 'views' builder with a function that takes the state\n\t     * // definition, and a reference to the internal function being overridden:\n\t     * $stateProvider.decorator('views', function (state, parent) {\n\t     *   let result = {},\n\t     *       views = parent(state);\n\t     *\n\t     *   angular.forEach(views, function (config, name) {\n\t     *     let autoName = (state.name + '.' + name).replace('.', '/');\n\t     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n\t     *     result[name] = config;\n\t     *   });\n\t     *   return result;\n\t     * });\n\t     *\n\t     * $stateProvider.state('home', {\n\t     *   views: {\n\t     *     'contact.list': { controller: 'ListController' },\n\t     *     'contact.item': { controller: 'ItemController' }\n\t     *   }\n\t     * });\n\t     *\n\t     * // ...\n\t     *\n\t     * $state.go('home');\n\t     * // Auto-populates list and item views with /partials/home/contact/list.html,\n\t     * // and /partials/home/contact/item.html, respectively.\n\t     * </pre>\n\t     *\n\t     * @param {string} name The name of the builder function to decorate.\n\t     * @param {object} func A function that is responsible for decorating the original\n\t     * builder function. The function receives two parameters:\n\t     *\n\t     *   - `{object}` - state - The state config object.\n\t     *   - `{object}` - super - The original builder function.\n\t     *\n\t     * @return {object} $stateProvider - $stateProvider instance\n\t     */\n\t    StateProvider.prototype.decorator = function (name, func) {\n\t        return this.stateRegistry.decorator(name, func) || this;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$stateProvider#state\n\t     * @methodOf ui.router.state.$stateProvider\n\t     *\n\t     * @description\n\t     * Registers a state configuration under a given state name. The stateConfig object\n\t     * has the following acceptable properties.\n\t     *\n\t     * <a id='template'></a>\n\t     *\n\t     * - **`template`** - {string|function=} - html template as a string or a function that returns\n\t     *   an html template as a string which should be used by the uiView directives. This property\n\t     *   takes precedence over templateUrl.\n\t     *\n\t     *   If `template` is a function, it will be called with the following parameters:\n\t     *\n\t     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n\t     *     applying the current state\n\t     *\n\t     * <a id='templateUrl'></a>\n\t     *\n\t     * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html\n\t     *   template that should be used by uiView.\n\t     *\n\t     *   If `templateUrl` is a function, it will be called with the following parameters:\n\t     *\n\t     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n\t     *     applying the current state\n\t     *\n\t     * <a id='templateProvider'></a>\n\t     *\n\t     * - **`templateProvider`** - {function=} - Provider function that returns HTML content\n\t     *   string.\n\t     *\n\t     * <a id='controller'></a>\n\t     *\n\t     * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly\n\t     *   related scope or the name of a registered controller if passed as a string.\n\t     *\n\t     * <a id='controllerProvider'></a>\n\t     *\n\t     * - **`controllerProvider`** - {function=} - Injectable provider function that returns\n\t     *   the actual controller or string.\n\t     *\n\t     * <a id='controllerAs'></a>\n\t     *\n\t     * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be\n\t     *   published to scope under the controllerAs name.\n\t     *\n\t     * <a id='resolve'></a>\n\t     *\n\t     * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which\n\t     *   should be injected into the controller. If any of these dependencies are promises,\n\t     *   the router will wait for them all to be resolved or one to be rejected before the\n\t     *   controller is instantiated. If all the promises are resolved successfully, the values\n\t     *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any\n\t     *   of the promises are rejected the $stateChangeError event is fired. The map object is:\n\t     *\n\t     *   - key - {string}: name of dependency to be injected into controller\n\t     *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,\n\t     *     it is injected and return value it treated as dependency. If result is a promise, it is\n\t     *     resolved before its value is injected into controller.\n\t     *\n\t     * <a id='url'></a>\n\t     *\n\t     * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or\n\t     *   transitioned to, the `$stateParams` service will be populated with any\n\t     *   parameters that were passed.\n\t     *\n\t     * <a id='params'></a>\n\t     *\n\t     * - **`params`** - {object=} - An array of parameter names or regular expressions. Only\n\t     *   use this within a state if you are not using url. Otherwise you can specify your\n\t     *   parameters within the url. When a state is navigated or transitioned to, the\n\t     *   $stateParams service will be populated with any parameters that were passed.\n\t     *\n\t     * <a id='views'></a>\n\t     *\n\t     * - **`views`** - {object=} - Use the views property to set up multiple views or to target views\n\t     *   manually/explicitly.\n\t     *\n\t     * <a id='abstract'></a>\n\t     *\n\t     * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,\n\t     *   but can provide inherited properties to its common children states.\n\t     *\n\t     * <a id='onEnter'></a>\n\t     *\n\t     * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way\n\t     *   to trigger an action or dispatch an event, such as opening a dialog.\n\t     * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n\t     *\n\t     * <a id='onExit'></a>\n\t     *\n\t     * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to\n\t     *   trigger an action or dispatch an event, such as opening a dialog.\n\t     * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n\t     *\n\t     * <a id='reloadOnSearch'></a>\n\t     *\n\t     * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state\n\t     *   just because a search/query parameter has changed (via $location.search() or $location.hash()).\n\t     *   Useful for when you'd like to modify $location.search() without triggering a reload.\n\t     *\n\t     * <a id='data'></a>\n\t     *\n\t     * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * // Some state name examples\n\t     *\n\t     * // stateName can be a single top-level name (must be unique).\n\t     * $stateProvider.state(\"home\", {});\n\t     *\n\t     * // Or it can be a nested state name. This state is a child of the\n\t     * // above \"home\" state.\n\t     * $stateProvider.state(\"home.newest\", {});\n\t     *\n\t     * // Nest states as deeply as needed.\n\t     * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n\t     *\n\t     * // state() returns $stateProvider, so you can chain state declarations.\n\t     * $stateProvider\n\t     *   .state(\"home\", {})\n\t     *   .state(\"about\", {})\n\t     *   .state(\"contacts\", {});\n\t     * </pre>\n\t     *\n\t     * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n\t     * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n\t     * @param {object} definition State configuration object.\n\t     */\n\t    StateProvider.prototype.state = function (name, definition) {\n\t        if (predicates_1.isObject(name)) {\n\t            definition = name;\n\t        }\n\t        else {\n\t            definition.name = name;\n\t        }\n\t        this.stateRegistry.register(definition);\n\t        return this;\n\t    };\n\t    /**\n\t     * Registers an invalid state handler\n\t     *\n\t     * Registers a function to be injected and invoked when [[StateService.transitionTo]] has been called with an invalid\n\t     * state reference parameter\n\t     *\n\t     * This function can be injected with one some special values:\n\t     * - **`$to$`**: TargetState\n\t     * - **`$from$`**: TargetState\n\t     *\n\t     * Note: This API is subject to change.\n\t     * Replacement of dependency injection support with some alternative is likely.\n\t     *\n\t     * @param {function} callback\n\t     *   The function which will be injected and invoked, when a matching transition is started.\n\t     *   The function may optionally return a {TargetState} or a Promise for a TargetState.  If one\n\t     *   is returned, it is treated as a redirect.\n\t     */\n\t    StateProvider.prototype.onInvalid = function (callback) {\n\t        this.invalidCallbacks.push(callback);\n\t    };\n\t    return StateProvider;\n\t}());\n\texports.StateProvider = StateProvider;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar transition_1 = __webpack_require__(11);\n\tvar hookRegistry_1 = __webpack_require__(15);\n\tvar resolve_1 = __webpack_require__(32);\n\tvar views_1 = __webpack_require__(33);\n\tvar url_1 = __webpack_require__(34);\n\tvar redirectTo_1 = __webpack_require__(35);\n\tvar onEnterExitRetain_1 = __webpack_require__(36);\n\tvar hof_1 = __webpack_require__(5);\n\t/**\n\t * The default [[Transition]] options.\n\t *\n\t * Include this object when applying custom defaults:\n\t * let reloadOpts = { reload: true, notify: true }\n\t * let options = defaults(theirOpts, customDefaults, defaultOptions);\n\t */\n\texports.defaultTransOpts = {\n\t    location: true,\n\t    relative: null,\n\t    inherit: false,\n\t    notify: true,\n\t    reload: false,\n\t    custom: {},\n\t    current: function () { return null; }\n\t};\n\t/**\n\t * This class provides services related to Transitions.\n\t *\n\t * - Most importantly, it allows global Transition Hooks to be registered.\n\t * - It allows the default transition error handler to be set.\n\t * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n\t *\n\t * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n\t */\n\tvar TransitionService = (function () {\n\t    function TransitionService(_router) {\n\t        this._router = _router;\n\t        this.$view = _router.viewService;\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\n\t        this._deregisterHookFns = {};\n\t        this.registerTransitionHooks();\n\t    }\n\t    /** @hidden */\n\t    TransitionService.prototype.registerTransitionHooks = function () {\n\t        var fns = this._deregisterHookFns;\n\t        // Wire up redirectTo hook\n\t        fns.redirectTo = this.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectTo_1.redirectToHook);\n\t        // Wire up onExit/Retain/Enter state hooks\n\t        fns.onExit = this.onExit({ exiting: function (state) { return !!state.onExit; } }, onEnterExitRetain_1.onExitHook);\n\t        fns.onRetain = this.onRetain({ retained: function (state) { return !!state.onRetain; } }, onEnterExitRetain_1.onRetainHook);\n\t        fns.onEnter = this.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterExitRetain_1.onEnterHook);\n\t        // Wire up Resolve hooks\n\t        fns.eagerResolve = this.onStart({}, resolve_1.eagerResolvePath, { priority: 1000 });\n\t        fns.lazyResolve = this.onEnter({ entering: hof_1.val(true) }, resolve_1.lazyResolveState, { priority: 1000 });\n\t        // Wire up the View management hooks\n\t        fns.loadViews = this.onStart({}, views_1.loadEnteringViews);\n\t        fns.activateViews = this.onSuccess({}, views_1.activateViews);\n\t        // After globals.current is updated at priority: 10000\n\t        fns.updateUrl = this.onSuccess({}, url_1.updateUrl, { priority: 9999 });\n\t    };\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /**\n\t     * Creates a new [[Transition]] object\n\t     *\n\t     * This is a factory function for creating new Transition objects.\n\t     * It is used internally by the [[StateService]] and should generally not be called by application code.\n\t     *\n\t     * @param fromPath the path to the current state (the from state)\n\t     * @param targetState the target state (destination)\n\t     * @returns a Transition\n\t     */\n\t    TransitionService.prototype.create = function (fromPath, targetState) {\n\t        return new transition_1.Transition(fromPath, targetState, this._router);\n\t    };\n\t    return TransitionService;\n\t}());\n\texports.TransitionService = TransitionService;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module hooks */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar resolveContext_1 = __webpack_require__(17);\n\t/**\n\t * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n\t *\n\t * Registered using `transitionService.onStart({}, eagerResolvePath);`\n\t *\n\t * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n\t *\n\t * See [[StateDeclaration.resolve]]\n\t */\n\texports.eagerResolvePath = function (trans) {\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n\t        .resolvePath(\"EAGER\", trans)\n\t        .then(common_1.noop);\n\t};\n\t/**\n\t * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n\t *\n\t * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n\t *\n\t * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n\t *\n\t * See [[StateDeclaration.resolve]]\n\t */\n\texports.lazyResolveState = function (trans, state) {\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n\t        .subContext(state)\n\t        .resolvePath(\"LAZY\", trans)\n\t        .then(common_1.noop);\n\t};\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module hooks */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar coreservices_1 = __webpack_require__(6);\n\t/**\n\t * A [[TransitionHookFn]] which waits for the views to load\n\t *\n\t * Registered using `transitionService.onStart({}, loadEnteringViews);`\n\t *\n\t * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n\t * In angular 1, this includes loading the templates.\n\t */\n\tfunction loadEnteringViews(transition) {\n\t    var enteringViews = transition.views(\"entering\");\n\t    if (!enteringViews.length)\n\t        return;\n\t    return coreservices_1.services.$q.all(enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);\n\t}\n\texports.loadEnteringViews = loadEnteringViews;\n\t/**\n\t * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n\t *\n\t * Registered using `transitionService.onSuccess({}, activateViews);`\n\t *\n\t * After a transition is complete, this hook deactivates the old views from the previous state,\n\t * and activates the new views from the destination state.\n\t *\n\t * See [[ViewService]]\n\t */\n\tfunction activateViews(transition) {\n\t    var enteringViews = transition.views(\"entering\");\n\t    var exitingViews = transition.views(\"exiting\");\n\t    if (!enteringViews.length && !exitingViews.length)\n\t        return;\n\t    var $view = transition.router.viewService;\n\t    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });\n\t    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });\n\t    $view.sync();\n\t}\n\texports.activateViews = activateViews;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * A [[TransitionHookFn]] which updates the URL after a successful transition\n\t *\n\t * Registered using `transitionService.onSuccess({}, updateUrl);`\n\t */\n\tfunction updateUrl(transition) {\n\t    var options = transition.options();\n\t    var $state = transition.router.stateService;\n\t    var $urlRouter = transition.router.urlRouter;\n\t    if (options.location && $state.$current.navigable) {\n\t        var urlOptions = { replace: options.location === 'replace' };\n\t        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n\t    }\n\t    $urlRouter.update(true);\n\t}\n\texports.updateUrl = updateUrl;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module hooks */ /** */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar targetState_1 = __webpack_require__(14);\n\t/**\n\t * A [[TransitionHookFn]] that redirects to a different state or params\n\t *\n\t * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n\t *\n\t * See [[StateDeclaration.redirectTo]]\n\t */\n\texports.redirectToHook = function (trans) {\n\t    var redirect = trans.to().redirectTo;\n\t    if (!redirect)\n\t        return;\n\t    function handleResult(result) {\n\t        var $state = trans.router.stateService;\n\t        if (result instanceof targetState_1.TargetState)\n\t            return result;\n\t        if (predicates_1.isString(result))\n\t            return $state.target(result, trans.params(), trans.options());\n\t        if (result['state'] || result['params'])\n\t            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n\t    }\n\t    if (predicates_1.isFunction(redirect)) {\n\t        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);\n\t    }\n\t    return handleResult(redirect);\n\t};\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * A factory which creates an onEnter, onExit or onRetain transition hook function\n\t *\n\t * The returned function invokes the (for instance) state.onEnter hook when the\n\t * state is being entered.\n\t *\n\t * @hidden\n\t */\n\tfunction makeEnterExitRetainHook(hookName) {\n\t    return function (transition, state) {\n\t        return state[hookName](transition, state);\n\t    };\n\t}\n\t/**\n\t * The [[TransitionStateHookFn]] for onExit\n\t *\n\t * When the state is being exited, the state's .onExit function is invoked.\n\t *\n\t * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n\t */\n\texports.onExitHook = makeEnterExitRetainHook('onExit');\n\t/**\n\t * The [[TransitionStateHookFn]] for onRetain\n\t *\n\t * When the state is being exited, the state's .onRetain function is invoked.\n\t *\n\t * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n\t */\n\texports.onRetainHook = makeEnterExitRetainHook('onRetain');\n\t/**\n\t * The [[TransitionStateHookFn]] for onEnter\n\t *\n\t * When the state is being exited, the state's .onEnter function is invoked.\n\t *\n\t * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n\t */\n\texports.onEnterHook = makeEnterExitRetainHook('onEnter');\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module view */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar trace_1 = __webpack_require__(12);\n\tvar match = function (obj1) {\n\t    var keys = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        keys[_i - 1] = arguments[_i];\n\t    }\n\t    return function (obj2) { return keys.reduce(function (memo, key) { return memo && obj1[key] === obj2[key]; }, true); };\n\t};\n\t/**\n\t * The View service\n\t */\n\tvar ViewService = (function () {\n\t    function ViewService() {\n\t        var _this = this;\n\t        this.uiViews = [];\n\t        this.viewConfigs = [];\n\t        this._viewConfigFactories = {};\n\t        this.sync = function () {\n\t            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});\n\t            /**\n\t             * Given a ui-view and a ViewConfig, determines if they \"match\".\n\t             *\n\t             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n\t             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n\t             *\n\t             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n\t             * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n\t             *\n\t             * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n\t             *\n\t             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n\t             * - the ui-view's name matches the ViewConfig's target name\n\t             * - the ui-view's context matches the ViewConfig's anchor\n\t             *\n\t             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n\t             * - There exists a parent ui-view where:\n\t             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n\t             *    - the parent ui-view's context matches the ViewConfig's anchor\n\t             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n\t             *\n\t             * Example:\n\t             *\n\t             * DOM:\n\t             * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n\t             *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n\t             *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n\t             *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n\t             *       </div>\n\t             *     </div>\n\t             *   </div>\n\t             * </div>\n\t             *\n\t             * uiViews: [\n\t             *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n\t             *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n\t             *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n\t             *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n\t             * ]\n\t             *\n\t             * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n\t             *\n\t             * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n\t             * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n\t             * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n\t             * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n\t             *\n\t             * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n\t             * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n\t             * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n\t             *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n\t             *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n\t             * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n\t             *   the tail of the ui-view's fqn \"default.bar\"\n\t             */\n\t            var matches = function (uiView) { return function (viewConfig) {\n\t                // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n\t                if (uiView.$type !== viewConfig.viewDecl.$type)\n\t                    return false;\n\t                // Split names apart from both viewConfig and uiView into segments\n\t                var vc = viewConfig.viewDecl;\n\t                var vcSegments = vc.$uiViewName.split(\".\");\n\t                var uivSegments = uiView.fqn.split(\".\");\n\t                // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n\t                // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n\t                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n\t                    return false;\n\t                // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n\t                // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n\t                var negOffset = (1 - vcSegments.length) || undefined;\n\t                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n\t                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n\t                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n\t            }; };\n\t            // Return the number of dots in the fully qualified name\n\t            function uiViewDepth(uiView) {\n\t                return uiView.fqn.split(\".\").length;\n\t            }\n\t            // Return the ViewConfig's context's depth in the context tree.\n\t            function viewConfigDepth(config) {\n\t                var context = config.viewDecl.$context, count = 0;\n\t                while (++count && context.parent)\n\t                    context = context.parent;\n\t                return count;\n\t            }\n\t            // Given a depth function, returns a compare function which can return either ascending or descending order\n\t            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });\n\t            var matchingConfigPair = function (uiView) {\n\t                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));\n\t                if (matchingConfigs.length > 1)\n\t                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n\t                return [uiView, matchingConfigs[0]];\n\t            };\n\t            var configureUIView = function (_a) {\n\t                var uiView = _a[0], viewConfig = _a[1];\n\t                // If a parent ui-view is reconfigured, it could destroy child ui-views.\n\t                // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n\t                if (_this.uiViews.indexOf(uiView) !== -1)\n\t                    uiView.configUpdated(viewConfig);\n\t            };\n\t            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n\t        };\n\t    }\n\t    ViewService.prototype.rootContext = function (context) {\n\t        return this._rootContext = context || this._rootContext;\n\t    };\n\t    ;\n\t    ViewService.prototype.viewConfigFactory = function (viewType, factory) {\n\t        this._viewConfigFactories[viewType] = factory;\n\t    };\n\t    ViewService.prototype.createViewConfig = function (path, decl) {\n\t        var cfgFactory = this._viewConfigFactories[decl.$type];\n\t        if (!cfgFactory)\n\t            throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n\t        var cfgs = cfgFactory(path, decl);\n\t        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];\n\t    };\n\t    /**\n\t     * De-registers a ViewConfig.\n\t     *\n\t     * @param viewConfig The ViewConfig view to deregister.\n\t     */\n\t    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n\t        trace_1.trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n\t        common_1.removeFrom(this.viewConfigs, viewConfig);\n\t    };\n\t    ;\n\t    ViewService.prototype.activateViewConfig = function (viewConfig) {\n\t        trace_1.trace.traceViewServiceEvent(\"-> Registering\", viewConfig);\n\t        this.viewConfigs.push(viewConfig);\n\t    };\n\t    ;\n\t    /**\n\t     * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n\t     * be updated with a template, controller, and local variables.\n\t     *\n\t     * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n\t     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n\t     *                   of the view.\n\t     * @return {Function} Returns a de-registration function used when the view is destroyed.\n\t     */\n\t    ViewService.prototype.registerUIView = function (uiView) {\n\t        trace_1.trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n\t        var uiViews = this.uiViews;\n\t        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };\n\t        if (uiViews.filter(fqnMatches).length)\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\t        uiViews.push(uiView);\n\t        this.sync();\n\t        return function () {\n\t            var idx = uiViews.indexOf(uiView);\n\t            if (idx <= 0) {\n\t                trace_1.trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n\t                return;\n\t            }\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n\t            common_1.removeFrom(uiViews)(uiView);\n\t        };\n\t    };\n\t    ;\n\t    /**\n\t     * Returns the list of views currently available on the page, by fully-qualified name.\n\t     *\n\t     * @return {Array} Returns an array of fully-qualified view names.\n\t     */\n\t    ViewService.prototype.available = function () {\n\t        return this.uiViews.map(hof_1.prop(\"fqn\"));\n\t    };\n\t    /**\n\t     * Returns the list of views on the page containing loaded content.\n\t     *\n\t     * @return {Array} Returns an array of fully-qualified view names.\n\t     */\n\t    ViewService.prototype.active = function () {\n\t        return this.uiViews.filter(hof_1.prop(\"$config\")).map(hof_1.prop(\"name\"));\n\t    };\n\t    /**\n\t     * Normalizes a view's name from a state.views configuration block.\n\t     *\n\t     * @param context the context object (state declaration) that the view belongs to\n\t     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n\t     *\n\t     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n\t     */\n\t    ViewService.normalizeUIViewTarget = function (context, rawViewName) {\n\t        if (rawViewName === void 0) { rawViewName = \"\"; }\n\t        // TODO: Validate incoming view name with a regexp to allow:\n\t        // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n\t        // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n\t        var viewAtContext = rawViewName.split(\"@\");\n\t        var uiViewName = viewAtContext[0] || \"$default\"; // default to unnamed view\n\t        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : \"^\"; // default to parent context\n\t        // Handle relative view-name sugar syntax.\n\t        // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n\t        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n\t        if (relativeViewNameSugar) {\n\t            // Clobbers existing contextAnchor (rawViewName validation will fix this)\n\t            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n\t            uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n\t        }\n\t        if (uiViewName.charAt(0) === '!') {\n\t            uiViewName = uiViewName.substr(1);\n\t            uiViewContextAnchor = \"\"; // target absolutely from root\n\t        }\n\t        // handle parent relative targeting \"^.^.^\"\n\t        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n\t        if (relativeMatch.exec(uiViewContextAnchor)) {\n\t            var anchor = uiViewContextAnchor.split(\".\").reduce((function (anchor, x) { return anchor.parent; }), context);\n\t            uiViewContextAnchor = anchor.name;\n\t        }\n\t        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\n\t    };\n\t    return ViewService;\n\t}());\n\texports.ViewService = ViewService;\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\tvar stateMatcher_1 = __webpack_require__(39);\n\tvar stateBuilder_1 = __webpack_require__(40);\n\tvar stateQueueManager_1 = __webpack_require__(41);\n\tvar StateRegistry = (function () {\n\t    function StateRegistry(urlMatcherFactory, urlRouterProvider) {\n\t        this.states = {};\n\t        this.matcher = new stateMatcher_1.StateMatcher(this.states);\n\t        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);\n\t        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider);\n\t        var rootStateDef = {\n\t            name: '',\n\t            url: '^',\n\t            views: null,\n\t            params: {\n\t                '#': { value: null, type: 'hash', dynamic: true }\n\t            },\n\t            abstract: true\n\t        };\n\t        var _root = this._root = this.stateQueue.register(rootStateDef);\n\t        _root.navigable = null;\n\t    }\n\t    StateRegistry.prototype.root = function () {\n\t        return this._root;\n\t    };\n\t    StateRegistry.prototype.register = function (stateDefinition) {\n\t        return this.stateQueue.register(stateDefinition);\n\t    };\n\t    StateRegistry.prototype.get = function (stateOrName, base) {\n\t        var _this = this;\n\t        if (arguments.length === 0)\n\t            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });\n\t        var found = this.matcher.find(stateOrName, base);\n\t        return found && found.self || null;\n\t    };\n\t    StateRegistry.prototype.decorator = function (name, func) {\n\t        return this.builder.builder(name, func);\n\t    };\n\t    return StateRegistry;\n\t}());\n\texports.StateRegistry = StateRegistry;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar StateMatcher = (function () {\n\t    function StateMatcher(_states) {\n\t        this._states = _states;\n\t    }\n\t    StateMatcher.prototype.isRelative = function (stateName) {\n\t        stateName = stateName || \"\";\n\t        return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n\t    };\n\t    StateMatcher.prototype.find = function (stateOrName, base) {\n\t        if (!stateOrName && stateOrName !== \"\")\n\t            return undefined;\n\t        var isStr = predicates_1.isString(stateOrName);\n\t        var name = isStr ? stateOrName : stateOrName.name;\n\t        if (this.isRelative(name))\n\t            name = this.resolvePath(name, base);\n\t        var state = this._states[name];\n\t        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n\t            return state;\n\t        }\n\t        return undefined;\n\t    };\n\t    StateMatcher.prototype.resolvePath = function (name, base) {\n\t        if (!base)\n\t            throw new Error(\"No reference point given for path '\" + name + \"'\");\n\t        var baseState = this.find(base);\n\t        var splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\t        for (; i < pathLength; i++) {\n\t            if (splitName[i] === \"\" && i === 0) {\n\t                current = baseState;\n\t                continue;\n\t            }\n\t            if (splitName[i] === \"^\") {\n\t                if (!current.parent)\n\t                    throw new Error(\"Path '\" + name + \"' not valid for state '\" + baseState.name + \"'\");\n\t                current = current.parent;\n\t                continue;\n\t            }\n\t            break;\n\t        }\n\t        var relName = splitName.slice(i).join(\".\");\n\t        return current.name + (current.name && relName ? \".\" : \"\") + relName;\n\t    };\n\t    return StateMatcher;\n\t}());\n\texports.StateMatcher = StateMatcher;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar strings_1 = __webpack_require__(9);\n\tvar hof_1 = __webpack_require__(5);\n\tvar param_1 = __webpack_require__(22);\n\tvar resolvable_1 = __webpack_require__(19);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar parseUrl = function (url) {\n\t    if (!predicates_1.isString(url))\n\t        return false;\n\t    var root = url.charAt(0) === '^';\n\t    return { val: root ? url.substring(1) : url, root: root };\n\t};\n\tfunction selfBuilder(state) {\n\t    state.self.$$state = function () { return state; };\n\t    return state.self;\n\t}\n\tfunction dataBuilder(state) {\n\t    if (state.parent && state.parent.data) {\n\t        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);\n\t    }\n\t    return state.data;\n\t}\n\tvar getUrlBuilder = function ($urlMatcherFactoryProvider, root) {\n\t    return function urlBuilder(state) {\n\t        var stateDec = state;\n\t        var parsed = parseUrl(stateDec.url), parent = state.parent;\n\t        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n\t            params: state.params || {},\n\t            paramMap: function (paramConfig, isSearch) {\n\t                if (stateDec.reloadOnSearch === false && isSearch)\n\t                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });\n\t                return paramConfig;\n\t            }\n\t        });\n\t        if (!url)\n\t            return null;\n\t        if (!$urlMatcherFactoryProvider.isMatcher(url))\n\t            throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n\t        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);\n\t    };\n\t};\n\tvar getNavigableBuilder = function (isRoot) {\n\t    return function navigableBuilder(state) {\n\t        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n\t    };\n\t};\n\tfunction paramsBuilder(state) {\n\t    var makeConfigParam = function (config, id) { return param_1.Param.fromConfig(id, null, config); };\n\t    var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];\n\t    var nonUrlParams = common_1.values(common_1.map(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));\n\t    return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});\n\t}\n\tfunction pathBuilder(state) {\n\t    return state.parent ? state.parent.path.concat(state) : [state];\n\t}\n\tfunction includesBuilder(state) {\n\t    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};\n\t    includes[state.name] = true;\n\t    return includes;\n\t}\n\t/**\n\t * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n\t *\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n\t * validates the `resolve` property and converts it to a [[Resolvable]] array.\n\t *\n\t * resolve: input value can be:\n\t *\n\t * {\n\t *   // analyzed but not injected\n\t *   myFooResolve: function() { return \"myFooData\"; },\n\t *\n\t *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n\t *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n\t *\n\t *   // Array split; \"DependencyName\" dep as string\n\t *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n\t *\n\t *   // Array split; DependencyType dep as token (compared using ===)\n\t *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n\t *\n\t *   // val.$inject used as deps\n\t *   // where:\n\t *   //     corgeResolve.$inject = [\"DependencyName\"];\n\t *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n\t *   // then \"DependencyName\" dep as string\n\t *   myCorgeResolve: corgeResolve,\n\t *\n\t *  // inject service by name\n\t *  // When a string is found, desugar creating a resolve that injects the named service\n\t *   myGraultResolve: \"SomeService\"\n\t * }\n\t *\n\t * or:\n\t *\n\t * [\n\t *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n\t *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n\t *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n\t * ]\n\t */\n\tfunction resolvablesBuilder(state) {\n\t    /** convert a resolve: {} object to an array of tuples */\n\t    var obj2Tuples = function (obj) { return Object.keys(obj || {}).map(function (token) { return ({ token: token, val: obj[token], deps: undefined }); }); };\n\t    /** fetch DI annotations from a function or ng1-style array */\n\t    var annotate = function (fn) { return fn.$inject || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi); };\n\t    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n\t    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };\n\t    /** true if the object looks like a provide literal, or a ng2 Provider */\n\t    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };\n\t    /** true if the object looks like a tuple from obj2Tuples */\n\t    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };\n\t    /** extracts the token from a Provider or provide literal */\n\t    var token = function (p) { return p.provide || p.token; };\n\t    /** Given a literal resolve or provider object, returns a Resolvable */\n\t    var literal2Resolvable = hof_1.pattern([\n\t        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],\n\t        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],\n\t        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],\n\t        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],\n\t        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), function (x) { return x; }, [p.useExisting], p.policy); }],\n\t    ]);\n\t    var tuple2Resolvable = hof_1.pattern([\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, function (x) { return x; }, [tuple.val], tuple.policy); }],\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],\n\t    ]);\n\t    var item2Resolvable = hof_1.pattern([\n\t        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],\n\t        [isResolveLiteral, literal2Resolvable],\n\t        [isLikeNg2Provider, literal2Resolvable],\n\t        [isTupleFromObj, tuple2Resolvable],\n\t        [hof_1.val(true), function (tuple) { throw new Error(\"Invalid resolve value: \" + strings_1.stringify(tuple)); }]\n\t    ]);\n\t    // If resolveBlock is already an array, use it as-is.\n\t    // Otherwise, assume it's an object and convert to an Array of tuples\n\t    var decl = state.resolve;\n\t    var items = predicates_1.isArray(decl) ? decl : obj2Tuples(decl);\n\t    return items.map(item2Resolvable);\n\t}\n\texports.resolvablesBuilder = resolvablesBuilder;\n\t/**\n\t * @internalapi A internal global service\n\t *\n\t * StateBuilder is a factory for the internal [[State]] objects.\n\t *\n\t * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n\t * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n\t * [[State]] object, which has an API and is used internally.\n\t *\n\t * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n\t * using the [[builder]] method.\n\t */\n\tvar StateBuilder = (function () {\n\t    function StateBuilder(matcher, $urlMatcherFactoryProvider) {\n\t        this.matcher = matcher;\n\t        var self = this;\n\t        var root = function () { return matcher.find(\"\"); };\n\t        var isRoot = function (state) { return state.name === \"\"; };\n\t        function parentBuilder(state) {\n\t            if (isRoot(state))\n\t                return null;\n\t            return matcher.find(self.parentName(state)) || root();\n\t        }\n\t        this.builders = {\n\t            self: [selfBuilder],\n\t            parent: [parentBuilder],\n\t            data: [dataBuilder],\n\t            // Build a URLMatcher if necessary, either via a relative or absolute URL\n\t            url: [getUrlBuilder($urlMatcherFactoryProvider, root)],\n\t            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n\t            navigable: [getNavigableBuilder(isRoot)],\n\t            params: [paramsBuilder],\n\t            // Each framework-specific ui-router implementation should define its own `views` builder\n\t            // e.g., src/ng1/statebuilders/views.ts\n\t            views: [],\n\t            // Keep a full path from the root down to this state as this is needed for state activation.\n\t            path: [pathBuilder],\n\t            // Speed up $state.includes() as it's used a lot\n\t            includes: [includesBuilder],\n\t            resolvables: [resolvablesBuilder]\n\t        };\n\t    }\n\t    /**\n\t     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n\t     * More than one BuilderFunction can be registered for a given property.\n\t     *\n\t     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n\t     *\n\t     * @param name The name of the State property being registered for.\n\t     * @param fn The BuilderFunction which will be used to build the State property\n\t     * @returns a function which deregisters the BuilderFunction\n\t     */\n\t    StateBuilder.prototype.builder = function (name, fn) {\n\t        var builders = this.builders;\n\t        var array = builders[name] || [];\n\t        // Backwards compat: if only one builder exists, return it, else return whole arary.\n\t        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))\n\t            return array.length > 1 ? array : array[0];\n\t        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))\n\t            return;\n\t        builders[name] = array;\n\t        builders[name].push(fn);\n\t        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };\n\t    };\n\t    /**\n\t     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n\t     * properties and API built.\n\t     *\n\t     * @param state an uninitialized State object\n\t     * @returns the built State object\n\t     */\n\t    StateBuilder.prototype.build = function (state) {\n\t        var _a = this, matcher = _a.matcher, builders = _a.builders;\n\t        var parent = this.parentName(state);\n\t        if (parent && !matcher.find(parent))\n\t            return null;\n\t        for (var key in builders) {\n\t            if (!builders.hasOwnProperty(key))\n\t                continue;\n\t            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);\n\t            state[key] = chain(state);\n\t        }\n\t        return state;\n\t    };\n\t    StateBuilder.prototype.parentName = function (state) {\n\t        var name = state.name || \"\";\n\t        if (name.indexOf('.') !== -1)\n\t            return name.substring(0, name.lastIndexOf('.'));\n\t        if (!state.parent)\n\t            return \"\";\n\t        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n\t    };\n\t    StateBuilder.prototype.name = function (state) {\n\t        var name = state.name;\n\t        if (name.indexOf('.') !== -1 || !state.parent)\n\t            return name;\n\t        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n\t        return parentName ? parentName + \".\" + name : name;\n\t    };\n\t    return StateBuilder;\n\t}());\n\texports.StateBuilder = StateBuilder;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar stateObject_1 = __webpack_require__(42);\n\tvar StateQueueManager = (function () {\n\t    function StateQueueManager(states, builder, $urlRouterProvider) {\n\t        this.states = states;\n\t        this.builder = builder;\n\t        this.$urlRouterProvider = $urlRouterProvider;\n\t        this.queue = [];\n\t    }\n\t    StateQueueManager.prototype.register = function (config) {\n\t        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;\n\t        // Wrap a new object around the state so we can store our private details easily.\n\t        // @TODO: state = new State(extend({}, config, { ... }))\n\t        var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {\n\t            self: config,\n\t            resolve: config.resolve || [],\n\t            toString: function () { return config.name; }\n\t        }));\n\t        if (!predicates_1.isString(state.name))\n\t            throw new Error(\"State must have a valid name\");\n\t        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)\n\t            throw new Error(\"State '\" + state.name + \"' is already defined\");\n\t        queue.push(state);\n\t        if (this.$state) {\n\t            this.flush($state);\n\t        }\n\t        return state;\n\t    };\n\t    StateQueueManager.prototype.flush = function ($state) {\n\t        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;\n\t        var result, state, orphans = [], orphanIdx, previousQueueLength = {};\n\t        while (queue.length > 0) {\n\t            state = queue.shift();\n\t            result = builder.build(state);\n\t            orphanIdx = orphans.indexOf(state);\n\t            if (result) {\n\t                if (states.hasOwnProperty(state.name))\n\t                    throw new Error(\"State '\" + name + \"' is already defined\");\n\t                states[state.name] = state;\n\t                this.attachRoute($state, state);\n\t                if (orphanIdx >= 0)\n\t                    orphans.splice(orphanIdx, 1);\n\t                continue;\n\t            }\n\t            var prev = previousQueueLength[state.name];\n\t            previousQueueLength[state.name] = queue.length;\n\t            if (orphanIdx >= 0 && prev === queue.length) {\n\t                // Wait until two consecutive iterations where no additional states were dequeued successfully.\n\t                // throw new Error(`Cannot register orphaned state '${state.name}'`);\n\t                return states;\n\t            }\n\t            else if (orphanIdx < 0) {\n\t                orphans.push(state);\n\t            }\n\t            queue.push(state);\n\t        }\n\t        return states;\n\t    };\n\t    StateQueueManager.prototype.autoFlush = function ($state) {\n\t        this.$state = $state;\n\t        this.flush($state);\n\t    };\n\t    StateQueueManager.prototype.attachRoute = function ($state, state) {\n\t        var $urlRouterProvider = this.$urlRouterProvider;\n\t        if (state[common_1.abstractKey] || !state.url)\n\t            return;\n\t        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n\t                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {\n\t                    $state.transitionTo(state, $match, { inherit: true, location: false });\n\t                }\n\t            }]);\n\t    };\n\t    return StateQueueManager;\n\t}());\n\texports.StateQueueManager = StateQueueManager;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.type:State\n\t *\n\t * @description\n\t * Definition object for states. Includes methods for manipulating the state heirarchy.\n\t *\n\t * @param {Object} config  A configuration object hash that includes the results of user-supplied\n\t *        values, as well as values from `StateBuilder`.\n\t *\n\t * @returns {Object}  Returns a new `State` object.\n\t */\n\tvar State = (function () {\n\t    function State(config) {\n\t        common_1.extend(this, config);\n\t        // Object.freeze(this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#is\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Compares the identity of the state against the passed value, which is either an object\n\t     * reference to the actual `State` instance, the original definition object passed to\n\t     * `$stateProvider.state()`, or the fully-qualified name.\n\t     *\n\t     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n\t     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n\t     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n\t     */\n\t    State.prototype.is = function (ref) {\n\t        return this === ref || this.self === ref || this.fqn() === ref;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#fqn\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Returns the fully-qualified name of the state, based on its current position in the tree.\n\t     *\n\t     * @returns {string} Returns a dot-separated name of the state.\n\t     */\n\t    State.prototype.fqn = function () {\n\t        if (!this.parent || !(this.parent instanceof this.constructor))\n\t            return this.name;\n\t        var name = this.parent.fqn();\n\t        return name ? name + \".\" + this.name : this.name;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#root\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Returns the root node of this state's tree.\n\t     *\n\t     * @returns {State} The root of this state's tree.\n\t     */\n\t    State.prototype.root = function () {\n\t        return this.parent && this.parent.root() || this;\n\t    };\n\t    State.prototype.parameters = function (opts) {\n\t        opts = common_1.defaults(opts, { inherit: true });\n\t        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n\t        return inherited.concat(common_1.values(this.params));\n\t    };\n\t    State.prototype.parameter = function (id, opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        return (this.url && this.url.parameter(id, opts) ||\n\t            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||\n\t            opts.inherit && this.parent && this.parent.parameter(id));\n\t    };\n\t    State.prototype.toString = function () {\n\t        return this.fqn();\n\t    };\n\t    return State;\n\t}());\n\texports.State = State;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar queue_1 = __webpack_require__(8);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar pathFactory_1 = __webpack_require__(20);\n\tvar node_1 = __webpack_require__(21);\n\tvar transitionService_1 = __webpack_require__(31);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar targetState_1 = __webpack_require__(14);\n\tvar param_1 = __webpack_require__(22);\n\tvar glob_1 = __webpack_require__(7);\n\tvar common_2 = __webpack_require__(3);\n\tvar common_3 = __webpack_require__(3);\n\tvar StateService = (function () {\n\t    /** @hidden */\n\t    function StateService(router) {\n\t        this.router = router;\n\t        /** @hidden */\n\t        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\n\t            if ($error$ instanceof Error && $error$.stack) {\n\t                console.error($error$.stack);\n\t            }\n\t            else if ($error$ instanceof rejectFactory_1.Rejection) {\n\t                console.error($error$);\n\t                if ($error$.detail && $error$.detail.stack)\n\t                    console.error($error$.detail.stack);\n\t            }\n\t            else {\n\t                console.error($error$);\n\t            }\n\t        };\n\t        var getters = ['current', '$current', 'params', 'transition'];\n\t        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });\n\t        common_3.bindFunctions(StateService.prototype, this, this, boundFns);\n\t    }\n\t    Object.defineProperty(StateService.prototype, \"transition\", {\n\t        get: function () { return this.router.globals.transition; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"params\", {\n\t        get: function () { return this.router.globals.params; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"current\", {\n\t        get: function () { return this.router.globals.current; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"$current\", {\n\t        get: function () { return this.router.globals.$current; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * Handler for when [[transitionTo]] is called with an invalid state.\n\t     *\n\t     * Invokes the [[onInvalid]] callbacks, in natural order.\n\t     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n\t     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n\t     *\n\t     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n\t     */\n\t    StateService.prototype._handleInvalidTargetState = function (fromPath, $to$) {\n\t        var _this = this;\n\t        var globals = this.router.globals;\n\t        var latestThing = function () { return globals.transitionHistory.peekTail(); };\n\t        var latest = latestThing();\n\t        var $from$ = pathFactory_1.PathFactory.makeTargetState(fromPath);\n\t        var callbackQueue = new queue_1.Queue([].concat(this.router.stateProvider.invalidCallbacks));\n\t        var $q = coreservices_1.services.$q, $injector = coreservices_1.services.$injector;\n\t        var invokeCallback = function (callback) { return $q.when($injector.invoke(callback, null, { $to$: $to$, $from$: $from$ })); };\n\t        var checkForRedirect = function (result) {\n\t            if (!(result instanceof targetState_1.TargetState)) {\n\t                return;\n\t            }\n\t            var target = result;\n\t            // Recreate the TargetState, in case the state is now defined.\n\t            target = _this.target(target.identifier(), target.params(), target.options());\n\t            if (!target.valid())\n\t                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();\n\t            if (latestThing() !== latest)\n\t                return rejectFactory_1.Rejection.superseded().toPromise();\n\t            return _this.transitionTo(target.identifier(), target.params(), target.options());\n\t        };\n\t        function invokeNextCallback() {\n\t            var nextCallback = callbackQueue.dequeue();\n\t            if (nextCallback === undefined)\n\t                return rejectFactory_1.Rejection.invalid($to$.error()).toPromise();\n\t            return invokeCallback(nextCallback).then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });\n\t        }\n\t        return invokeNextCallback();\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#reload\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n\t     * controllers reinstantiated, and events re-fired.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.reload = function(){\n\t     *     $state.reload();\n\t     *   }\n\t     * });\n\t     * </pre>\n\t     *\n\t     * `reload()` is just an alias for:\n\t     * <pre>\n\t     * $state.transitionTo($state.current, $stateParams, {\n\t     *   reload: true, inherit: false, notify: true\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n\t     * @example\n\t     * <pre>\n\t     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n\t     * //and current state is 'contacts.detail.item'\n\t     * let app angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.reload = function(){\n\t     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n\t     *     $state.reload('contact.detail');\n\t     *   }\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition. See\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\n\t     */\n\t    StateService.prototype.reload = function (reloadState) {\n\t        return this.transitionTo(this.current, this.params, {\n\t            reload: predicates_1.isDefined(reloadState) ? reloadState : true,\n\t            inherit: false,\n\t            notify: false\n\t        });\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#go\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Convenience method for transitioning to a new state. `$state.go` calls\n\t     * `$state.transitionTo` internally but automatically sets options to\n\t     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n\t     * This allows you to easily use an absolute or relative to path and specify\n\t     * only the parameters you'd like to update (while letting unspecified parameters\n\t     * inherit from the currently active ancestor states).\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.changeState = function () {\n\t     *     $state.go('contact.detail');\n\t     *   };\n\t     * });\n\t     * </pre>\n\t     * <img src='../ngdoc_assets/StateGoExamples.png'/>\n\t     *\n\t     * @param {string} to Absolute state name or relative state path. Some examples:\n\t     *\n\t     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n\t     * - `$state.go('^')` - will go to a parent state\n\t     * - `$state.go('^.sibling')` - will go to a sibling state\n\t     * - `$state.go('.child.grandchild')` - will go to grandchild state\n\t     *\n\t     * @param {object=} params A map of the parameters that will be sent to the state,\n\t     * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n\t     * defined parameters. This allows, for example, going to a sibling state that shares parameters\n\t     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n\t     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n\t     * will get you all current parameters, etc.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition.\n\t     *\n\t     * Possible success values:\n\t     *\n\t     * - $state.current\n\t     *\n\t     * <br/>Possible rejection values:\n\t     *\n\t     * - 'transition superseded' - when a newer transition has been started after this one\n\t     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n\t     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n\t     *   when a `$stateNotFound` `event.retry` promise errors.\n\t     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n\t     * - *resolve error* - when an error has occurred with a `resolve`\n\t     *\n\t     */\n\t    StateService.prototype.go = function (to, params, options) {\n\t        var defautGoOpts = { relative: this.$current, inherit: true };\n\t        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);\n\t        return this.transitionTo(to, params, transOpts);\n\t    };\n\t    ;\n\t    /** Factory method for creating a TargetState */\n\t    StateService.prototype.target = function (identifier, params, options) {\n\t        if (options === void 0) { options = {}; }\n\t        // If we're reloading, find the state object to reload from\n\t        if (predicates_1.isObject(options.reload) && !options.reload.name)\n\t            throw new Error('Invalid reload state object');\n\t        var reg = this.router.stateRegistry;\n\t        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);\n\t        if (options.reload && !options.reloadState)\n\t            throw new Error(\"No such reload state '\" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n\t        var stateDefinition = reg.matcher.find(identifier, options.relative);\n\t        return new targetState_1.TargetState(identifier, stateDefinition, params, options);\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#transitionTo\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n\t     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.changeState = function () {\n\t     *     $state.transitionTo('contact.detail');\n\t     *   };\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string} to State name.\n\t     * @param {object=} toParams A map of the parameters that will be sent to the state,\n\t     * will populate $stateParams.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n\t     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition. See\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\n\t     */\n\t    StateService.prototype.transitionTo = function (to, toParams, options) {\n\t        var _this = this;\n\t        if (toParams === void 0) { toParams = {}; }\n\t        if (options === void 0) { options = {}; }\n\t        var router = this.router;\n\t        var globals = router.globals;\n\t        var transHistory = globals.transitionHistory;\n\t        options = common_1.defaults(options, transitionService_1.defaultTransOpts);\n\t        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });\n\t        var ref = this.target(to, toParams, options);\n\t        var latestSuccess = globals.successfulTransitions.peekTail();\n\t        var rootPath = function () { return [new node_1.PathNode(_this.router.stateRegistry.root())]; };\n\t        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n\t        if (!ref.exists())\n\t            return this._handleInvalidTargetState(currentPath, ref);\n\t        if (!ref.valid())\n\t            return common_1.silentRejection(ref.error());\n\t        /**\n\t         * Special handling for Ignored, Aborted, and Redirected transitions\n\t         *\n\t         * The semantics for the transition.run() promise and the StateService.transitionTo()\n\t         * promise differ. For instance, the run() promise may be rejected because it was\n\t         * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n\t         * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n\t         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n\t         */\n\t        var rejectedTransitionHandler = function (transition) { return function (error) {\n\t            if (error instanceof rejectFactory_1.Rejection) {\n\t                if (error.type === rejectFactory_1.RejectType.IGNORED) {\n\t                    router.urlRouter.update();\n\t                    return globals.current;\n\t                }\n\t                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && error.detail instanceof targetState_1.TargetState) {\n\t                    var redirect = transition.redirect(error.detail);\n\t                    return redirect.run().catch(rejectedTransitionHandler(redirect));\n\t                }\n\t                if (error.type === rejectFactory_1.RejectType.ABORTED) {\n\t                    router.urlRouter.update();\n\t                    return coreservices_1.services.$q.reject(error);\n\t                }\n\t            }\n\t            var errorHandler = _this.defaultErrorHandler();\n\t            errorHandler(error);\n\t            return coreservices_1.services.$q.reject(error);\n\t        }; };\n\t        var transition = this.router.transitionService.create(currentPath, ref);\n\t        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n\t        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\t        // Return a promise for the transition, which also has the transition object on it.\n\t        return common_1.extend(transitionToPromise, { transition: transition });\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#is\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n\t     * but only checks for the full state name. If params is supplied then it will be\n\t     * tested for strict equality against the current active params object, so all params\n\t     * must match with none missing and no extras.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item';\n\t     *\n\t     * // absolute name\n\t     * $state.is('contact.details.item'); // returns true\n\t     * $state.is(contactDetailItemStateObject); // returns true\n\t     *\n\t     * // relative name (. and ^), typically from a template\n\t     * // E.g. from the 'contacts.details' template\n\t     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n\t     * </pre>\n\t     *\n\t     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n\t     * to test against the current active state.\n\t     * @param {object=} options An options object.  The options are:\n\t     *\n\t     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n\t     * test relative to `options.relative` state (or name).\n\t     *\n\t     * @returns {boolean} Returns true if it is the state.\n\t     */\n\t    StateService.prototype.is = function (stateOrName, params, options) {\n\t        options = common_1.defaults(options, { relative: this.$current });\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\t        if (!predicates_1.isDefined(state))\n\t            return undefined;\n\t        if (this.$current !== state)\n\t            return false;\n\t        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#includes\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A method to determine if the current active state is equal to or is the child of the\n\t     * state stateName. If any params are passed then they will be tested for a match as well.\n\t     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n\t     *\n\t     * @example\n\t     * Partial and relative names\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item';\n\t     *\n\t     * // Using partial names\n\t     * $state.includes(\"contacts\"); // returns true\n\t     * $state.includes(\"contacts.details\"); // returns true\n\t     * $state.includes(\"contacts.details.item\"); // returns true\n\t     * $state.includes(\"contacts.list\"); // returns false\n\t     * $state.includes(\"about\"); // returns false\n\t     *\n\t     * // Using relative names (. and ^), typically from a template\n\t     * // E.g. from the 'contacts.details' template\n\t     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n\t     * </pre>\n\t     *\n\t     * Basic globbing patterns\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item.url';\n\t     *\n\t     * $state.includes(\"*.details.*.*\"); // returns true\n\t     * $state.includes(\"*.details.**\"); // returns true\n\t     * $state.includes(\"**.item.**\"); // returns true\n\t     * $state.includes(\"*.details.item.url\"); // returns true\n\t     * $state.includes(\"*.details.*.url\"); // returns true\n\t     * $state.includes(\"*.details.*\"); // returns false\n\t     * $state.includes(\"item.**\"); // returns false\n\t     * </pre>\n\t     *\n\t     * @param {string} stateOrName A partial name, relative name, or glob pattern\n\t     * to be searched for within the current state name.\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n\t     * that you'd like to test against the current active state.\n\t     * @param {object=} options An options object.  The options are:\n\t     *\n\t     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n\t     * .includes will test relative to `options.relative` state (or name).\n\t     *\n\t     * @returns {boolean} Returns true if it does include the state\n\t     */\n\t    StateService.prototype.includes = function (stateOrName, params, options) {\n\t        options = common_1.defaults(options, { relative: this.$current });\n\t        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);\n\t        if (glob) {\n\t            if (!glob.matches(this.$current.name))\n\t                return false;\n\t            stateOrName = this.$current.name;\n\t        }\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\t        if (!predicates_1.isDefined(state))\n\t            return undefined;\n\t        if (!predicates_1.isDefined(include[state.name]))\n\t            return false;\n\t        // @TODO Replace with Param.equals() ?\n\t        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#href\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A url generation method that returns the compiled url for the given state populated with the given params.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n\t     * </pre>\n\t     *\n\t     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n\t     * @param {object=} params An object of parameter values to fill the state's required parameters.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n\t     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n\t     *    ancestor with a valid url).\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n\t     *\n\t     * @returns {string} compiled state url\n\t     */\n\t    StateService.prototype.href = function (stateOrName, params, options) {\n\t        var defaultHrefOpts = {\n\t            lossy: true,\n\t            inherit: true,\n\t            absolute: false,\n\t            relative: this.$current\n\t        };\n\t        options = common_1.defaults(options, defaultHrefOpts);\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\t        if (!predicates_1.isDefined(state))\n\t            return null;\n\t        if (options.inherit)\n\t            params = this.params.$inherit(params || {}, this.$current, state);\n\t        var nav = (state && options.lossy) ? state.navigable : state;\n\t        if (!nav || nav.url === undefined || nav.url === null) {\n\t            return null;\n\t        }\n\t        return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {\n\t            absolute: options.absolute\n\t        });\n\t    };\n\t    ;\n\t    /**\n\t     * Sets or gets the default [[transitionTo]] error handler.\n\t     *\n\t     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n\t     * This includes errors caused by resolves and transition hooks.\n\t     *\n\t     * The built-in default error handler logs the error to the console.\n\t     *\n\t     * You can provide your own custom handler.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * stateService.defaultErrorHandler(function() {\n\t     *   // Do not log transitionTo errors\n\t     * });\n\t     * ```\n\t     *\n\t     * @param handler a global error handler function\n\t     * @returns the current global error handler\n\t     */\n\t    StateService.prototype.defaultErrorHandler = function (handler) {\n\t        return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n\t    };\n\t    StateService.prototype.get = function (stateOrName, base) {\n\t        var reg = this.router.stateRegistry;\n\t        if (arguments.length === 0)\n\t            return reg.get();\n\t        return reg.get(stateOrName, base || this.$current);\n\t    };\n\t    return StateService;\n\t}());\n\texports.StateService = StateService;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module core */ /** */\n\tvar stateParams_1 = __webpack_require__(45);\n\tvar queue_1 = __webpack_require__(8);\n\tvar common_1 = __webpack_require__(3);\n\t/**\n\t * Global mutable state\n\t */\n\tvar Globals = (function () {\n\t    function Globals(transitionService) {\n\t        var _this = this;\n\t        this.params = new stateParams_1.StateParams();\n\t        this.transitionHistory = new queue_1.Queue([], 1);\n\t        this.successfulTransitions = new queue_1.Queue([], 1);\n\t        var beforeNewTransition = function ($transition$) {\n\t            _this.transition = $transition$;\n\t            _this.transitionHistory.enqueue($transition$);\n\t            var updateGlobalState = function () {\n\t                _this.successfulTransitions.enqueue($transition$);\n\t                _this.$current = $transition$.$to();\n\t                _this.current = _this.$current.self;\n\t                common_1.copy($transition$.params(), _this.params);\n\t            };\n\t            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });\n\t            var clearCurrentTransition = function () { if (_this.transition === $transition$)\n\t                _this.transition = null; };\n\t            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n\t        };\n\t        transitionService.onBefore({}, beforeNewTransition);\n\t    }\n\t    return Globals;\n\t}());\n\texports.Globals = Globals;\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar StateParams = (function () {\n\t    function StateParams(params) {\n\t        if (params === void 0) { params = {}; }\n\t        common_1.extend(this, params);\n\t    }\n\t    /**\n\t     * Merges a set of parameters with all parameters inherited between the common parents of the\n\t     * current state and a given destination state.\n\t     *\n\t     * @param {Object} newParams The set of parameters which will be composited with inherited params.\n\t     * @param {Object} $current Internal definition of object representing the current state.\n\t     * @param {Object} $to Internal definition of object representing state to transition to.\n\t     */\n\t    StateParams.prototype.$inherit = function (newParams, $current, $to) {\n\t        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\t        for (var i in parents) {\n\t            if (!parents[i] || !parents[i].params)\n\t                continue;\n\t            parentParams = Object.keys(parents[i].params);\n\t            if (!parentParams.length)\n\t                continue;\n\t            for (var j in parentParams) {\n\t                if (inheritList.indexOf(parentParams[j]) >= 0)\n\t                    continue;\n\t                inheritList.push(parentParams[j]);\n\t                inherited[parentParams[j]] = this[parentParams[j]];\n\t            }\n\t        }\n\t        return common_1.extend({}, inherited, newParams);\n\t    };\n\t    ;\n\t    return StateParams;\n\t}());\n\texports.StateParams = StateParams;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * This module contains code for State Parameters.\n\t *\n\t * See [[ParamDeclaration]]\n\t * @module params\n\t * @preferred doc\n\t */\n\t/** for typedoc */\n\t__export(__webpack_require__(22));\n\t__export(__webpack_require__(25));\n\t__export(__webpack_require__(45));\n\t__export(__webpack_require__(24));\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module path */ /** for typedoc */\n\t__export(__webpack_require__(21));\n\t__export(__webpack_require__(20));\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module resolve */ /** for typedoc */\n\t__export(__webpack_require__(18));\n\t__export(__webpack_require__(19));\n\t__export(__webpack_require__(17));\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module state */ /** for typedoc */\n\t__export(__webpack_require__(30));\n\t__export(__webpack_require__(40));\n\t__export(__webpack_require__(42));\n\t__export(__webpack_require__(39));\n\t__export(__webpack_require__(41));\n\t__export(__webpack_require__(38));\n\t__export(__webpack_require__(43));\n\t__export(__webpack_require__(14));\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * This module contains APIs related to a Transition.\n\t *\n\t * See [[Transition]], [[$transitions]]\n\t *\n\t * @module transition\n\t * @preferred\n\t */\n\t/** for typedoc */\n\t__export(__webpack_require__(16));\n\t__export(__webpack_require__(15));\n\t__export(__webpack_require__(10));\n\t__export(__webpack_require__(11));\n\t__export(__webpack_require__(13));\n\t__export(__webpack_require__(31));\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module url */ /** for typedoc */\n\t__export(__webpack_require__(28));\n\t__export(__webpack_require__(23));\n\t__export(__webpack_require__(27));\n\t__export(__webpack_require__(29));\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module view */ /** for typedoc */\n\t__export(__webpack_require__(37));\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * Naive, pure JS implementation of core ui-router services\n\t *\n\t * @module justjs\n\t */ /** */\n\t__export(__webpack_require__(1));\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar strings_1 = __webpack_require__(9);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar common_1 = __webpack_require__(3);\n\t/** $q-like promise api */\n\tcoreservices_1.services.$q = function (executor) { return new Promise(executor); };\n\tcoreservices_1.services.$q.when = function (val) { return Promise.resolve(val); };\n\tcoreservices_1.services.$q.reject = function (val) { return Promise.reject(val); };\n\tcoreservices_1.services.$q.defer = function () {\n\t    var deferred = {};\n\t    deferred.promise = new Promise(function (resolve, reject) {\n\t        deferred.resolve = resolve;\n\t        deferred.reject = reject;\n\t    });\n\t    return deferred;\n\t};\n\tcoreservices_1.services.$q.all = function (promises) {\n\t    if (predicates_1.isArray(promises)) {\n\t        return Promise.all(promises);\n\t    }\n\t    if (predicates_1.isObject(promises)) {\n\t        // Convert promises map to promises array.\n\t        // When each promise resolves, map it to a tuple { key: key, val: val }\n\t        var objectToTuples = Object.keys(promises)\n\t            .map(function (key) { return promises[key].then(function (val) { return ({ key: key, val: val }); }); });\n\t        var tuplesToObject = function (values) {\n\t            return values.reduce(function (acc, tuple) { acc[tuple.key] = tuple.val; return acc; }, {});\n\t        };\n\t        // Then wait for all promises to resolve, and convert them back to an object\n\t        return coreservices_1.services.$q.all(objectToTuples).then(tuplesToObject);\n\t    }\n\t};\n\t// angular1-like injector api\n\t// globally available injectables\n\tvar globals = {};\n\tcoreservices_1.services.$injector = {};\n\tcoreservices_1.services.$injector.get = function (name) { return globals[name]; };\n\tcoreservices_1.services.$injector.has = function (name) { return coreservices_1.services.$injector.get(name) != null; };\n\tcoreservices_1.services.$injector.invoke = function (fn, context, locals) {\n\t    var all = common_1.extend({}, globals, locals || {});\n\t    var params = coreservices_1.services.$injector.annotate(fn);\n\t    var ensureExist = common_1.assertPredicate(function (key) { return all.hasOwnProperty(key); }, function (key) { return (\"Could not find Dependency Injection token: \" + strings_1.stringify(key)); });\n\t    var args = params.filter(ensureExist).map(function (x) { return all[x]; });\n\t    if (predicates_1.isFunction(fn))\n\t        return fn.apply(context, args);\n\t    return fn.slice(-1)[0].apply(context, args);\n\t};\n\tvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\tvar ARGUMENT_NAMES = /([^\\s,]+)/g;\n\t// http://stackoverflow.com/questions/1007981\n\tcoreservices_1.services.$injector.annotate = function (fn) {\n\t    if (!predicates_1.isInjectable(fn))\n\t        throw new Error(\"Not an injectable function: \" + fn);\n\t    if (fn && fn.$inject)\n\t        return fn.$inject;\n\t    if (predicates_1.isArray(fn))\n\t        return fn.slice(0, -1);\n\t    var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n\t    var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n\t    return result || [];\n\t};\n\tvar loc = coreservices_1.services.location;\n\tloc.hash = function () { return \"\"; };\n\tloc.path = function () { return location.hash.replace(/^#/, \"\"); };\n\tloc.search = function () { return location.search; };\n\tloc.url = function (url) { if (url)\n\t    location.hash = url; return loc.path(); };\n\tloc.replace = function () { console.log(new Error(\"not impl\")); };\n\tloc.onChange = function (cb) {\n\t    window.addEventListener(\"hashchange\", cb, false);\n\t};\n\tvar locCfg = coreservices_1.services.locationConfig;\n\tlocCfg.port = function () { return location.port; };\n\tlocCfg.protocol = function () { return location.protocol; };\n\tlocCfg.host = function () { return location.host; };\n\tlocCfg.baseHref = function () { return \"\"; };\n\tlocCfg.html5Mode = function () { return false; };\n\tlocCfg.hashPrefix = function () { return \"\"; };\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * # UI-Router for Angular 2\n\t *\n\t * For the quick start repository, please see http://github.com/ui-router/quickstart-ng2\n\t *\n\t * Getting started:\n\t *\n\t * - Use npm. Add a dependency on latest `ui-router-ng2`\n\t * - Import UI-Router classes directly from `\"ui-router-ng2\"`\n\t *\n\t * ```js\n\t * import {StateRegistry} from \"ui-router-ng2\";\n\t * ```\n\t *\n\t * - When defining a component, add the [[UIROUTER_DIRECTIVES]] to `directives:` array.\n\t * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n\t * - Create application states (as defined by [[Ng2StateDeclaration]]) which will fill in the viewports.\n\t * - Create a [[UIRouterConfig]], and register your states in the [[UIRouterConfig.configure]] function.\n\t *\n\t * ```js\n\t * import {UIRouter} from \"ui-router-ng2\";\n\t * import {INITIAL_STATES} from \"./app.states\";\n\t * @ Injectable()\n\t * export class MyUIRouterConfig {\n\t *   configure(uiRouter: UIRouter) {\n\t *     INITIAL_STATES.forEach(function(state) {\n\t *       uiRouter.stateRegistry.register(state));\n\t *     });\n\t *   }\n\t * }\n\t * ```\n\t *\n\t * - When bootstrapping: include the [[UIROUTER_PROVIDERS]] and define a provider for your [[UIRouterConfig]]\n\t *\n\t * ```js\n\t * import {provide} from \"@angular/core\";\n\t * import {bootstrap} from 'angular2/platform/browser';\n\t * import {UIRouterConfig, UIView, UIROUTER_PROVIDERS} from \"ui-router-ng2\";\n\t * import {MyUIRouterConfig} from \"./router.config\";\n\t *\n\t * bootstrap(UIView, [\n\t *     ...UIROUTER_PROVIDERS,\n\t *     provide(UIRouterConfig, { useClass: MyUIRouterConfig })\n\t * ]);\n\t * ```\n\t *\n\t * @preferred @module ng2\n\t */ /** */\n\tvar core_1 = __webpack_require__(55);\n\tvar router_1 = __webpack_require__(26);\n\tvar stateRegistry_1 = __webpack_require__(38);\n\tvar stateService_1 = __webpack_require__(43);\n\tvar transitionService_1 = __webpack_require__(31);\n\tvar urlMatcherFactory_1 = __webpack_require__(27);\n\tvar urlRouter_1 = __webpack_require__(29);\n\tvar view_1 = __webpack_require__(37);\n\tvar uiView_1 = __webpack_require__(56);\n\tvar views_1 = __webpack_require__(57);\n\tvar uiRouterConfig_1 = __webpack_require__(58);\n\tvar globals_1 = __webpack_require__(44);\n\tvar location_1 = __webpack_require__(59);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar uiRouterFactory = function (routerConfig, location, injector) {\n\t    coreservices_1.services.$injector.get = injector.get.bind(injector);\n\t    var router = new router_1.UIRouter();\n\t    location.init();\n\t    router.viewService.viewConfigFactory(\"ng2\", function (path, config) { return new views_1.Ng2ViewConfig(path, config); });\n\t    router.stateRegistry.decorator('views', views_1.ng2ViewsBuilder);\n\t    router.stateRegistry.stateQueue.autoFlush(router.stateService);\n\t    setTimeout(function () {\n\t        routerConfig.configure(router);\n\t        if (!router.urlRouterProvider.interceptDeferred) {\n\t            router.urlRouter.listen();\n\t            router.urlRouter.sync();\n\t        }\n\t    });\n\t    return router;\n\t};\n\t/**\n\t * The UI-Router providers, for use in your application bootstrap\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * bootstrap(UIView, [\n\t *     ...UIROUTER_PROVIDERS,\n\t *     ...HTTP_PROVIDERS,\n\t *     provide(UIRouterConfig, { useClass: MyUIRouterConfig })\n\t * ]);\n\t * ```\n\t */\n\texports.UIROUTER_PROVIDERS = [\n\t    { provide: router_1.UIRouter, useFactory: uiRouterFactory, deps: [uiRouterConfig_1.UIRouterConfig, location_1.UIRouterLocation, core_1.Injector] },\n\t    { provide: location_1.UIRouterLocation, useClass: location_1.UIRouterLocation },\n\t    { provide: stateService_1.StateService, useFactory: function (r) { return r.stateService; }, deps: [router_1.UIRouter] },\n\t    { provide: transitionService_1.TransitionService, useFactory: function (r) { return r.transitionService; }, deps: [router_1.UIRouter] },\n\t    { provide: urlMatcherFactory_1.UrlMatcherFactory, useFactory: function (r) { return r.urlMatcherFactory; }, deps: [router_1.UIRouter] },\n\t    { provide: urlRouter_1.UrlRouter, useFactory: function (r) { return r.urlRouter; }, deps: [router_1.UIRouter] },\n\t    { provide: view_1.ViewService, useFactory: function (r) { return r.viewService; }, deps: [router_1.UIRouter] },\n\t    { provide: stateRegistry_1.StateRegistry, useFactory: function (r) { return r.stateRegistry; }, deps: [router_1.UIRouter] },\n\t    { provide: globals_1.Globals, useFactory: function (r) { return r.globals; }, deps: [router_1.UIRouter] },\n\t    { provide: uiView_1.UIView.PARENT_INJECT, useFactory: function (r) { return { fqn: null, context: r.root() }; }, deps: [stateRegistry_1.StateRegistry] }\n\t];\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_55__;\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar __param = (this && this.__param) || function (paramIndex, decorator) {\n\t    return function (target, key) { decorator(target, key, paramIndex); }\n\t};\n\t/** @module ng2_directives */ /** */\n\tvar core_1 = __webpack_require__(55);\n\tvar core_2 = __webpack_require__(55);\n\tvar router_1 = __webpack_require__(26);\n\tvar trace_1 = __webpack_require__(12);\n\tvar core_3 = __webpack_require__(55);\n\tvar views_1 = __webpack_require__(57);\n\tvar resolveContext_1 = __webpack_require__(17);\n\t/** @hidden */\n\tvar id = 0;\n\t/** @hidden */\n\tvar ng2ComponentInputs = function (ng2CompClass) {\n\t    /** Get \"@Input('foo') _foo\" inputs */\n\t    var props = Reflect['getMetadata']('propMetadata', ng2CompClass);\n\t    var _props = Object.keys(props || {})\n\t        .map(function (key) { return ({ key: key, annoArr: props[key] }); })\n\t        .reduce(function (acc, tuple) { return acc.concat(tuple.annoArr.map(function (anno) { return ({ key: tuple.key, anno: anno }); })); }, [])\n\t        .filter(function (tuple) { return tuple.anno instanceof core_1.InputMetadata; })\n\t        .map(function (tuple) { return ({ token: tuple.anno.bindingPropertyName || tuple.key, prop: tuple.key }); });\n\t    /** Get \"inputs: ['foo']\" inputs */\n\t    var inputs = Reflect['getMetadata']('annotations', ng2CompClass)\n\t        .filter(function (x) { return x instanceof core_1.ComponentMetadata && !!x.inputs; })\n\t        .map(function (x) { return x.inputs; })\n\t        .reduce(function (acc, arr) { return acc.concat(arr); }, [])\n\t        .map(function (input) { return ({ token: input, prop: input }); });\n\t    return _props.concat(inputs);\n\t};\n\t/**\n\t * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n\t *\n\t * ### Selector\n\t *\n\t * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n\t *\n\t * ### Purpose\n\t *\n\t * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n\t * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n\t * state has been activated.\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * // This app has two states, 'foo' and 'bar'\n\t * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n\t * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n\t * ```\n\t * ```html\n\t * <!-- This ui-view will be filled in by the foo state's component or\n\t *      the bar state's component when the foo or bar state is activated -->\n\t * <ui-view></ui-view>\n\t * ```\n\t *\n\t * ### Named ui-views\n\t *\n\t * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n\t * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n\t * by a matching named view.\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * stateRegistry.register({\n\t *   name: 'foo',\n\t *   url: '/foo',\n\t *   views: { header: HeaderComponent, $default: FooComponent });\n\t * ```\n\t * ```html\n\t * <!-- When 'foo' state is active, filled by HeaderComponent -->\n\t * <div ui-view=\"header\"></div>\n\t *\n\t * <!-- When 'foo' state is active, filled by FooComponent -->\n\t * <ui-view></ui-view>\n\t * ```\n\t */\n\tvar UIView = (function () {\n\t    function UIView(router, parent, compResolver, viewContainerRef) {\n\t        this.router = router;\n\t        this.parent = parent;\n\t        this.compResolver = compResolver;\n\t        this.viewContainerRef = viewContainerRef;\n\t        this.uiViewData = {};\n\t    }\n\t    Object.defineProperty(UIView.prototype, \"_name\", {\n\t        set: function (val) { this.name = val; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    UIView.prototype.ngOnInit = function () {\n\t        var parentFqn = this.parent.fqn;\n\t        var name = this.name || '$default';\n\t        this.uiViewData = {\n\t            $type: 'ng2',\n\t            id: id++,\n\t            name: name,\n\t            fqn: parentFqn ? parentFqn + \".\" + name : name,\n\t            creationContext: this.parent.context,\n\t            configUpdated: this.viewConfigUpdated.bind(this),\n\t            config: undefined\n\t        };\n\t        this.deregister = this.router.viewService.registerUIView(this.uiViewData);\n\t    };\n\t    UIView.prototype.disposeLast = function () {\n\t        if (this.componentRef)\n\t            this.componentRef.destroy();\n\t        this.componentRef = null;\n\t    };\n\t    UIView.prototype.ngOnDestroy = function () {\n\t        if (this.deregister)\n\t            this.deregister();\n\t        this.disposeLast();\n\t    };\n\t    UIView.prototype.viewConfigUpdated = function (config) {\n\t        var _this = this;\n\t        if (!config)\n\t            return this.disposeLast();\n\t        if (!(config instanceof views_1.Ng2ViewConfig))\n\t            return;\n\t        var uiViewData = this.uiViewData;\n\t        var viewDecl = config.viewDecl;\n\t        // The \"new\" viewconfig is already applied, so exit early\n\t        if (uiViewData.config === config)\n\t            return;\n\t        // This is a new viewconfig.  Destroy the old component\n\t        this.disposeLast();\n\t        trace_1.trace.traceUIViewConfigUpdated(uiViewData, config && config.viewDecl.$context);\n\t        uiViewData.config = config;\n\t        // The config may be undefined if there is nothing state currently targeting this UIView.\n\t        if (!config)\n\t            return;\n\t        // Map resolves to \"useValue providers\"\n\t        var context = new resolveContext_1.ResolveContext(config.path);\n\t        var resolvables = context.getTokens().map(function (token) { return context.getResolvable(token); }).filter(function (r) { return r.resolved; });\n\t        var rawProviders = resolvables.map(function (r) { return ({ provide: r.token, useValue: r.data }); });\n\t        rawProviders.push({ provide: UIView.PARENT_INJECT, useValue: { context: config.viewDecl.$context, fqn: uiViewData.fqn } });\n\t        // Get the component class from the view declaration. TODO: allow promises?\n\t        var componentType = viewDecl.component;\n\t        var createComponent = function (factory) {\n\t            var parentInjector = _this.viewContainerRef.injector;\n\t            var childInjector = core_1.ReflectiveInjector.resolveAndCreate(rawProviders, parentInjector);\n\t            var ref = _this.componentRef = _this.componentTarget.createComponent(factory, undefined, childInjector);\n\t            // TODO: wire uiCanExit and uiOnParamsChanged callbacks\n\t            var bindings = viewDecl['bindings'] || {};\n\t            var addResolvable = function (tuple) { return ({\n\t                prop: tuple.prop,\n\t                resolvable: context.getResolvable(bindings[tuple.prop] || tuple.token)\n\t            }); };\n\t            // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n\t            var inputTuples = ng2ComponentInputs(componentType);\n\t            inputTuples.map(addResolvable)\n\t                .filter(function (tuple) { return tuple.resolvable && tuple.resolvable.resolved; })\n\t                .forEach(function (tuple) { ref.instance[tuple.prop] = tuple.resolvable.data; });\n\t            // Initiate change detection for the newly created component\n\t            ref.changeDetectorRef.detectChanges();\n\t        };\n\t        this.compResolver.resolveComponent(componentType).then(createComponent);\n\t    };\n\t    UIView.PARENT_INJECT = \"UIView.PARENT_INJECT\";\n\t    __decorate([\n\t        core_1.ViewChild('componentTarget', { read: core_1.ViewContainerRef }), \n\t        __metadata('design:type', Object)\n\t    ], UIView.prototype, \"componentTarget\", void 0);\n\t    __decorate([\n\t        core_2.Input('name'), \n\t        __metadata('design:type', String)\n\t    ], UIView.prototype, \"name\", void 0);\n\t    __decorate([\n\t        core_2.Input('ui-view'), \n\t        __metadata('design:type', Object), \n\t        __metadata('design:paramtypes', [Object])\n\t    ], UIView.prototype, \"_name\", null);\n\t    UIView = __decorate([\n\t        core_1.Component({\n\t            selector: 'ui-view, [ui-view]',\n\t            template: \"<template #componentTarget></template>\"\n\t        }),\n\t        __param(1, core_3.Inject(UIView.PARENT_INJECT)), \n\t        __metadata('design:paramtypes', [router_1.UIRouter, Object, core_1.ComponentResolver, core_1.ViewContainerRef])\n\t    ], UIView);\n\t    return UIView;\n\t}());\n\texports.UIView = UIView;\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar view_1 = __webpack_require__(37);\n\t/**\n\t * This is a [[StateBuilder.builder]] function for angular2 `views`.\n\t *\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n\t * handles the `views` property with logic specific to ui-router-ng2.\n\t *\n\t * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n\t * applies the state-level configuration to a view named `$default`.\n\t */\n\tfunction ng2ViewsBuilder(state) {\n\t    var views = {}, viewsObject = state.views || { \"$default\": common_1.pick(state, \"component\") };\n\t    common_1.forEach(viewsObject, function (config, name) {\n\t        name = name || \"$default\"; // Account for views: { \"\": { template... } }\n\t        if (Object.keys(config).length == 0)\n\t            return;\n\t        config.$type = \"ng2\";\n\t        config.$context = state;\n\t        config.$name = name;\n\t        var normalized = view_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);\n\t        config.$uiViewName = normalized.uiViewName;\n\t        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\t        views[name] = config;\n\t    });\n\t    return views;\n\t}\n\texports.ng2ViewsBuilder = ng2ViewsBuilder;\n\tvar id = 0;\n\tvar Ng2ViewConfig = (function () {\n\t    function Ng2ViewConfig(path, viewDecl) {\n\t        this.path = path;\n\t        this.viewDecl = viewDecl;\n\t        this.$id = id++;\n\t        this.loaded = true;\n\t    }\n\t    Ng2ViewConfig.prototype.load = function () {\n\t        return coreservices_1.services.$q.when(this);\n\t    };\n\t    return Ng2ViewConfig;\n\t}());\n\texports.Ng2ViewConfig = Ng2ViewConfig;\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * Provides states configuration to UI-Router during application bootstrap.\n\t *\n\t * An instance of this class should be `provide()`d to the application `bootstrap()`.\n\t *\n\t * @example\n\t * ```js\n\t * import {UIROUTER_PROVIDERS, UIView} from \"ui-router-ng2\";\n\t * import {MyConfig} from \"./app/myConfig\";\n\t *\n\t * bootstrap(UIView, [\n\t *   ...UIROUTER_PROVIDERS,\n\t *   provide(UIRouterConfig, { useClass: MyConfig }\n\t * ]);\n\t * ```\n\t *\n\t * The application's initial states should be registered with the [[UIRouter.stateRegistry]].\n\t * Any global configuration (transition hooks, parameter types, etc) should be done here.\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * // myconfig.ts\n\t * import {STATES} from \"./states\";\n\t * import {registerAuthHook} from \"./hooks\";\n\t * import {registerSlugType} from \"./paramtypes\";\n\t *\n\t * export class MyConfig {\n\t *   configure(uiRouter: UIRouter) {\n\t *     STATES.forEach(state => uiRouter.stateRegistry.register(state));\n\t *     registerAuthHook(uiRouter.transitionService);\n\t *     registerSlugType(uiRouter.urlMatcherFactory);\n\t *   }\n\t * }\n\t *\n\t * // states.ts\n\t * import {FooComponent} from \"./foo.component\";\n\t * import {BarComponent} from \"./bar.component\";\n\t * import BAZ_MODULE_STATES from \"./baz/states\";\n\t *\n\t * export let STATES = [\n\t *   { name: 'foo', url: '/url', component: FooComponent},\n\t *   { name: 'bar', url: '/bar', component: BarComponent}\n\t * ].concat(BAZ_MODULE_STATES);\n\t *\n\t * // hooks.ts\n\t * export function registerAuthHook(transitionService: TransitionService) {\n\t *   let requireAuthentication = (transition: Transition, injector: Injector) {\n\t *     if (!Injector.get(AuthService).isAuthenticated()) {\n\t *       return Injector.get(StateService).target('login');\n\t *     }\n\t *   }\n\t *   transitionService.onBefore({ to: (state) => state.requiresAuth }, requireAuthentication);\n\t * }\n\t *\n\t *\n\t * // paramtypes.ts\n\t * export function registerSlugType(urlMatcherFactory: UrlMatcherFactory) {\n\t *   let builtInStringType = urlMatcherFactory.type('string');\n\t *   let slugType = Object.assign({}, builtInStringType, { encode: (str) => str, decode: (str) => str });\n\t *   urlMatcherFactory.type('slug', slugType);\n\t * }\n\t * ```\n\t *\n\t */\n\tvar UIRouterConfig = (function () {\n\t    function UIRouterConfig() {\n\t    }\n\t    /**\n\t     * Configures UI-Router before bootstrap\n\t     *\n\t     * An app should perform UI-Router configuration here, such as registering the initial set of states,\n\t     * parameter types, defining global hooks, etc.\n\t     *\n\t     * @param uiRouter the uiRouter instance being configured\n\t     */\n\t    UIRouterConfig.prototype.configure = function (uiRouter) {\n\t    };\n\t    return UIRouterConfig;\n\t}());\n\texports.UIRouterConfig = UIRouterConfig;\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/** @module ng2 */ /** */\n\tvar common_1 = __webpack_require__(60);\n\tvar core_1 = __webpack_require__(55);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar common_2 = __webpack_require__(3);\n\tvar strings_1 = __webpack_require__(9);\n\tvar splitOnHash = strings_1.beforeAfterSubstr(\"#\");\n\tvar splitOnEquals = strings_1.beforeAfterSubstr(\"=\");\n\tvar splitOnQuestionMark = strings_1.beforeAfterSubstr(\"?\");\n\tvar UIRouterLocation = (function () {\n\t    function UIRouterLocation(locationStrategy, platformLocation) {\n\t        this.locationStrategy = locationStrategy;\n\t        this.platformLocation = platformLocation;\n\t        this.hashPrefix = \"\";\n\t        this.isHashBang = locationStrategy instanceof common_1.HashLocationStrategy;\n\t    }\n\t    UIRouterLocation.prototype.init = function () {\n\t        var _this = this;\n\t        var loc = coreservices_1.services.location;\n\t        var locSt = this.locationStrategy;\n\t        if (this.isHashBang) {\n\t            loc.path = function () {\n\t                return splitOnHash(splitOnQuestionMark(locSt.path())[0])[0];\n\t            };\n\t            loc.hash = function () {\n\t                return splitOnHash(splitOnHash(_this.platformLocation.hash)[1])[1];\n\t            };\n\t        }\n\t        else {\n\t            var basepath = locSt.getBaseHref();\n\t            var basepathRegExp_1 = new RegExp(\"^\" + basepath);\n\t            var replace_1 = (basepath[basepath.length - 1] === '/') ? \"/\" : \"\";\n\t            loc.path = function () {\n\t                return splitOnHash(splitOnQuestionMark(locSt.path())[0])[0].replace(basepathRegExp_1, replace_1);\n\t            };\n\t            loc.hash = function () {\n\t                return splitOnHash(_this.platformLocation.hash)[1];\n\t            };\n\t        }\n\t        loc.search = function () {\n\t            var queryString = splitOnHash(splitOnQuestionMark(locSt.path())[1])[0];\n\t            return queryString.split(\"&\").map(function (kv) { return splitOnEquals(kv); }).reduce(common_2.applyPairs, {});\n\t        };\n\t        loc.url = function (url) {\n\t            if (predicates_1.isDefined(url)) {\n\t                var split = splitOnQuestionMark(url);\n\t                locSt.pushState(null, null, split[0], split[1]);\n\t            }\n\t            return locSt.path();\n\t        };\n\t        loc.replace = function () {\n\t            console.log(new Error('$location.replace() not impl'));\n\t        };\n\t        loc.onChange = function (cb) { return locSt.onPopState(cb); };\n\t        var locCfg = coreservices_1.services.locationConfig;\n\t        locCfg.port = function () { return null; };\n\t        locCfg.protocol = function () { return null; };\n\t        locCfg.host = function () { return null; };\n\t        locCfg.baseHref = function () { return locSt.getBaseHref(); };\n\t        locCfg.html5Mode = function () { return !_this.isHashBang; };\n\t        locCfg.hashPrefix = function (newprefix) {\n\t            if (predicates_1.isDefined(newprefix)) {\n\t                _this.hashPrefix = newprefix;\n\t            }\n\t            return _this.hashPrefix;\n\t        };\n\t    };\n\t    UIRouterLocation = __decorate([\n\t        core_1.Injectable(), \n\t        __metadata('design:paramtypes', [common_1.LocationStrategy, common_1.PlatformLocation])\n\t    ], UIRouterLocation);\n\t    return UIRouterLocation;\n\t}());\n\texports.UIRouterLocation = UIRouterLocation;\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_60__;\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * The UI-Router Angular 2 directives:\n\t *\n\t * - [[UIView]]: A viewport for routed components\n\t * - [[UISref]]: A state ref to a target state; navigates when clicked\n\t * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\n\t *\n\t * @preferred @module ng2_directives\n\t */ /** */\n\tvar uiSref_1 = __webpack_require__(62);\n\tvar uiSrefActive_1 = __webpack_require__(63);\n\tvar uiView_1 = __webpack_require__(56);\n\tvar uiSrefStatus_1 = __webpack_require__(64);\n\t__export(__webpack_require__(56));\n\t__export(__webpack_require__(62));\n\t__export(__webpack_require__(64));\n\t__export(__webpack_require__(63));\n\t/**\n\t * References to the UI-Router directive classes, for use within a @Component's `directives:` property\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * Component({\n\t *   selector: 'my-cmp',\n\t *   directives: [UIROUTER_DIRECTIVES],\n\t *   template: '<a uiSref=\"foo\">Foo</a>'\n\t * })\n\t * ```\n\t */\n\texports.UIROUTER_DIRECTIVES = [uiSref_1.UISref, uiSref_1.AnchorUISref, uiView_1.UIView, uiSrefActive_1.UISrefActive, uiSrefStatus_1.UISrefStatus];\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar __param = (this && this.__param) || function (paramIndex, decorator) {\n\t    return function (target, key) { decorator(target, key, paramIndex); }\n\t};\n\t/** @module ng2_directives */ /** */\n\tvar router_1 = __webpack_require__(26);\n\tvar core_1 = __webpack_require__(55);\n\tvar core_2 = __webpack_require__(55);\n\tvar core_3 = __webpack_require__(55);\n\tvar core_4 = __webpack_require__(55);\n\tvar uiView_1 = __webpack_require__(56);\n\tvar common_1 = __webpack_require__(3);\n\t/** @hidden */\n\tvar AnchorUISref = (function () {\n\t    function AnchorUISref(_el, _renderer) {\n\t        this._el = _el;\n\t        this._renderer = _renderer;\n\t    }\n\t    AnchorUISref.prototype.update = function (href) {\n\t        this._renderer.setElementProperty(this._el.nativeElement, 'href', href);\n\t    };\n\t    AnchorUISref = __decorate([\n\t        core_1.Directive({ selector: 'a[uiSref]' }), \n\t        __metadata('design:paramtypes', [core_3.ElementRef, core_4.Renderer])\n\t    ], AnchorUISref);\n\t    return AnchorUISref;\n\t}());\n\texports.AnchorUISref = AnchorUISref;\n\t/**\n\t * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n\t *\n\t * ### Purpose\n\t *\n\t * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n\t * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n\t * and optionally supply state parameter values and transition options.\n\t *\n\t * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n\t *\n\t * ### Selector\n\t *\n\t * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n\t *\n\t * ### Inputs\n\t *\n\t * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n\t * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n\t *\n\t * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n\t *\n\t * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n\t *\n\t * @example\n\t * ```html\n\t *\n\t * <!-- Targets bar state' -->\n\t * <a uiSref=\"bar\">Bar</a>\n\t *\n\t * <!-- Assume this component's state is \"foo\".\n\t *      Relatively targets \"foo.child\" -->\n\t * <a uiSref=\".child\">Foo Child</a>\n\t *\n\t * <!-- Targets \"bar\" state and supplies parameter value -->\n\t * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n\t *\n\t * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n\t * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n\t * ```\n\t */\n\tvar UISref = (function () {\n\t    function UISref(_router, parent, _anchorUISref) {\n\t        this._router = _router;\n\t        this.parent = parent;\n\t        this._anchorUISref = _anchorUISref;\n\t    }\n\t    Object.defineProperty(UISref.prototype, \"uiSref\", {\n\t        set: function (val) { this.state = val; this.update(); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(UISref.prototype, \"uiParams\", {\n\t        set: function (val) { this.params = val; this.update(); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(UISref.prototype, \"uiOptions\", {\n\t        set: function (val) { this.options = val; this.update(); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    UISref.prototype.ngOnInit = function () {\n\t        this.update();\n\t    };\n\t    UISref.prototype.update = function () {\n\t        if (this._anchorUISref) {\n\t            this._anchorUISref.update(this._router.stateService.href(this.state, this.params, this.getOptions()));\n\t        }\n\t    };\n\t    UISref.prototype.getOptions = function () {\n\t        var defOpts = { relative: this.parent && this.parent.context && this.parent.context.name, inherit: true };\n\t        return common_1.extend(defOpts, this.options || {});\n\t    };\n\t    UISref.prototype.go = function () {\n\t        this._router.stateService.go(this.state, this.params, this.getOptions());\n\t        return false;\n\t    };\n\t    __decorate([\n\t        core_1.Input('uiSref'), \n\t        __metadata('design:type', String)\n\t    ], UISref.prototype, \"state\", void 0);\n\t    __decorate([\n\t        core_1.Input('uiParams'), \n\t        __metadata('design:type', Object)\n\t    ], UISref.prototype, \"params\", void 0);\n\t    __decorate([\n\t        core_1.Input('uiOptions'), \n\t        __metadata('design:type', Object)\n\t    ], UISref.prototype, \"options\", void 0);\n\t    UISref = __decorate([\n\t        core_1.Directive({\n\t            selector: '[uiSref]',\n\t            host: { '(click)': 'go()' }\n\t        }),\n\t        __param(1, core_1.Inject(uiView_1.UIView.PARENT_INJECT)),\n\t        __param(2, core_2.Optional()), \n\t        __metadata('design:paramtypes', [router_1.UIRouter, Object, AnchorUISref])\n\t    ], UISref);\n\t    return UISref;\n\t}());\n\texports.UISref = UISref;\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar __param = (this && this.__param) || function (paramIndex, decorator) {\n\t    return function (target, key) { decorator(target, key, paramIndex); }\n\t};\n\t/** @module ng2_directives */ /** */\n\tvar core_1 = __webpack_require__(55);\n\tvar uiSrefStatus_1 = __webpack_require__(64);\n\t/**\n\t * A directive that adds a CSS class when a `uiSref` is active.\n\t *\n\t * ### Purpose\n\t *\n\t * This directive should be paired with a [[UISref]], and is used to apply a CSS class to the element when\n\t * the state that the `uiSref` targets is active.\n\t *\n\t * ### Selectors\n\t *\n\t * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n\t * child of the target state is active\n\t * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is directly active\n\t *\n\t * ### Inputs\n\t *\n\t * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when active\n\t *\n\t * @example\n\t * ```html\n\t *\n\t * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n\t * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Foo Bar #{{bar.id}}</a>\n\t * ```\n\t */\n\tvar UISrefActive = (function () {\n\t    function UISrefActive(uiSrefStatus, rnd, host) {\n\t        var _this = this;\n\t        this._classes = [];\n\t        this._classesEq = [];\n\t        uiSrefStatus.uiSrefStatus.subscribe(function (next) {\n\t            _this._classes.forEach(function (cls) { return rnd.setElementClass(host.nativeElement, cls, next.active); });\n\t            _this._classesEq.forEach(function (cls) { return rnd.setElementClass(host.nativeElement, cls, next.exact); });\n\t        });\n\t    }\n\t    Object.defineProperty(UISrefActive.prototype, \"active\", {\n\t        set: function (val) { this._classes = val.split(\"\\s+\"); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    ;\n\t    Object.defineProperty(UISrefActive.prototype, \"activeEq\", {\n\t        set: function (val) { this._classesEq = val.split(\"\\s+\"); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    ;\n\t    __decorate([\n\t        core_1.Input('uiSrefActive'), \n\t        __metadata('design:type', Object), \n\t        __metadata('design:paramtypes', [Object])\n\t    ], UISrefActive.prototype, \"active\", null);\n\t    __decorate([\n\t        core_1.Input('uiSrefActiveEq'), \n\t        __metadata('design:type', Object), \n\t        __metadata('design:paramtypes', [Object])\n\t    ], UISrefActive.prototype, \"activeEq\", null);\n\t    UISrefActive = __decorate([\n\t        core_1.Directive({\n\t            selector: '[uiSrefActive],[uiSrefActiveEq]'\n\t        }),\n\t        __param(2, core_1.Host()), \n\t        __metadata('design:paramtypes', [uiSrefStatus_1.UISrefStatus, core_1.Renderer, core_1.ElementRef])\n\t    ], UISrefActive);\n\t    return UISrefActive;\n\t}());\n\texports.UISrefActive = UISrefActive;\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/** @module ng2_directives */ /** */\n\tvar core_1 = __webpack_require__(55);\n\tvar stateService_1 = __webpack_require__(43);\n\tvar uiSref_1 = __webpack_require__(62);\n\tvar transitionService_1 = __webpack_require__(31);\n\tvar common_1 = __webpack_require__(3);\n\tvar globals_1 = __webpack_require__(44);\n\tvar param_1 = __webpack_require__(22);\n\tvar pathFactory_1 = __webpack_require__(20);\n\t/**\n\t * A directive (which pairs with a [[UISref]]) and emits events when the UISref status changes.\n\t *\n\t * This directive is used by the [[UISrefActive]] directive.\n\t *\n\t * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`\n\t *\n\t * The values from this event can be captured and stored on a component, then applied (perhaps using ngClass).\n\t *\n\t * This API is subject to change.\n\t */\n\tvar UISrefStatus = (function () {\n\t    function UISrefStatus(transitionService, _globals, _stateService, sref) {\n\t        var _this = this;\n\t        this._globals = _globals;\n\t        this._stateService = _stateService;\n\t        this.sref = sref;\n\t        // current statuses of the state/params the uiSref directive is linking to\n\t        this.uiSrefStatus = new core_1.EventEmitter(false);\n\t        this.status = {\n\t            active: false,\n\t            exact: false,\n\t            entering: false,\n\t            exiting: false\n\t        };\n\t        this._deregisterHook = transitionService.onStart({}, function ($transition$) { return _this.processTransition($transition$); });\n\t    }\n\t    UISrefStatus.prototype.ngOnInit = function () {\n\t        var lastTrans = this._globals.transitionHistory.peekTail();\n\t        if (lastTrans != null) {\n\t            this.processTransition(lastTrans);\n\t        }\n\t    };\n\t    UISrefStatus.prototype.ngOnDestroy = function () {\n\t        if (this._deregisterHook) {\n\t            this._deregisterHook();\n\t        }\n\t        this._deregisterHook = null;\n\t    };\n\t    UISrefStatus.prototype._setStatus = function (status) {\n\t        this.status = status;\n\t        this.uiSrefStatus.emit(status);\n\t    };\n\t    UISrefStatus.prototype.processTransition = function ($transition$) {\n\t        var _this = this;\n\t        var sref = this.sref;\n\t        var status = {\n\t            active: false,\n\t            exact: false,\n\t            entering: false,\n\t            exiting: false\n\t        };\n\t        var srefTarget = this._stateService.target(sref.state, sref.params, sref.getOptions());\n\t        if (!srefTarget.exists()) {\n\t            return this._setStatus(status);\n\t        }\n\t        /**\n\t         * Returns a Predicate<PathNode[]> that returns true when the target state (and any param values)\n\t         * match the (tail of) the path, and the path's param values\n\t         */\n\t        var pathMatches = function (target) {\n\t            var state = target.$state();\n\t            var targetParamVals = target.params();\n\t            var targetPath = pathFactory_1.PathFactory.buildPath(target);\n\t            var paramSchema = targetPath.map(function (node) { return node.paramSchema; })\n\t                .reduce(common_1.unnestR, [])\n\t                .filter(function (param) { return targetParamVals.hasOwnProperty(param.id); });\n\t            return function (path) {\n\t                var tailNode = common_1.tail(path);\n\t                if (!tailNode || tailNode.state !== state)\n\t                    return false;\n\t                var paramValues = pathFactory_1.PathFactory.paramValues(path);\n\t                return param_1.Param.equals(paramSchema, paramValues, targetParamVals);\n\t            };\n\t        };\n\t        var isTarget = pathMatches(srefTarget);\n\t        /**\n\t         * Given path: [c, d] appendTo: [a, b]),\n\t         * Expands the path to [c], [c, d]\n\t         * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n\t         */\n\t        function spreadToSubPaths(path, appendTo) {\n\t            if (appendTo === void 0) { appendTo = []; }\n\t            return path.map(function (node) { return appendTo.concat(pathFactory_1.PathFactory.subPath(path, function (n) { return n.state === node.state; })); });\n\t        }\n\t        var tc = $transition$.treeChanges();\n\t        status.active = spreadToSubPaths(tc.from).map(isTarget).reduce(common_1.anyTrueR, false);\n\t        status.exact = isTarget(tc.from);\n\t        status.entering = spreadToSubPaths(tc.entering, tc.retained).map(isTarget).reduce(common_1.anyTrueR, false);\n\t        status.exiting = spreadToSubPaths(tc.exiting, tc.retained).map(isTarget).reduce(common_1.anyTrueR, false);\n\t        if ($transition$.isActive()) {\n\t            this._setStatus(status);\n\t        }\n\t        var update = function (currentPath) { return function () {\n\t            if (_this._deregisterHook == null)\n\t                return; // destroyed\n\t            if (!$transition$.isActive())\n\t                return; // superseded\n\t            status.active = spreadToSubPaths(currentPath).map(isTarget).reduce(common_1.anyTrueR, false);\n\t            status.exact = isTarget(currentPath);\n\t            status.entering = status.exiting = false;\n\t            _this._setStatus(status);\n\t        }; };\n\t        $transition$.promise.then(update(tc.to), update(tc.from));\n\t    };\n\t    __decorate([\n\t        core_1.Output(\"uiSrefStatus\"), \n\t        __metadata('design:type', Object)\n\t    ], UISrefStatus.prototype, \"uiSrefStatus\", void 0);\n\t    UISrefStatus = __decorate([\n\t        core_1.Directive({ selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]' }), \n\t        __metadata('design:paramtypes', [transitionService_1.TransitionService, globals_1.Globals, stateService_1.StateService, uiSref_1.UISref])\n\t    ], UISrefStatus);\n\t    return UISrefStatus;\n\t}());\n\texports.UISrefStatus = UISrefStatus;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ui-router-ng2.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e15a5c3ae1099462e49b\n **/","/**\n * Main entry point for angular 2.x build\n * @module ng2\n */\n/** for typedoc */\n\nexport * from \"./core\";\nimport \"./justjs\";\n\nexport * from \"./ng2/interface\";\nexport * from \"./ng2/providers\";\nexport * from \"./ng2/location\";\nexport * from \"./ng2/directives/directives\";\nexport * from \"./ng2/statebuilders/views\";\nexport * from \"./ng2/uiRouterConfig\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2.ts\n **/","/** @module common */ /** */\n\nexport * from \"./common/module\";\nexport * from \"./params/module\";\nexport * from \"./path/module\";\nexport * from \"./resolve/module\";\nexport * from \"./state/module\";\nexport * from \"./transition/module\";\nexport * from \"./url/module\";\nexport * from \"./view/module\";\nexport * from \"./globals\";\n\nexport { UIRouter } from \"./router\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./core.ts\n **/","/** @module common */ /** for typedoc */\nexport * from \"./common\";\nexport * from \"./coreservices\";\nexport * from \"./glob\";\nexport * from \"./hof\";\nexport * from \"./predicates\";\nexport * from \"./queue\";\nexport * from \"./strings\";\nexport * from \"./trace\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/module.ts\n **/","/**\n * Random utility functions used in the UI-Router code\n *\n * @preferred @module common\n */ /** for typedoc */\n\nimport {isFunction, isString, isArray, isRegExp, isDate} from \"./predicates\";\nimport { all, any, not, prop, curry } from \"./hof\";\nimport {services} from \"./coreservices\";\n\nlet w: any = typeof window === 'undefined' ? {} : window;\nlet angular = w.angular || {};\nexport const fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const copy = angular.copy || _copy;\nexport const forEach = angular.forEach || _forEach;\nexport const extend = angular.extend || _extend;\nexport const equals = angular.equals || _equals;\nexport const identity = (x) => x;\nexport const noop = () => undefined;\n\nexport type Mapper<X, T> = (x: X, key?: (string|number)) => T;\nexport interface TypedMap<T> { [key: string]: T; }\nexport type Predicate<X> = (X) => boolean;\nexport type IInjectable = (Function|any[]);\n\nexport var abstractKey = 'abstract';\n\n/**\n * Binds and copies functions onto an object\n *\n * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n * on the 'to' object.\n *\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * @example\n * ```\n *\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * This example creates a bound version of a service function, and copies it to another object\n * @example\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param from The object which contains the functions to be bound\n * @param to The object which will receive the bound functions\n * @param bindTo The object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n */\nexport function bindFunctions(from, to, bindTo, fnNames: string[] = Object.keys(from)) {\n  return fnNames.filter(name => typeof from[name] === 'function')\n      .forEach(name => to[name] = from[name].bind(bindTo));\n}\n\n\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent, extra) =>\n    extend(new (extend(function() {}, { prototype: parent }))(), extra);\n\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n */\nconst restArgs = (args, idx = 0) => Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexport const inArray = (array: any[], obj: any) => array.indexOf(obj) !== -1;\n\n/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\nexport const removeFrom = curry((array: any[], obj) => {\n  let idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n});\n\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts = {}, ...defaultsList) {\n  let defaults = merge.apply(null, [{}].concat(defaultsList));\n  return extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n}\n\n/**\n * Merges properties from the list of objects to the destination object.\n * If a property already exists in the destination object, then it is not overwritten.\n */\nexport function merge(dst, ...objs: Object[]) {\n  forEach(objs, function(obj) {\n    forEach(obj, function(value, key) {\n      if (!dst.hasOwnProperty(key)) dst[key] = value;\n    });\n  });\n  return dst;\n}\n\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport const mergeR = (memo, item) => extend(memo, item);\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first, second) {\n  let path = [];\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nexport function equalForKeys(a, b, keys: string[] = Object.keys(a)) {\n  for (var i = 0; i < keys.length; i++) {\n    let k = keys[i];\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n  }\n  return true;\n}\n\ntype PickOmitPredicate = (keys: string[], key) => boolean;\nfunction pickOmitImpl(predicate: PickOmitPredicate, obj) {\n  let objCopy = {}, keys = restArgs(arguments, 2);\n  for (var key in obj) {\n    if (predicate(keys, key)) objCopy[key] = obj[key];\n  }\n  return objCopy;\n}\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj, propNames: string[]): Object;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, 'a', 'b'); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the whitelisted property names\n */\nexport function pick(obj, ...propNames: string[]): Object;\n/** Return a copy of the object only containing the whitelisted properties. */\nexport function pick(obj) { return pickOmitImpl.apply(null, [inArray].concat(restArgs(arguments))); }\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj, propNames: string[]): Object;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, 'a', 'b'); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the blacklisted property names\n */\nexport function omit(obj, ...propNames: string[]): Object;\n/** Return a copy of the object omitting the blacklisted properties. */\nexport function omit(obj) { return pickOmitImpl.apply(null, [not(inArray)].concat(restArgs(arguments))); }\n\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck(collection: any[], propName: string): any[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection, propName): any {\n  return map(collection, <Mapper<any, string>> prop(propName));\n}\n\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (T, key?) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (T, key?) => boolean): TypedMap<T>;\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter<T>(collection: T, callback: Function): T {\n  let arr = isArray(collection), result: any = arr ? [] : {};\n  let accept = arr ? x => result.push(x) : (x, key) => result[key] = x;\n  forEach(collection, function(item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return <T>result;\n}\n\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection, callback) {\n  let result;\n\n  forEach(collection, function(item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport let mapObj: <T,U>(collection: { [key: string]: T }, callback: Mapper<T,U>) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>): U[];\nexport function map<T, U>(collection: { [key: string]: T }, callback: Mapper<T, U>): { [key: string]: U }\n/** Maps an array or object properties using a callback function */\nexport function map(collection: any, callback: any): any {\n  let result = isArray(collection) ? [] : {};\n  forEach(collection, (item, i) => result[i] = callback(item, i));\n  return result;\n}\n\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: (<T> (obj: TypedMap<T>) => T[]) = (obj) => Object.keys(obj).map(key => obj[key]);\n\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR  = (memo: boolean, elem) => memo && elem;\n\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR  = (memo: boolean, elem) => memo || elem;\n\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR   = (memo: any[], elem) => memo.concat(elem);\n\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR  = (memo: any[], elem) => isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n/** Reduce function that pushes an object to an array, then returns the array.  Mostly just for [[flattenR]] */\nexport function pushR(arr: any[], obj) { arr.push(obj); return arr; }\n\n/** Reduce function that filters out duplicates */\nexport const uniqR = (acc, token) => inArray(acc, token) ? acc : pushR(acc, token);\n\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest    = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten   = (arr: any[]) => arr.reduce(flattenR, []);\n\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport function assertPredicate<T>(predicate: Predicate<T>, errMsg: (string|Function) = \"assert failure\"): Predicate<T> {\n  return (obj: T) => {\n    if (!predicate(obj)) {\n      throw new Error(isFunction(errMsg) ? (<Function> errMsg)(obj) : errMsg);\n    }\n    return true;\n  };\n}\n\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (object) => Object.keys(object).map(key => [ key, object[key]] );\n\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples(...arrayArgs: any[]): any[] {\n  if (arrayArgs.length === 0) return [];\n  let length = arrayArgs.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n  return Array.apply(null, Array(length)).map((ignored, idx) => arrayArgs.map(arr => arr[idx]));\n}\n\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let key, value;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error(\"invalid parameters to applyPairs\");\n  memo[key] = value;\n  return memo;\n}\n\n/** Get the last element of an array */\nexport function tail<T>(arr: T[]): T {\n  return arr.length && arr[arr.length - 1] || undefined;\n}\n\n/**\n * shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n */\nfunction _copy(src, dest) {\n  if (dest) Object.keys(dest).forEach(key => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n\nfunction _forEach(obj: (any[]|any), cb, _this) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(key => cb(obj[key], key));\n}\n\nfunction _copyProps(to, from) { Object.keys(from).forEach(key => to[key] = from[key]); return to; }\nfunction _extend(toObj, fromObj);\nfunction _extend(toObj, ...fromObj);\nfunction _extend(toObj, rest) {\n  return restArgs(arguments, 1).filter(identity).reduce(_copyProps, toObj);\n}\n\nfunction _equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  let predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  let key, keys = {};\n  for (key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1, a2) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n\n// issue #2676\nexport const silenceUncaughtInPromise = (promise: Promise<any>) =>\n    promise.catch(e => 0) && promise;\nexport const silentRejection = (error: any) =>\n    silenceUncaughtInPromise(services.$q.reject(error));\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/common.ts\n **/","/** Predicates @module common_predicates */ /** */\nimport {and, not, pipe, prop} from \"./hof\";\n\nconst toStr = Object.prototype.toString;\nconst tis = (t) => (x) => typeof(x) === t;\nexport const isUndefined = tis('undefined');\nexport const isDefined = not(isUndefined);\nexport const isNull = o => o === null;\nexport const isFunction: (x) => x is Function = <any> tis('function');\nexport const isNumber: (x) => x is number = <any> tis('number');\nexport const isString = <(x) => x is string> tis('string');\nexport const isObject = (x) => x !== null && typeof x === 'object';\nexport const isArray = Array.isArray;\nexport const isDate: (x) => x is Date = <any> ((x) => toStr.call(x) === '[object Date]');\nexport const isRegExp: (x) => x is RegExp = <any> ((x) => toStr.call(x) === '[object RegExp]');\n\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val) {\n  if (isArray(val) && val.length) {\n    let head = val.slice(0, -1), tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = and(isObject, pipe(prop('then'), isFunction));\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/predicates.ts\n **/","/**\n * Higher order functions\n *\n * @module common_hof\n */ /** */\n\nimport {Predicate} from \"./common\";\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn: Function): Function {\n  let initial_args = [].slice.apply(arguments, [1]);\n  let func_args_length = fn.length;\n\n  function curried(args) {\n    if (args.length >= func_args_length)\n      return fn.apply(null, args);\n    return function () {\n      return curried(args.concat([].slice.apply(arguments)));\n    };\n  }\n  return curried(initial_args);\n}\n\n\n\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n  let args = arguments;\n  let start = args.length - 1;\n  return function() {\n    let i = start, result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) => (obj: any) => obj && obj[name];\n\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, val: any, obj: any) => obj && obj[name] === val);\n\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) => pipe.apply(null, name.split(\".\").map(prop));\n\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not = (fn) => (...args) => !fn.apply(null, args);\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1, fn2): Predicate<any> {\n  return (...args) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1, fn2): Predicate<any> {\n  return (...args) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1) => (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true);\nexport const any = (fn1) => (arr: any[]) => arr.reduce((b, x) => b || !!fn1(x), false);\nexport const none: Function = not(any);\n\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport const is: (ctor) => (x) => boolean =\n    ctor => obj => (obj != null && obj.constructor === ctor || obj instanceof ctor);\n\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport const eq: (comp) => (x) => boolean =\n    (val) => (other) => val === other;\n\n/** Given a value, returns a function which returns the value */\nexport const val = <T> (v: T) => () => v;\n\n\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\nexport function invoke(fnName: string, args?): Function {\n  return (obj: any) => obj[fnName].apply(obj, args);\n}\n\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function(x) {\n    for (var i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/hof.ts\n **/","/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @module common\n */\n\n/** for typedoc */\n//import {IQService} from \"angular\";\n//import {IInjectorService} from \"angular\";\n\nlet notImplemented = (fnname) => () => {\n  throw new Error(`${fnname}(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']`);\n};\n\nlet services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n  location: <any> {},\n  locationConfig: <any> {},\n  template: <any> {}\n};\n\n[\"replace\", \"url\", \"path\", \"search\", \"hash\", \"onChange\"]\n    .forEach(key => services.location[key] = notImplemented(key));\n\n[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\" ]\n    .forEach(key => services.locationConfig[key] = notImplemented(key));\n\nexport interface CoreServices {\n  $q; // : IQService;\n  $injector; // : IInjectorService;\n  /** Services related to getting or setting the browser location (url) */\n  location: LocationServices;\n  /** Retrieves configuration for how to construct a URL. */\n  locationConfig: LocationConfig;\n  template: TemplateServices;\n}\n\nexport interface LocationServices {\n  replace(): void;\n  url(newurl: string): string;\n  url(): string;\n  path(): string;\n  search(): string;\n  hash(): string;\n  onChange(callback: Function): Function;\n}\n\nexport interface LocationConfig {\n  port(): number;\n  protocol(): string;\n  host(): string;\n\n  baseHref(): string;\n  html5Mode(): boolean;\n  hashPrefix(): string;\n  hashPrefix(newprefix: string): string;\n}\n\nexport interface TemplateServices {\n  get(url: string): string;\n}\n\n\nexport {services};\n\n\n/** WEBPACK FOOTER **\n ** ./common/coreservices.ts\n **/","/** @module common */ \n/** \n * Matches state names using glob-like patterns.\n * \n * See: [[StateService.includes]]\n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n  }\n\n  matches(name: string) {\n    let segments = name.split('.');\n\n    // match single stars\n    for (let i = 0, l = this.glob.length; i < l; i++) {\n      if (this.glob[i] === '*') segments[i] = '*';\n    }\n\n    // match greedy starts\n    if (this.glob[0] === '**') {\n       segments = segments.slice(segments.indexOf(this.glob[1]));\n       segments.unshift('**');\n    }\n    // match greedy ends\n    if (this.glob[this.glob.length - 1] === '**') {\n       segments.splice(segments.indexOf(this.glob[this.glob.length - 2]) + 1, Number.MAX_VALUE);\n       segments.push('**');\n    }\n    if (this.glob.length != segments.length) return false;\n\n    return segments.join('') === this.glob.join('');\n  }\n\n  static is(text: string) {\n    return text.indexOf('*') > -1;\n  }\n\n  static fromString(text: string) {\n    if (!this.is(text)) return null;\n    return new Glob(text);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/glob.ts\n **/","/** @module common */ /** for typedoc */\n\nexport class Queue<T> {\n  constructor(private _items: T[] = [], private _limit: number = null) { }\n\n  enqueue(item: T) {\n    let items = this._items;\n    items.push(item);\n    if (this._limit && items.length > this._limit) items.shift();\n    return item;\n  }\n\n  dequeue(): T {\n    if (this.size())\n      return this._items.splice(0, 1)[0];\n  }\n\n  clear(): Array<T> {\n    let current = this._items;\n    this._items = [];\n    return current;\n  }\n\n  size(): number {\n    return this._items.length;\n  }\n\n  remove(item: T) {\n    let idx = this._items.indexOf(item);\n    return idx > -1 && this._items.splice(idx, 1)[0];\n  }\n\n  peekTail(): T {\n    return this._items[this._items.length - 1];\n  }\n\n  peekHead(): T {\n    if (this.size())\n      return this._items[0];\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/queue.ts\n **/","/** @module common_strings */ /** */\n\nimport {isString, isArray, isDefined, isNull, isPromise, isInjectable, isObject} from \"./predicates\";\nimport {Rejection} from \"../transition/rejectFactory\";\nimport {IInjectable, identity} from \"./common\";\nimport {pattern, is, not, val, invoke} from \"./hof\";\nimport {Transition} from \"../transition/transition\";\nimport {Resolvable} from \"../resolve/resolvable\";\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + \"...\";\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += \" \";\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n      .replace(/^([A-Z])/, $1 => $1.toLowerCase()) // replace first char\n      .replace(/([A-Z])/g, $1 => \"-\" + $1.toLowerCase()); // replace rest\n}\n\nfunction _toJson(obj: Object) {\n  return JSON.stringify(obj);\n}\n\nfunction _fromJson(json: string) {\n  return isString(json) ? JSON.parse(json) : json;\n}\n\n\nfunction promiseToString(p: Promise<any>) {\n  return `Promise(${JSON.stringify(p)})`;\n}\n\nexport function functionToString(fn: Function) {\n  let fnStr = fnToString(fn);\n  let namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  return namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  let _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return _fn && _fn.toString() || \"undefined\";\n}\n\nlet stringifyPatternFn = null;\nlet stringifyPattern = function(value) {\n  let isTransitionRejectionPromise = Rejection.isTransitionRejectionPromise;\n\n  stringifyPatternFn = stringifyPatternFn || pattern([\n    [not(isDefined),                  val(\"undefined\")],\n    [isNull,                          val(\"null\")],\n    [isPromise,                       val(\"[Promise]\")],\n    [isTransitionRejectionPromise,    (x: any) => x._transitionRejection.toString()],\n    [is(Rejection),                   invoke(\"toString\")],\n    [is(Transition),                  invoke(\"toString\")],\n    [is(Resolvable),                  invoke(\"toString\")],\n    [isInjectable,                    functionToString],\n    [val(true),                       identity]\n  ]);\n\n  return stringifyPatternFn(value);\n};\n\nexport function stringify(o: Object) {\n  var seen: any[] = [];\n\n  function format(val: any) {\n    if (isObject(val)) {\n      if (seen.indexOf(val) !== -1) return '[circular ref]';\n      seen.push(val);\n    }\n    return stringifyPattern(val);\n  }\n\n  return JSON.stringify(o, (key, val) => format(val)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr = (char: string) => (str: string) => {\n  if (!str) return [\"\", \"\"];\n  let idx = str.indexOf(char);\n  if (idx === -1) return [str, \"\"];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\n\n/** WEBPACK FOOTER **\n ** ./common/strings.ts\n **/","/** @module transition */ /** for typedoc */\n\"use strict\";\nimport {extend, silentRejection} from \"../common/common\";\nimport {stringify} from \"../common/strings\";\n\nexport enum RejectType {\n  SUPERSEDED = 2, ABORTED = 3, INVALID = 4, IGNORED = 5, ERROR = 6\n}\n\nexport class Rejection {\n  type: number;\n  message: string;\n  detail: string;\n  redirected: boolean;\n\n  constructor(type, message?, detail?) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n\n  toString() {\n    const detailString = d => d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    let type = this.type, message = this.message, detail = detailString(this.detail);\n    return `TransitionRejection(type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n\n  toPromise() {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n  static isTransitionRejectionPromise(obj) {\n    return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\n  }\n\n  /** Returns a TransitionRejection due to transition superseded */\n  static superseded(detail?: any, options?: any) {\n    let message = \"The transition has been superseded by a different transition (see detail).\";\n    let rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n\n  /** Returns a TransitionRejection due to redirected transition */\n  static redirected(detail?: any) {\n    return Rejection.superseded(detail, {redirected: true});\n  }\n\n  /** Returns a TransitionRejection due to invalid transition */\n  static invalid(detail?: any) {\n    let message = \"This transition is invalid (see detail)\";\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to ignored transition */\n  static ignored(detail?: any) {\n    let message = \"The transition was ignored.\";\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to aborted transition */\n  static aborted(detail?: any) {\n    // TODO think about how to encapsulate an Error() object\n    let message = \"The transition has been aborted.\";\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to aborted transition */\n  static errored(detail?: any) {\n    // TODO think about how to encapsulate an Error() object\n    let message = \"The transition errored.\";\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/rejectFactory.ts\n **/","/** @module transition */ /** for typedoc */\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\nimport {\n    map, find, extend, mergeR,  tail,\n    omit, toJson, abstractKey, arrayTuples, unnestR, identity, anyTrueR\n} from \"../common/common\";\nimport { isObject, isArray } from \"../common/predicates\";\nimport { prop, propEq, val, not } from \"../common/hof\";\n\nimport {StateDeclaration, StateOrName} from \"../state/interface\";\nimport {\n    TransitionOptions, TransitionHookOptions, TreeChanges, IHookRegistry, IHookGetter,\n    HookMatchCriteria, TransitionHookFn, TransitionStateHookFn, HookRegOptions\n} from \"./interface\";\n\nimport {TransitionHook} from \"./transitionHook\";\nimport {HookRegistry, matchState} from \"./hookRegistry\";\nimport {HookBuilder} from \"./hookBuilder\";\nimport {PathNode} from \"../path/node\";\nimport {PathFactory} from \"../path/pathFactory\";\nimport {State} from \"../state/stateObject\";\nimport {TargetState} from \"../state/targetState\";\nimport {Param} from \"../params/param\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {ViewConfig} from \"../view/interface\";\nimport {Rejection} from \"./rejectFactory\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {UIRouter} from \"../router\";\nimport {Globals} from \"../globals\";\nimport {UIInjector} from \"../common/interface\";\n\n\nlet transitionCount = 0;\nconst stateSelf: (_state: State) => StateDeclaration = prop(\"self\");\n\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nexport class Transition implements IHookRegistry {\n  static diToken = Transition;\n  \n  $id: number;\n  success: boolean;\n\n  /**\n   * A reference to the [[UIRouter]] instance\n   *\n   * This reference can be used to access the router services, such as the [[StateService]]\n   */\n  router: UIRouter;\n\n  /** @hidden */\n  private _deferred = services.$q.defer();\n  /**\n   * This promise is resolved or rejected based on the outcome of the Transition.\n   *\n   * When the transition is successful, the promise is resolved\n   * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n   */\n  promise: Promise<any> = this._deferred.promise;\n\n  private _options: TransitionOptions;\n  private _treeChanges: TreeChanges;\n\n  /** @inheritdoc */\n  onBefore (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onStart (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onExit (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onRetain (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onEnter (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onFinish (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onSuccess (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onError (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n\n  getHooks:   IHookGetter;\n\n  /**\n   * Creates a new Transition object.\n   *\n   * If the target state is not valid, an error is thrown.\n   *\n   * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n   *        encapsulates the \"from state\".\n   * @param targetState The target state and parameters being transitioned to (also, the transition options)\n   * @param router The [[UIRouter]] instance\n   */\n  constructor(fromPath: PathNode[], targetState: TargetState, router: UIRouter) {\n    this.router = router;\n    if (!targetState.valid()) {\n      throw new Error(targetState.error());\n    }\n\n    // Makes the Transition instance a hook registry (onStart, etc)\n    HookRegistry.mixin(new HookRegistry(), this);\n\n    // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n    this._options = extend({ current: val(this) }, targetState.options());\n    this.$id = transitionCount++;\n    let toPath = PathFactory.buildToPath(fromPath, targetState);\n    this._treeChanges = PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n    let enteringStates = this._treeChanges.entering.map(node => node.state);\n    PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n\n    let rootResolvables: Resolvable[] = [\n      new Resolvable(UIRouter, () => router, [], undefined, router),\n      new Resolvable(Transition, () => this, [], undefined, this),\n      new Resolvable('$transition$', () => this, [], undefined, this),\n      new Resolvable('$stateParams', () => this.params(), [], undefined, this.params())\n    ];\n\n    let rootNode: PathNode = this._treeChanges.to[0];\n    let context = new ResolveContext(this._treeChanges.to);\n    context.addResolvables(rootResolvables, rootNode.state);\n  }\n\n  $from() {\n    return tail(this._treeChanges.from).state;\n  }\n\n  $to() {\n    return tail(this._treeChanges.to).state;\n  }\n\n  /**\n   * Returns the \"from state\"\n   *\n   * @returns The state object for the Transition's \"from state\".\n   */\n  from(): StateDeclaration {\n    return this.$from().self;\n  }\n\n  /**\n   * Returns the \"to state\"\n   *\n   * @returns The state object for the Transition's target state (\"to state\").\n   */\n  to() {\n    return this.$to().self;\n  }\n\n  /**\n   * Determines whether two transitions are equivalent.\n   */\n  is(compare: (Transition|{to: any, from: any})): boolean {\n    if (compare instanceof Transition) {\n      // TODO: Also compare parameters\n      return this.is({ to: compare.$to().name, from: compare.$from().name });\n    }\n    return !(\n      (compare.to && !matchState(this.$to(), compare.to)) ||\n      (compare.from && !matchState(this.$from(), compare.from))\n    );\n  }\n\n  /**\n   * Gets transition parameter values\n   *\n   * @param pathname Pick which treeChanges path to get parameters for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @returns transition parameter values for the desired path.\n   */\n  params(pathname: string = \"to\"): { [key: string]: any } {\n    return this._treeChanges[pathname].map(prop(\"paramValues\")).reduce(mergeR, {});\n  }\n\n\n  /**\n   * Creates a [[UIInjector]] Dependency Injector\n   *\n   * Returns a Dependency Injector for the Transition's target state (to state).\n   * The injector provides resolve values which the target state has access to.\n   *\n   * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n   *\n   * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n   *\n   * @param state Limits the resolves provided to only the resolves the provided state has access to.\n   * @returns a [[UIInjector]]\n   */\n  injector(state?: StateOrName): UIInjector {\n    let path: PathNode[] = this.treeChanges().to;\n    if (state) path = PathFactory.subPath(path, node => node.state === state || node.state.name === state);\n    return new ResolveContext(path).injector();\n  }\n\n  /**\n   * Gets all available resolve tokens (keys)\n   *\n   * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\n   * available to the Transition.\n   *\n   * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\n   * in the Transition's [[TreeChanges.to]] path.\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveTokens(): any[] {\n    return new ResolveContext(this._treeChanges.to).getTokens();\n  }\n\n\n  /**\n   * Gets resolved values\n   *\n   * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\n   * are available to the Transition.\n   *\n   * Given a token, returns the resolved data for that token.\n   * Given an array of tokens, returns an array of resolved data for those tokens.\n   *\n   * If a resolvable hasn't yet been fetched, returns `undefined` for that token\n   * If a resolvable doesn't exist for the token, throws an error.\n   *\n   * @param token the token (or array of tokens)\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveValue(token: (any|any[])): (any|any[]) {\n    let resolveContext = new ResolveContext(this._treeChanges.to);\n    const getData = token => {\n      var resolvable = resolveContext.getResolvable(token);\n      if (resolvable === undefined) {\n        throw new Error(\"Dependency Injection token not found: ${stringify(token)}\");\n      }\n      return resolvable.data;\n    };\n\n    if (isArray(token)) {\n      return token.map(getData);\n    }\n\n    return getData(token);\n  }\n\n  /**\n   * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\n   *\n   * @param resolvable an [[Resolvable]] object\n   * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n   */\n  addResolvable(resolvable: Resolvable, state: StateOrName = \"\"): void {\n    let stateName: string = (typeof state === \"string\") ? state : state.name;\n    let topath = this._treeChanges.to;\n    let targetNode = find(topath, node => node.state.name === stateName);\n    let resolveContext: ResolveContext = new ResolveContext(topath);\n    resolveContext.addResolvables([resolvable], targetNode.state);\n  }\n\n  /**\n   * Gets the previous transition, from which this transition was redirected.\n   *\n   * @returns The previous Transition, or null if this Transition is not the result of a redirection\n   */\n  previous(): Transition {\n    return this._options.previous || null;\n  }\n\n  /**\n   * Get the transition options\n   *\n   * @returns the options for this Transition.\n   */\n  options(): TransitionOptions {\n    return this._options;\n  }\n\n  /**\n   * Gets the states being entered.\n   *\n   * @returns an array of states that will be entered during this transition.\n   */\n  entering(): StateDeclaration[] {\n    return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Gets the states being exited.\n   *\n   * @returns an array of states that will be exited during this transition.\n   */\n  exiting(): StateDeclaration[] {\n    return map(this._treeChanges.exiting, prop('state')).map(stateSelf).reverse();\n  }\n\n  /**\n   * Gets the states being retained.\n   *\n   * @returns an array of states that are already entered from a previous Transition, that will not be\n   *    exited during this Transition\n   */\n  retained(): StateDeclaration[] {\n    return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Get the [[ViewConfig]]s associated with this Transition\n   *\n   * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n   * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n   *\n   * @param pathname the name of the path to fetch views for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n   *\n   * @returns a list of ViewConfig objects for the given path.\n   */\n  views(pathname: string = \"entering\", state?: State): ViewConfig[] {\n    let path = this._treeChanges[pathname];\n    path = !state ? path : path.filter(propEq('state', state));\n    return path.map(prop(\"views\")).filter(identity).reduce(unnestR, []);\n  }\n\n  treeChanges = () => this._treeChanges;\n\n  /**\n   * Creates a new transition that is a redirection of the current one.\n   *\n   * This transition can be returned from a [[TransitionService]] hook to\n   * redirect a transition to a new state and/or set of parameters.\n   *\n   * @returns Returns a new [[Transition]] instance.\n   */\n  redirect(targetState: TargetState): Transition {\n    let newOptions = extend({}, this.options(), targetState.options(), { previous: this });\n    targetState = new TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\n    let newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n    let originalEnteringNodes = this.treeChanges().entering;\n    let redirectEnteringNodes = newTransition.treeChanges().entering;\n\n    // --- Re-use resolve data from original transition ---\n    // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n    // (because of the redirect), the resolves fetched by the original transition are still valid in the\n    // redirected transition.\n    //\n    // This allows you to define a redirect on a parent state which depends on an async resolve value.\n    // You can wait for the resolve, then redirect to a child state based on the result.\n    // The redirected transition does not have to re-fetch the resolve.\n    // ---------------------------------------------------------\n\n    const nodeIsReloading = (reloadState: State) => (node: PathNode) => {\n      return reloadState && node.state.includes[reloadState.name];\n    };\n\n    // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n    let matchingEnteringNodes: PathNode[] = PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\n        .filter(not(nodeIsReloading(targetState.options().reloadState)));\n\n    // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n    matchingEnteringNodes.forEach((node, idx) => {\n      node.resolvables = originalEnteringNodes[idx].resolvables;\n    });\n\n    return newTransition;\n  }\n\n  /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n  private _changedParams(): Param[] {\n    let {to, from} = this._treeChanges;\n    if (this._options.reload || tail(to).state !== tail(from).state) return undefined;\n\n    let nodeSchemas: Param[][] = to.map((node: PathNode) => node.paramSchema);\n    let [toValues, fromValues] = [to, from].map(path => path.map(x => x.paramValues));\n    let tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n\n    return tuples.map(([schema, toVals, fromVals]) => Param.changed(schema, toVals, fromVals)).reduce(unnestR, []);\n  }\n\n  /**\n   * Returns true if the transition is dynamic.\n   *\n   * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n   *\n   * @returns true if the Transition is dynamic\n   */\n  dynamic(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.map(x => x.dynamic).reduce(anyTrueR, false);\n  }\n\n  /**\n   * Returns true if the transition is ignored.\n   *\n   * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n   *\n   * @returns true if the Transition is ignored.\n   */\n  ignored(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.length === 0;\n  }\n\n  /**\n   * @hidden\n   */\n  hookBuilder(): HookBuilder {\n    return new HookBuilder(this.router.transitionService, this, <TransitionHookOptions> {\n      transition: this,\n      current: this._options.current\n    });\n  }\n\n  /**\n   * Runs the transition\n   *\n   * This method is generally called from the [[StateService.transitionTo]]\n   *\n   * @returns a promise for a successful transition.\n   */\n  run (): Promise<any> {\n    let runSynchronousHooks = TransitionHook.runSynchronousHooks;\n    let hookBuilder = this.hookBuilder();\n    let globals = <Globals> this.router.globals;\n    globals.transitionHistory.enqueue(this);\n\n    let syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n\n    if (Rejection.isTransitionRejectionPromise(syncResult)) {\n      syncResult.catch(() => 0); // issue #2676\n      let rejectReason = (<any> syncResult)._transitionRejection;\n      this._deferred.reject(rejectReason);\n      return this.promise;\n    }\n\n    if (!this.valid()) {\n      let error = new Error(this.error());\n      this._deferred.reject(error);\n      return this.promise;\n    }\n\n    if (this.ignored()) {\n      trace.traceTransitionIgnored(this);\n      this._deferred.reject(Rejection.ignored());\n      return this.promise;\n    }\n\n    // When the chain is complete, then resolve or reject the deferred\n    const transitionSuccess = () => {\n      trace.traceSuccess(this.$to(), this);\n      this.success = true;\n      this._deferred.resolve(this.to());\n      runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\n    };\n\n    const transitionError = (error) => {\n      trace.traceError(error, this);\n      this.success = false;\n      this._deferred.reject(error);\n      runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\n    };\n\n    trace.traceTransitionStart(this);\n\n    // Chain the next hook off the previous\n    const appendHookToChain = (prev, nextHook) =>\n        prev.then(() => nextHook.invokeHook());\n\n    // Run the hooks, then resolve or reject the overall deferred in the .then() handler\n    hookBuilder.asyncHooks()\n        .reduce(appendHookToChain, syncResult)\n        .then(transitionSuccess, transitionError);\n\n    return this.promise;\n  }\n\n  isActive = () => this === this._options.current();\n\n  /**\n   * Checks if the Transition is valid\n   *\n   * @returns true if the Transition is valid\n   */\n  valid() {\n    return !this.error();\n  }\n\n  /**\n   * The reason the Transition is invalid\n   *\n   * @returns an error message explaining why the transition is invalid\n   */\n  error() {\n    let state = this.$to();\n\n    if (state.self[abstractKey])\n      return `Cannot transition to abstract state '${state.name}'`;\n    if (!Param.validates(state.parameters(), this.params()))\n      return `Param values not valid for state '${state.name}'`;\n  }\n\n  /**\n   * A string representation of the Transition\n   *\n   * @returns A string representation of the Transition\n   */\n  toString () {\n    let fromStateOrName = this.from();\n    let toStateOrName = this.to();\n\n    const avoidEmptyHash = (params) =>\n      (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : omit(params, \"#\");\n\n    // (X) means the to state is invalid.\n    let id = this.$id,\n        from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n        fromParams = toJson(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))),\n        toValid = this.valid() ? \"\" : \"(X) \",\n        to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n        toParams = toJson(avoidEmptyHash(this.params()));\n\n    return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transition.ts\n **/","/**\n * UI-Router Transition Tracing\n *\n * Enable transition tracing to print transition information to the console, in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n *\n * ES6\n * ```\n *\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * CJS\n * ```\n *\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * Globals\n * ```\n *\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * @module trace\n */ /** for typedoc */\nimport {parse} from \"../common/hof\";\nimport {isNumber} from \"../common/predicates\";\nimport {Transition}  from \"../transition/transition\";\nimport {ActiveUIView, ViewConfig}  from \"../view/interface\";\nimport {stringify, functionToString, maxLength, padString} from \"./strings\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {PathNode} from \"../path/node\";\nimport {PolicyWhen} from \"../resolve/interface\";\n\n/** @hidden */\nfunction uiViewString (viewData) {\n    if (!viewData) return 'ui-view (defunct)';\n    return `[ui-view#${viewData.id} tag ` +\n        `in template from '${viewData.creationContext && viewData.creationContext.name || '(root)'}' state]: ` +\n        `fqn: '${viewData.fqn}', ` +\n        `name: '${viewData.name}@${viewData.creationContext}')`;\n}\n\n/** @hidden */\nconst viewConfigString = (viewConfig: ViewConfig) =>\n    `[ViewConfig#${viewConfig.$id} from '${viewConfig.viewDecl.$context.name || '(root)'}' state]: target ui-view: '${viewConfig.viewDecl.$uiViewName}@${viewConfig.viewDecl.$uiViewContextAnchor}'`;\n\n/** @hidden */\nfunction normalizedCat(input: Category): string {\n  return isNumber(input) ? Category[input] : Category[Category[input]];\n}\n\n\n/**\n * Trace categories\n *\n * [[Trace.enable]] or [[Trace.disable]] a category\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nexport enum Category {\n  RESOLVE, TRANSITION, HOOK, INVOKE, UIVIEW, VIEWCONFIG\n}\n\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nexport class Trace {\n  approximateDigests: number;\n\n  constructor() {\n    this.approximateDigests = 0;\n  }\n\n  /** @hidden */\n  private _enabled: { [key: string]: boolean } = {};\n\n   /** @hidden */\n  private _set(enabled: boolean, categories: Category[]) {\n    if (!categories.length) {\n      categories = Object.keys(Category)\n          .filter(k => isNaN(parseInt(k, 10)))\n          .map(key => Category[key]);\n    }\n    categories.map(normalizedCat).forEach(category => this._enabled[category] = enabled);\n  }\n\n  /**\n   * Enables a trace [[Category]]\n   *\n   * ```\n   * trace.enable(\"TRANSITION\");\n   * ```\n   *\n   * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  enable(...categories: Category[]) { this._set(true, categories) }\n  /**\n   * Disables a trace [[Category]]\n   *\n   * ```\n   * trace.disable(\"VIEWCONFIG\");\n   * ```\n   *\n   * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  disable(...categories: Category[]) { this._set(false, categories) }\n\n  /**\n   * Retrieves the enabled stateus of a [[Category]]\n   *\n   * ```\n   * trace.enabled(\"VIEWCONFIG\"); // true or false\n   * ```\n   *\n   * @returns boolean true if the category is enabled\n   */\n  enabled(category: Category): boolean {\n    return !!this._enabled[normalizedCat(category)];\n  }\n\n  /** called by ui-router code */\n  traceTransitionStart(transition: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = transition.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(transition);\n    console.log(`Transition #${tid} Digest #${digest}: Started  -> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceTransitionIgnored(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: Ignored  <> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceHookInvocation(step, options) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = functionToString(step.fn);\n    console.log(`Transition #${tid} Digest #${digest}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`);\n  }\n\n  /** called by ui-router code */\n  traceHookResult(hookResult, transitionResult, transitionOptions) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(transitionOptions),\n        digest = this.approximateDigests,\n        hookResultStr = stringify(hookResult),\n        transitionResultStr = stringify(transitionResult);\n    console.log(`Transition #${tid} Digest #${digest}:   <- Hook returned: ${maxLength(200, hookResultStr)}, transition result: ${maxLength(200, transitionResultStr)}`);\n  }\n\n  /** called by ui-router code */\n  traceResolvePath(path: PathNode[], when: PolicyWhen, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        pathStr = path && path.toString();\n    console.log(`Transition #${tid} Digest #${digest}:         Resolving ${pathStr} (${when})`);\n  }\n\n  /** called by ui-router code */\n  traceResolvableResolved(resolvable: Resolvable, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        resolvableStr = resolvable && resolvable.toString(),\n        result = stringify(resolvable.data);\n    console.log(`Transition #${tid} Digest #${digest}:               <- Resolved  ${resolvableStr} to: ${maxLength(200, result)}`);\n  }\n\n  /** called by ui-router code */\n  traceError(error, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: <- Rejected ${transitionStr}, reason: ${error}`);\n  }\n\n  /** called by ui-router code */\n  traceSuccess(finalState, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        state = finalState.name,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: <- Success  ${transitionStr}, final state: ${state}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewEvent(event: string, viewData: ActiveUIView, extra = \"\") {\n    if (!this.enabled(Category.UIVIEW)) return;\n    console.log(`ui-view: ${padString(30, event)} ${uiViewString(viewData)}${extra}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewConfigUpdated(viewData: ActiveUIView, context) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Updating\", viewData, ` with ViewConfig from context='${context}'`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewScopeCreated(viewData: ActiveUIView, newScope) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Created scope for\", viewData, `, scope #${newScope.$id}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewFill(viewData: ActiveUIView, html) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Fill\", viewData, ` with: ${maxLength(200, html)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceEvent(event: string, viewConfig: ViewConfig) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${viewConfigString(viewConfig)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceUIViewEvent(event: string, viewData: ActiveUIView) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${uiViewString(viewData)}`);\n  }\n}\n\n/**\n * The [[Trace]] singleton\n *\n * @example\n * ```js\n *\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nlet trace = new Trace();\nexport {trace};\n\n\n/** WEBPACK FOOTER **\n ** ./common/trace.ts\n **/","/** @module transition */ /** for typedoc */\nimport {TransitionHookOptions, TransitionStateHookFn, HookFn, TransitionHookFn} from \"./interface\";\nimport {defaults, noop, Predicate} from \"../common/common\";\nimport {fnToString, maxLength} from \"../common/strings\";\nimport {isDefined, isPromise } from \"../common/predicates\";\nimport {pattern, val, eq, is, parse } from \"../common/hof\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\n\nimport {Rejection} from \"./rejectFactory\";\nimport {TargetState} from \"../state/targetState\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {Transition} from \"./transition\";\nimport {State} from \"../state/stateObject\";\n\nlet defaultOptions: TransitionHookOptions = {\n  async: true,\n  rejectIfSuperseded: true,\n  current: noop,\n  transition: null,\n  traceData: {},\n  bind: null\n};\n\n/** @hidden */\nexport class TransitionHook {\n  constructor(private transition: Transition,\n              private stateContext: State,\n              private hookFn: HookFn,\n              private resolveContext: ResolveContext,\n              private options: TransitionHookOptions) {\n    this.options = defaults(options, defaultOptions);\n  }\n\n  private isSuperseded = () => this.options.current() !== this.options.transition;\n\n  invokeHook(): Promise<any> {\n    let { options, hookFn, resolveContext } = this;\n    trace.traceHookInvocation(this, options);\n    if (options.rejectIfSuperseded && this.isSuperseded()) {\n      return Rejection.superseded(options.current()).toPromise();\n    }\n\n    let hookResult = hookFn.call(options.bind, this.transition, this.stateContext);\n    return this.handleHookResult(hookResult);\n  }\n\n  /**\n   * This method handles the return value of a Transition Hook.\n   *\n   * A hook can return false, a redirect (TargetState), or a promise (which may resolve to false or a redirect)\n   */\n  handleHookResult(hookResult): Promise<any> {\n    if (!isDefined(hookResult)) return undefined;\n\n    /**\n     * Handles transition superseded, transition aborted and transition redirect.\n     */\n    const mapHookResult = pattern([\n      // Transition is no longer current\n      [this.isSuperseded, () => Rejection.superseded(this.options.current()).toPromise()],\n      // If the hook returns false, abort the current Transition\n      [eq(false),         () => Rejection.aborted(\"Hook aborted transition\").toPromise()],\n      // If the hook returns a Transition, halt the current Transition and redirect to that Transition.\n      [is(TargetState),   (target) => Rejection.redirected(target).toPromise()],\n      // A promise was returned, wait for the promise and then chain another hookHandler\n      [isPromise,         (promise) => promise.then(this.handleHookResult.bind(this))]\n    ]);\n\n    let transitionResult = mapHookResult(hookResult);\n    if (transitionResult) trace.traceHookResult(hookResult, transitionResult, this.options);\n\n    return transitionResult;\n  }\n\n  toString() {\n    let { options, hookFn } = this;\n    let event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = fnToString(hookFn);\n    return `${event} context: ${context}, ${maxLength(200, name)}`;\n  }\n\n\n  /**\n   * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n   *\n   * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n   */\n  static runSynchronousHooks(hooks: TransitionHook[], swallowExceptions: boolean = false): Promise<any> {\n    let results = [];\n    for (let i = 0; i < hooks.length; i++) {\n      try {\n        results.push(hooks[i].invokeHook());\n      } catch (exception) {\n        if (!swallowExceptions) {\n          return Rejection.errored(exception).toPromise();\n        }\n\n        console.error(\"Swallowed exception during synchronous hook handler: \" + exception); // TODO: What to do here?\n      }\n    }\n\n    let rejections = results.filter(Rejection.isTransitionRejectionPromise);\n    if (rejections.length) return rejections[0];\n\n    return results\n        .filter(<Predicate<any>> isPromise)\n        .reduce((chain, promise) => chain.then(val(promise)), services.$q.when());\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionHook.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, StateOrName} from \"./interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {TransitionOptions} from \"../transition/interface\";\n\nimport {State} from \"./stateObject\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:TargetState\n *\n * @description\n * Encapsulate the desired target of a transition.\n * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n *\n * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n *            used to define the state.\n * @param {IState} _definition The `State` object definition.\n * @param {ParamsOrArray} _params Parameters for the target state\n * @param {TransitionOptions} _options Transition options.\n */\nexport class TargetState {\n  private _params: ParamsOrArray;\n\n  constructor(\n    private _identifier: StateOrName,\n    private _definition?: State,\n    _params: ParamsOrArray = {},\n    private _options: TransitionOptions = {}\n  ) {\n    this._params = _params || {};\n  }\n\n  name() {\n    return this._definition && this._definition.name || this._identifier;\n  }\n\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  params(): ParamsOrArray {\n    return this._params;\n  }\n\n  $state(): State {\n    return this._definition;\n  }\n\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  options() {\n    return this._options;\n  }\n\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  valid(): boolean {\n    return !this.error();\n  }\n\n  error(): string {\n    let base = <any> this.options().relative;\n    if (!this._definition && !!base) {\n      let stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition)\n      return `No such state '${this.name()}'`;\n    if (!this._definition.self)\n      return `State '${this.name()}' has an invalid definition`;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/targetState.ts\n **/","/** @module transition */ /** for typedoc */\nimport {extend, removeFrom, allTrueR, tail} from \"../common/common\";\nimport {isString, isFunction} from \"../common/predicates\";\nimport {PathNode} from \"../path/node\";\nimport {TransitionStateHookFn, TransitionHookFn} from \"./interface\";\n\nimport {\n    HookRegOptions, HookMatchCriteria, IEventHook, IHookRegistry, IHookRegistration, TreeChanges,\n    HookMatchCriterion, IMatchingNodes, HookFn\n} from \"./interface\";\nimport {Glob} from \"../common/glob\";\nimport {State} from \"../state/stateObject\";\n\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nexport function matchState(state: State, criterion: HookMatchCriterion) {\n  let toMatch = isString(criterion) ? [criterion] : criterion;\n\n  function matchGlobs(_state) {\n    let globStrings = <string[]> toMatch;\n    for (let i = 0; i < globStrings.length; i++) {\n      let glob = Glob.fromString(globStrings[i]);\n\n      if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  let matchFn = <any> (isFunction(toMatch) ? toMatch : matchGlobs);\n  return !!matchFn(state);\n}\n\n/** @hidden */\nexport class EventHook implements IEventHook {\n  callback: HookFn;\n  matchCriteria: HookMatchCriteria;\n  priority: number;\n  bind: any;\n\n  constructor(matchCriteria: HookMatchCriteria, callback: HookFn, options: HookRegOptions = <any>{}) {\n    this.callback = callback;\n    this.matchCriteria = extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n    this.priority = options.priority || 0;\n    this.bind = options.bind || null;\n  }\n\n  private static _matchingNodes(nodes: PathNode[], criterion: HookMatchCriterion): PathNode[] {\n    if (criterion === true) return nodes;\n    let matching = nodes.filter(node => matchState(node.state, criterion));\n    return matching.length ? matching : null;\n  }\n\n  /**\n   * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n   *\n   * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n   * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n   */\n  matches(treeChanges: TreeChanges): IMatchingNodes {\n    let mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n\n    let matches = {\n      to: _matchingNodes([tail(treeChanges.to)], mc.to),\n      from: _matchingNodes([tail(treeChanges.from)], mc.from),\n      exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n      retained: _matchingNodes(treeChanges.retained, mc.retained),\n      entering: _matchingNodes(treeChanges.entering, mc.entering),\n    };\n\n    // Check if all the criteria matched the TreeChanges object\n    let allMatched: boolean = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n        .map(prop => matches[prop])\n        .reduce(allTrueR, true);\n\n    return allMatched ? matches : null;\n  }\n}\n\n/** @hidden */\ninterface ITransitionEvents { [key: string]: IEventHook[]; }\n\n/** @hidden Return a registration function of the requested type. */\nfunction makeHookRegistrationFn(hooks: ITransitionEvents, name: string): IHookRegistration {\n  return function (matchObject, callback, options = {}) {\n    let eventHook = new EventHook(matchObject, callback, options);\n    hooks[name].push(eventHook);\n\n    return function deregisterEventHook() {\n      removeFrom(hooks[name])(eventHook);\n    };\n  };\n}\n\n/**\n * Mixin class acts as a Transition Hook registry.\n *\n * Holds the registered [[HookFn]] objects.\n * Exposes functions to register new hooks.\n *\n * This is a Mixin class which can be applied to other objects.\n *\n * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\n *\n * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\n * Global hooks are added to the [[TransitionService]].\n * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\n * (note: the hook criteria still must match the Transition).\n */\nexport class HookRegistry implements IHookRegistry {\n  static mixin(source: HookRegistry, target: IHookRegistry) {\n    Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(key => target[key] = source[key]);\n  }\n\n  private _transitionEvents: ITransitionEvents = {\n    onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n  };\n\n  getHooks = (name: string) => this._transitionEvents[name];\n\n  /** @inheritdoc */\n  onBefore  = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n  /** @inheritdoc */\n  onStart   = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n  /** @inheritdoc */\n  onEnter   = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n  /** @inheritdoc */\n  onRetain  = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n  /** @inheritdoc */\n  onExit    = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n  /** @inheritdoc */\n  onFinish  = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n  /** @inheritdoc */\n  onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n  /** @inheritdoc */\n  onError   = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookRegistry.ts\n **/","/** @module transition */ /** for typedoc */\n\nimport {extend, tail, assertPredicate, unnestR, identity} from \"../common/common\";\nimport {isArray} from \"../common/predicates\";\n\nimport {TransitionOptions, TransitionHookOptions, IHookRegistry, TreeChanges, IEventHook, IMatchingNodes} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {TransitionHook} from \"./transitionHook\";\nimport {State} from \"../state/stateObject\";\nimport {PathNode} from \"../path/node\";\nimport {TransitionService} from \"./transitionService\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\n\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nexport class HookBuilder {\n\n  treeChanges: TreeChanges;\n  transitionOptions: TransitionOptions;\n\n  toState: State;\n  fromState: State;\n\n  constructor(private $transitions: TransitionService, private transition: Transition, private baseHookOptions: TransitionHookOptions) {\n    this.treeChanges        = transition.treeChanges();\n    this.toState            = tail(this.treeChanges.to).state;\n    this.fromState          = tail(this.treeChanges.from).state;\n    this.transitionOptions  = transition.options();\n  }\n\n  getOnBeforeHooks  = () => this._buildNodeHooks(\"onBefore\",  \"to\",       tupleSort(), { async: false });\n  getOnStartHooks   = () => this._buildNodeHooks(\"onStart\",   \"to\",       tupleSort());\n  getOnExitHooks    = () => this._buildNodeHooks(\"onExit\",    \"exiting\",  tupleSort(true),  { stateHook: true });\n  getOnRetainHooks  = () => this._buildNodeHooks(\"onRetain\",  \"retained\", tupleSort(false), { stateHook: true });\n  getOnEnterHooks   = () => this._buildNodeHooks(\"onEnter\",   \"entering\", tupleSort(false), { stateHook: true });\n  getOnFinishHooks  = () => this._buildNodeHooks(\"onFinish\",  \"to\",       tupleSort());\n  getOnSuccessHooks = () => this._buildNodeHooks(\"onSuccess\", \"to\",       tupleSort(), { async: false, rejectIfSuperseded: false });\n  getOnErrorHooks   = () => this._buildNodeHooks(\"onError\",   \"to\",       tupleSort(), { async: false, rejectIfSuperseded: false });\n\n  asyncHooks() {\n    let onStartHooks    = this.getOnStartHooks();\n    let onExitHooks     = this.getOnExitHooks();\n    let onRetainHooks   = this.getOnRetainHooks();\n    let onEnterHooks    = this.getOnEnterHooks();\n    let onFinishHooks   = this.getOnFinishHooks();\n\n    let asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n    return asyncHooks.reduce(unnestR, []).filter(identity);\n  }\n\n  /**\n   * Returns an array of newly built TransitionHook objects.\n   *\n   * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n   * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n   * - For each of the [[PathNode]]s, creates a TransitionHook\n   *\n   * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n   * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\n   * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\n   * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n   * @param options any specific Transition Hook Options\n   */\n  private _buildNodeHooks(hookType: string,\n                          matchingNodesProp: string,\n                          sortHooksFn: (l: HookTuple, r: HookTuple) => number,\n                          options?: TransitionHookOptions): TransitionHook[] {\n\n    // Find all the matching registered hooks for a given hook type\n    let matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n    if (!matchingHooks) return [];\n\n     const makeTransitionHooks = (hook: IEventHook) => {\n       // Fetch the Nodes that caused this hook to match.\n       let matches: IMatchingNodes = hook.matches(this.treeChanges);\n       // Select the PathNode[] that will be used as TransitionHook context objects\n       let matchingNodes: PathNode[] = matches[matchingNodesProp];\n\n       // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\n       // Everything else gets the \"to path\"\n       let resolvePath = matchingNodesProp === 'exiting' ? this.treeChanges.from : this.treeChanges.to;\n       let resolveContext = new ResolveContext(resolvePath);\n\n       // Return an array of HookTuples\n       return matchingNodes.map(node => {\n         let _options = extend({ bind: hook.bind, traceData: { hookType, context: node} }, this.baseHookOptions, options);\n         let state = _options.stateHook ? node.state : null;\n         let context = resolveContext.subContext(node.state);\n         let transitionHook = new TransitionHook(this.transition, state, hook.callback, context, _options);\n         return <HookTuple> { hook, node, transitionHook };\n       });\n    };\n\n    return matchingHooks.map(makeTransitionHooks)\n        .reduce(unnestR, [])\n        .sort(sortHooksFn)\n        .map(tuple => tuple.transitionHook);\n  }\n\n  /**\n   * Finds all IEventHooks from:\n   * - The Transition object instance hook registry\n   * - The TransitionService ($transitions) global hook registry\n   *\n   * which matched:\n   * - the eventType\n   * - the matchCriteria (to, from, exiting, retained, entering)\n   *\n   * @returns an array of matched [[IEventHook]]s\n   */\n  private _matchingHooks(hookName: string, treeChanges: TreeChanges): IEventHook[] {\n    return [ this.transition, this.$transitions ]                             // Instance and Global hook registries\n        .map((reg: IHookRegistry) => reg.getHooks(hookName))                  // Get named hooks from registries\n        .filter(assertPredicate(isArray, `broken event named: ${hookName}`))  // Sanity check\n        .reduce(unnestR, [])                                                  // Un-nest IEventHook[][] to IEventHook[] array\n        .filter(hook => hook.matches(treeChanges));                           // Only those satisfying matchCriteria\n  }\n}\n\ninterface HookTuple { hook: IEventHook, node: PathNode, transitionHook: TransitionHook }\n\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort = false) {\n  return function nodeDepthThenPriority(l: HookTuple, r: HookTuple): number {\n    let factor = reverseDepthSort ? -1 : 1;\n    let depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n    return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookBuilder.ts\n **/","/** @module resolve */ /** for typedoc */\nimport { find, tail, uniqR, unnestR, inArray } from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\nimport {resolvePolicies, PolicyWhen} from \"./interface\";\n\nimport {PathNode} from \"../path/node\";\nimport {Resolvable} from \"./resolvable\";\nimport {State} from \"../state/stateObject\";\nimport {PathFactory} from \"../path/pathFactory\";\nimport {stringify} from \"../common/strings\";\nimport {Transition} from \"../transition/transition\";\nimport {UIInjector} from \"../common/interface\";\n\nvar when = resolvePolicies.when;\nconst ALL_WHENS = [when.EAGER, when.LAZY];\nconst EAGER_WHENS = [when.EAGER];\n\n/**\n * Encapsulates Depenency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nexport class ResolveContext {\n\n  constructor(private _path: PathNode[]) { }\n\n  /** Gets all the tokens found in the resolve context, de-duplicated */\n  getTokens() {\n    return this._path.reduce((acc, node) => acc.concat(node.resolvables.map(r => r.token)), []).reduce(uniqR, []);\n  }\n\n  /**\n   * Gets the Resolvable that matches the token\n   *\n   * Gets the last Resolvable that matches the token in this context, or undefined.\n   * Throws an error if it doesn't exist in the ResolveContext\n   */\n  getResolvable(token): Resolvable {\n    var matching = this._path.map(node => node.resolvables)\n        .reduce(unnestR, [])\n        .filter((r: Resolvable) => r.token === token);\n    return tail(matching);\n  }\n\n  /**\n   * Returns a ResolveContext that includes a portion of this one\n   *\n   * Given a state, this method creates a new ResolveContext from this one.\n   * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n   *\n   * #### Why\n   *\n   * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n   * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n   * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n   * This method is used to create a narrower context when injecting ancestor nodes.\n   *\n   * @example\n   * `let ABCD = new ResolveContext([A, B, C, D]);`\n   *\n   * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n   * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n   * However, `B` should only be able to access resolvables from `A`, `B`.\n   *\n   * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n   * `let AB = ABCD.subcontext(a)`\n   */\n  subContext(state: State): ResolveContext {\n    return new ResolveContext(PathFactory.subPath(this._path, node => node.state === state));\n  }\n\n  /**\n   * Adds Resolvables to the node that matches the state\n   *\n   * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n   * The resolvable is added to the node matching the `state` parameter.\n   *\n   * These new resolvables are not automatically fetched.\n   * The calling code should either fetch them, fetch something that depends on them,\n   * or rely on [[resolvePath]] being called when some state is being entered.\n   *\n   * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n   *\n   * @param newResolvables the new Resolvables\n   * @param state Used to find the node to put the resolvable on\n   */\n  addResolvables(newResolvables: Resolvable[], state: State) {\n    var node = <PathNode> find(this._path, propEq('state', state));\n    var keys = newResolvables.map(r => r.token);\n    node.resolvables = node.resolvables.filter(r => keys.indexOf(r.token) === -1).concat(newResolvables);\n  }\n  \n  /**\n   * Returns a promise for an array of resolved path Element promises\n   *\n   * @param when\n   * @param trans\n   * @returns {Promise<any>|any}\n   */\n  resolvePath(when: PolicyWhen = \"LAZY\", trans?: Transition): Promise<{ token: any, value: any }[]> {\n    // This option determines which 'when' policy Resolvables we are about to fetch.\n    let whenOption: string = inArray(ALL_WHENS, when) ? when : \"LAZY\";\n    // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n    // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n    let matchedWhens = whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n    \n    // get the subpath to the state argument, if provided\n    trace.traceResolvePath(this._path, when, trans);\n\n    let promises: Promise<any>[] = this._path.reduce((acc, node) => {\n      const matchesRequestedPolicy = (resolvable: Resolvable) =>\n          inArray(matchedWhens, resolvable.getPolicy(node.state).when);\n      let nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\n      let subContext = this.subContext(node.state);\n\n      // For the matching Resolvables, start their async fetch process.\n      var getResult = (r: Resolvable) => r.get(subContext, trans)\n          // Return a tuple that includes the Resolvable's token\n          .then(value => ({ token: r.token, value: value }));\n      return acc.concat(nodeResolvables.map(getResult));\n    }, []);\n\n    return services.$q.all(promises);\n  }\n\n  injector(): UIInjector {\n    return new UIInjectorImpl(this);\n  }\n\n  findNode(resolvable: Resolvable): PathNode {\n    return find(this._path, (node: PathNode) => inArray(node.resolvables, resolvable));\n  }\n\n  /**\n   * Gets the async dependencies of a Resolvable\n   *\n   * Given a Resolvable, returns its dependencies as a Resolvable[]\n   */\n  getDependencies(resolvable: Resolvable): Resolvable[] {\n    let node = this.findNode(resolvable);\n    // Find which other resolvables are \"visible\" to the `resolvable` argument\n    // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n    var subPath: PathNode[] = PathFactory.subPath(this._path, x => x === node) || this._path;\n    var availableResolvables: Resolvable[] = subPath\n        .reduce((acc, node) => acc.concat(node.resolvables), []) //all of subpath's resolvables\n        .filter(res => res !== resolvable); // filter out the `resolvable` argument\n\n    const getDependency = token => {\n      let matching = availableResolvables.filter(r => r.token === token);\n      if (matching.length) return tail(matching);\n\n      let fromInjector = services.$injector.get(token);\n      if (!fromInjector) {\n        throw new Error(\"Could not find Dependency Injection token: \" + stringify(token));\n      }\n\n      return new Resolvable(token, () => fromInjector, [], fromInjector);\n    };\n\n    return resolvable.deps.map(getDependency);\n  }\n}\n\nclass UIInjectorImpl implements UIInjector {\n  constructor(public context: ResolveContext) { }\n  get(token: any) {\n    var resolvable = this.context.getResolvable(token);\n    if (resolvable) {\n      if (!resolvable.resolved) {\n        throw new Error(\"Resolvable async .get() not complete:\" + stringify(resolvable.token))\n      }\n      return resolvable.data;\n    }\n    return services.$injector.get(token);\n  }\n\n  getAsync(token: any) {\n    var resolvable = this.context.getResolvable(token);\n    if (resolvable) return resolvable.get(this.context);\n    return services.$q.when(services.$injector.get(token));\n  }\n  \n  /** The native injector ($injector on ng1, Root Injector on ng2, justjs injector for everything else) */\n  native = services.$injector;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolveContext.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {Resolvable} from \"./resolvable\";\n\nexport interface Resolvables {\n  [key: string]: Resolvable;\n}\n\n/**\n * A plain object used to describe a [[Resolvable]]\n *\n * These objects may be defined in [[StateDefinition.resolve]] blocks to declare\n * async data that the state or substates require.\n */\nexport interface ResolvableLiteral {\n  /** The Dependency Injection token that will be used to inject/access the resolvable */\n  token: any;\n\n  /**\n   * The function that returns one of:\n   *\n   * - The resolved value (synchronously)\n   * - A promise for the resolved value\n   * - An Observable of the resolved value(s)\n   *\n   * This function will be provided the dependencies listed in [[deps]] as its arguments.\n   * The resolve system will asynchronously fetch the dependencies before invoking this function.\n   */\n  resolveFn: Function;\n\n  /** A policy that defines when to invoke the resolve, and whether to wait for async and unwrap the data */\n  policy?: ResolvePolicy;\n\n  /**\n   * The Dependency Injection tokens for dependencies of the [[resolveFn]].\n   * The DI tokens are references to other `Resolvables`, or to global services.\n   */\n  deps?: any[];\n\n  /** Pre-resolved value. */\n  data?: any\n}\n\n/**\n * Defines how a resolve is processed during a transition\n *\n * @example\n * ```js\n *\n * // Fetched when the resolve's state is being entered.\n * // Wait for the promise to resolve.\n * var policy1 = { when: \"LAZY\", async: \"WAIT\" }\n *\n * // Fetched when the Transition is starting.\n * // Do not wait for the returned promise to resolve.\n * // Inject the raw promise/value\n * var policy2 = { when: \"EAGER\", async: \"NOWAIT\" }\n * ```\n *\n * The policy for a given Resolvable is merged from three sources (highest priority first):\n *\n * 1) Individual resolve definition\n * 2) State definition\n * 3) Global default\n *\n * @example\n * ```js\n *\n * // Wait for an Observable to emit one item.\n * // Since `wait` is not specified, it uses the `wait`\n * // policy defined on the state, or the global default\n * // if no `wait` policy is defined on the state\n * var myResolvablePolicy = { async: \"RXWAIT\" }\n * ```\n */\nexport interface ResolvePolicy {\n  /**\n   * Defines when a Resolvable is resolved (fetched) during a transition\n   *\n   * - `LAZY` (default) resolved as the resolve's state is being entered\n   * - `EAGER` resolved as the transition is starting\n   */\n  when?: PolicyWhen;\n\n  /**\n   * Determines the unwrapping behavior of asynchronous resolve values.\n   *\n   * - `WAIT` (default) if a promise is returned from the resolveFn, wait for the promise before proceeding\n   * - `NOWAIT` if a promise is returned from the resolve, do not wait for the promise.\n   *            The promise will not be unwrapped.\n   *            The promise itself will be provided when the resolve is injected or bound elsewhere.\n   * - `RXWAIT` When an Observable is returned from the resolveFn, wait until the Observable emits at least one item.\n   *            The Observable item will not be unwrapped.\n   *            The Observable stream itself will be provided when the resolve is injected or bound elsewhere.\n   */\n  async?: PolicyAsync;\n}\n\nexport type PolicyWhen = \"LAZY\" | \"EAGER\" ;\nexport type PolicyAsync = \"WAIT\" | \"NOWAIT\" | \"RXWAIT\" ;\n\nexport let resolvePolicies = {\n  when: {\n    LAZY: \"LAZY\",\n    EAGER: \"EAGER\"\n  },\n  async: {\n    WAIT: \"WAIT\",\n    NOWAIT: \"NOWAIT\",\n    RXWAIT: \"RXWAIT\"\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/interface.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {extend, equals, inArray} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {trace} from \"../common/trace\";\nimport {ResolvePolicy, ResolvableLiteral, resolvePolicies} from \"./interface\";\n\nimport {ResolveContext} from \"./resolveContext\";\nimport {stringify} from \"../common/strings\";\nimport {isFunction, isObject} from \"../common/predicates\";\nimport {Transition} from \"../transition/transition\";\nimport {State} from \"../state/stateObject\";\nimport {PathNode} from \"../path/node\";\n\n\n// TODO: explicitly make this user configurable\nexport let defaultResolvePolicy: ResolvePolicy = {\n  when: \"LAZY\",\n  async: \"WAIT\"\n};\n\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nexport class Resolvable implements ResolvableLiteral {\n  token: any;\n  policy: ResolvePolicy;\n  resolveFn: Function;\n  deps: any[];\n\n  data: any;\n  resolved: boolean = false;\n  promise: Promise<any> = undefined;\n\n  /** This constructor creates a Resolvable copy */\n  constructor(resolvable: Resolvable)\n\n  /** This constructor creates a new Resolvable from the plain old [[ResolvableLiteral]] javascript object */\n  constructor(resolvable: ResolvableLiteral)\n\n  /** \n   * This constructor creates a new `Resolvable`\n   *\n   * @example\n   * ```js\n   *\n   * var resolvable1 = new Resolvable('mytoken', http => http.get('foo.json').toPromise(), [Http]);\n   *\n   * var resolvable2 = new Resolvable(UserService, dep => new UserService(dep.data), [SomeDependency]);\n   *\n   * var resolvable1Clone = new Resolvable(resolvable1);\n   * ```\n   *\n   * @param token The new resolvable's injection token, such as `\"userList\"` (a string) or `UserService` (a class).\n   *              When this token is used during injection, the resolved value will be injected.\n   * @param resolveFn The function that returns the resolved value, or a promise for the resolved value\n   * @param deps An array of dependencies, which will be injected into the `resolveFn`\n   * @param policy the [[ResolvePolicy]] defines when and how the Resolvable is processed\n   * @param data Pre-resolved data. If the resolve value is already known, it may be provided here.\n   */\n  constructor(token: any, resolveFn: Function, deps?: any[], policy?: ResolvePolicy, data?: any)\n  constructor(arg1: any, resolveFn?: Function, deps?: any[], policy?: ResolvePolicy, data?: any) {\n    if (arg1 instanceof Resolvable) {\n      extend(this, arg1);\n    } else if (isFunction(resolveFn)) {\n      if (arg1 == null || arg1 == undefined) throw new Error(\"new Resolvable(): token argument is required\");\n      if (!isFunction(resolveFn)) throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n\n      this.token = arg1;\n      this.policy = policy;\n      this.resolveFn = resolveFn;\n      this.deps = deps || [];\n\n      this.data = data;\n      this.resolved = data !== undefined;\n      this.promise = this.resolved ? services.$q.when(this.data) : undefined;\n    } else if (isObject(arg1) && arg1.token && isFunction(arg1.resolveFn)) {\n      let literal = <ResolvableLiteral> arg1;\n      return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n    }\n  }\n\n  getPolicy(state:State): ResolvePolicy {\n    let thisPolicy = this.policy || {};\n    let statePolicy = state && state.resolvePolicy || {};\n    return {\n      when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n      async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n    }\n  }\n\n  /**\n   * Asynchronously resolve this Resolvable's data\n   *\n   * Given a ResolveContext that this Resolvable is found in:\n   * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n   * and update the Resolvable's state\n   */\n  resolve(resolveContext: ResolveContext, trans?: Transition) {\n    let $q = services.$q;\n\n    // Gets all dependencies from ResolveContext and wait for them to be resolved\n    const getResolvableDependencies = () =>\n        $q.all(resolveContext.getDependencies(this).map(r =>\n            r.get(resolveContext, trans)));\n\n    // Invokes the resolve function passing the resolved dependencies as arguments\n    const invokeResolveFn = resolvedDeps =>\n        this.resolveFn.apply(null, resolvedDeps);\n\n    /**\n     * For RXWAIT policy:\n     *\n     * Given an observable returned from a resolve function:\n     * - enables .cache() mode (this allows multicast subscribers)\n     * - then calls toPromise() (this triggers subscribe() and thus fetches)\n     * - Waits for the promise, then return the cached observable (not the first emitted value).\n     */\n    const waitForRx = observable$ => {\n      let cached = observable$.cache();\n      return cached.toPromise().then(() => cached);\n    };\n\n    // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n    let node: PathNode = resolveContext.findNode(this);\n    let state: State = node && node.state;\n    let maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : x => x;\n\n    // After the final value has been resolved, update the state of the Resolvable\n    const applyResolvedValue = resolvedValue => {\n      this.data = resolvedValue;\n      this.resolved = true;\n      trace.traceResolvableResolved(this, trans);\n      return this.data;\n    };\n\n    // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n    return this.promise = $q.when()\n        .then(getResolvableDependencies)\n        .then(invokeResolveFn)\n        .then(maybeWaitForRx)\n        .then(applyResolvedValue);\n  }\n\n  /**\n   * Gets a promise for this Resolvable's data.\n   *\n   * Fetches the data and returns a promise.\n   * Returns the existing promise if it has already been fetched once.\n   */\n  get(resolveContext: ResolveContext, trans?: Transition): Promise<any> {\n    return this.promise || this.resolve(resolveContext, trans);\n  }\n\n  toString() {\n    return `Resolvable(token: ${stringify(this.token)}, requires: [${this.deps.map(stringify)}])`;\n  }\n\n  clone(): Resolvable {\n    return new Resolvable(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolvable.ts\n **/","/** @module path */ /** for typedoc */\n\nimport {extend, find, pick, omit, tail, mergeR, values, unnestR, Predicate, inArray} from \"../common/common\";\nimport {prop, propEq, not} from \"../common/hof\";\n\nimport {RawParams} from \"../params/interface\";\nimport {TreeChanges} from \"../transition/interface\";\nimport {ViewConfig} from \"../view/interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nimport {State} from \"../state/stateObject\";\nimport {TargetState} from \"../state/targetState\";\nimport {PathNode} from \"../path/node\";\nimport {ViewService} from \"../view/view\";\n\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nexport class PathFactory {\n\n  constructor() { }\n\n  /** Given a PathNode[], create an TargetState */\n  static makeTargetState(path: PathNode[]): TargetState {\n    let state = tail(path).state;\n    return new TargetState(state, state, path.map(prop(\"paramValues\")).reduce(mergeR, {}));\n  }\n\n  static buildPath(targetState: TargetState) {\n    let toParams = targetState.params();\n    return targetState.$state().path.map(state => new PathNode(state).applyRawParams(toParams));\n  }\n\n  /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n  static buildToPath(fromPath: PathNode[], targetState: TargetState): PathNode[] {\n    let toPath: PathNode[] = PathFactory.buildPath(targetState);\n    if (targetState.options().inherit) {\n      return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n    }\n    return toPath;\n  }\n\n  /**\n   * Creates ViewConfig objects and adds to nodes.\n   *\n   * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n   */\n  static applyViewConfigs($view: ViewService, path: PathNode[], states: State[]) {\n    // Only apply the viewConfigs to the nodes for the given states\n    path.filter(node => inArray(states, node.state)).forEach(node => {\n      let viewDecls: _ViewDeclaration[] = values(node.state.views || {});\n      let subPath = PathFactory.subPath(path, n => n === node);\n      let viewConfigs: ViewConfig[][] = viewDecls.map(view => $view.createViewConfig(subPath, view));\n      node.views = viewConfigs.reduce(unnestR, []);\n    });\n  }\n\n  /**\n   * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n   *\n   * For a parameter in a node to be inherited from the from path:\n   * - The toPath's node must have a matching node in the fromPath (by state).\n   * - The parameter name must not be found in the toKeys parameter array.\n   *\n   * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n   * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n   * it is not inherited from the fromPath.\n   */\n  static inheritParams(fromPath: PathNode[], toPath: PathNode[], toKeys: string[] = []): PathNode[] {\n    function nodeParamVals(path: PathNode[], state: State): RawParams {\n      let node: PathNode = find(path, propEq('state', state));\n      return extend({}, node && node.paramValues);\n    }\n\n    /**\n     * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n     * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n     */\n    function makeInheritedParamsNode(toNode: PathNode): PathNode {\n      // All param values for the node (may include default key/vals, when key was not found in toParams)\n      let toParamVals = extend({}, toNode && toNode.paramValues);\n      // limited to only those keys found in toParams\n      let incomingParamVals = pick(toParamVals, toKeys);\n      toParamVals = omit(toParamVals, toKeys);\n      let fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\n      // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n      let ownParamVals: RawParams = extend(toParamVals, fromParamVals, incomingParamVals);\n      return new PathNode(toNode.state).applyRawParams(ownParamVals);\n    }\n\n    // The param keys specified by the incoming toParams\n    return <PathNode[]> toPath.map(makeInheritedParamsNode);\n  }\n\n  /**\n   * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n   */\n  static treeChanges(fromPath: PathNode[], toPath: PathNode[], reloadState: State): TreeChanges {\n    let keep = 0, max = Math.min(fromPath.length, toPath.length);\n    const staticParams = (state) => state.parameters({ inherit: false }).filter(not(prop('dynamic'))).map(prop('id'));\n    const nodesMatch = (node1: PathNode, node2: PathNode) => node1.equals(node2, staticParams(node1.state));\n\n    while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n      keep++;\n    }\n\n    /** Given a retained node, return a new node which uses the to node's param values */\n    function applyToParams(retainedNode: PathNode, idx: number): PathNode {\n      let cloned = PathNode.clone(retainedNode);\n      cloned.paramValues = toPath[idx].paramValues;\n      return cloned;\n    }\n\n    let from: PathNode[], retained: PathNode[], exiting: PathNode[], entering: PathNode[], to: PathNode[];\n\n    from                  = fromPath;\n    retained              = from.slice(0, keep);\n    exiting               = from.slice(keep);\n\n    // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n    let retainedWithToParams  = retained.map(applyToParams);\n    entering              = toPath.slice(keep);\n    to                    = (retainedWithToParams).concat(entering);\n\n    return { from, to, retained, exiting, entering };\n  }\n\n  /**\n   * Return a subpath of a path, which stops at the first matching node\n   *\n   * Given an array of nodes, returns a subset of the array starting from the first node,\n   * stopping when the first node matches the predicate.\n   *\n   * @param path a path of [[PathNode]]s\n   * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n   * @returns a subpath up to the matching node, or undefined if no match is found\n   */\n  static subPath(path: PathNode[], predicate: Predicate<PathNode>): PathNode[] {\n    let node = find(path, predicate);\n    let elementIdx = path.indexOf(node);\n    return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n  }\n\n  /** Gets the raw parameter values from a path */\n  static paramValues = (path: PathNode[]) => path.reduce((acc, node) => extend(acc, node.paramValues), {});\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./path/pathFactory.ts\n **/","/** @module path */ /** for typedoc */\nimport {extend, applyPairs, find, allTrueR} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {State} from \"../state/stateObject\";\nimport {RawParams} from \"../params/interface\";\nimport {Param} from \"../params/param\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {ViewConfig} from \"../view/interface\";\n\n/**\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nexport class PathNode {\n  /** The state being entered, exited, or retained */\n  public state: State;\n  /** The parameters declared on the state */\n  public paramSchema: Param[];\n  /** The parameter values that belong to the state */\n  public paramValues: { [key: string]: any };\n  /** The individual (stateful) resolvable objects that belong to the state */\n  public resolvables: Resolvable[];\n  /** The state's declared view configuration objects */\n  public views: ViewConfig[];\n\n  /** Creates a copy of a PathNode */\n  constructor(state: PathNode);\n  /** Creates a new (empty) PathNode for a State */\n  constructor(state: State);\n  constructor(state) {\n    if (state instanceof PathNode) {\n      let node: PathNode = state;\n      this.state = node.state;\n      this.paramSchema = node.paramSchema.slice();\n      this.paramValues = extend({}, node.paramValues);\n      this.resolvables = node.resolvables.slice();\n      this.views = node.views && node.views.slice();\n    } else {\n      this.state = state;\n      this.paramSchema = state.parameters({ inherit: false });\n      this.paramValues = {};\n      this.resolvables = state.resolvables.map(res => res.clone());\n    }\n  }\n\n  /** Sets [[paramValues]] for the node, from the values of an object hash */\n  applyRawParams(params: RawParams): PathNode {\n    const getParamVal = (paramDef: Param) => [ paramDef.id, paramDef.value(params[paramDef.id]) ];\n    this.paramValues = this.paramSchema.reduce((memo, pDef) => applyPairs(memo, getParamVal(pDef)), {});\n    return this;\n  }\n\n  /** Gets a specific [[Param]] metadata that belongs to the node */\n  parameter(name: string): Param {\n    return find(this.paramSchema, propEq(\"id\", name));\n  }\n\n  /**\n   * @returns true if the state and parameter values for another PathNode are\n   * equal to the state and param values for this PathNode\n   */\n  equals(node: PathNode, keys = this.paramSchema.map(prop('id'))): boolean {\n    const paramValsEq = key => this.parameter(key).type.equals(this.paramValues[key], node.paramValues[key]);\n    return this.state === node.state && keys.map(paramValsEq).reduce(allTrueR, true);\n  }\n\n  /** Returns a clone of the PathNode */\n  static clone(node: PathNode) {\n    return new PathNode(node);\n  }\n\n  /**\n   * Returns a new path which is a subpath of the first path which matched the second path.\n   *\n   * The new path starts from root and contains any nodes that match the nodes in the second path.\n   * Nodes are compared using their state property and parameter values.\n   */\n  static matching(pathA: PathNode[], pathB: PathNode[]): PathNode[] {\n    let matching = [];\n\n    for (let i = 0; i < pathA.length && i < pathB.length; i++) {\n      let a = pathA[i], b = pathB[i];\n\n      if (a.state !== b.state) break;\n      if (!Param.equals(a.paramSchema, a.paramValues, b.paramValues)) break;\n      matching.push(a);\n    }\n\n    return matching\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./path/node.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map, applyPairs, allTrueR} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {isInjectable, isDefined, isString, isArray} from \"../common/predicates\";\nimport {RawParams} from \"../params/interface\";\nimport {services} from \"../common/coreservices\";\nimport {matcherConfig} from \"../url/urlMatcherConfig\";\nimport {ParamType} from \"./type\";\nimport {paramTypes} from \"./paramTypes\";\n\nlet hasOwn = Object.prototype.hasOwnProperty;\nlet isShorthand = cfg => [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\n\nexport enum DefType {\n  PATH, SEARCH, CONFIG\n}\n\nfunction unwrapShorthand(cfg) {\n  cfg = isShorthand(cfg) && { value: cfg } || cfg;\n\n  return extend(cfg, {\n    $$fn: isInjectable(cfg.value) ? cfg.value : () => cfg.value\n  });\n}\n\nfunction getType(cfg, urlType, location, id) {\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type)) return paramTypes.type(cfg.type);\n  if (urlType) return urlType;\n  if (!cfg.type) return (location === DefType.CONFIG ? paramTypes.type(\"any\") : paramTypes.type(\"string\"));\n  return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type);\n}\n\n/**\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config, isOptional) {\n  let squash = config.squash;\n  if (!isOptional || squash === false) return false;\n  if (!isDefined(squash) || squash == null) return matcherConfig.defaultSquashPolicy();\n  if (squash === true || isString(squash)) return squash;\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\n}\n\nfunction getReplace(config, arrayMode, isOptional, squash) {\n  let replace, configuredKeys, defaultPolicy = [\n    {from: \"\", to: (isOptional || arrayMode ? undefined : \"\")},\n    {from: null, to: (isOptional || arrayMode ? undefined : \"\")}\n  ];\n  replace = isArray(config.replace) ? config.replace : [];\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\n  configuredKeys = map(replace, prop(\"from\"));\n  return filter(defaultPolicy, item => configuredKeys.indexOf(item.from) === -1).concat(replace);\n}\n\n\nexport class Param {\n  id: string;\n  type: ParamType;\n  location: DefType;\n  array: boolean;\n  squash: (boolean|string);\n  replace: any;\n  isOptional: boolean;\n  dynamic: boolean;\n  config: any;\n\n  constructor(id: string, type: ParamType, config: any, location: DefType) {\n    config = unwrapShorthand(config);\n    type = getType(config, type, location, id);\n    let arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n    let isOptional = config.value !== undefined;\n    let dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n    let squash = getSquashPolicy(config, isOptional);\n    let replace = getReplace(config, arrayMode, isOptional, squash);\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      let arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n      let arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    extend(this, {id, type, location, squash, replace, isOptional, dynamic, config, array: arrayMode});\n  }\n\n  isDefaultValue(value: any): boolean {\n    return this.isOptional && this.type.equals(this.value(), value);\n  }\n\n  /**\n   * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n   * default value, which may be the result of an injectable function.\n   */\n  value(value?: any): any {\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    const $$getDefaultValue = () => {\n      if (!services.$injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      let defaultValue = services.$injector.invoke(this.config.$$fn);\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\n        throw new Error(`Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`);\n      return defaultValue;\n    };\n\n    const $replace = (val) => {\n      let replacement: any = map(filter(this.replace, propEq('from', val)), prop(\"to\"));\n      return replacement.length ? replacement[0] : val;\n    };\n\n    value = $replace(value);\n    return !isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n  }\n\n  isSearch(): boolean {\n    return this.location === DefType.SEARCH;\n  }\n\n  validates(value: any): boolean {\n    // There was no parameter value, but the param is optional\n    if ((!isDefined(value) || value === null) && this.isOptional) return true;\n\n    // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n    const normalized = this.type.$normalize(value);\n    if (!this.type.is(normalized)) return false;\n\n    // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n    const encoded = this.type.encode(normalized);\n    return !(isString(encoded) && !this.type.pattern.exec(<string> encoded));\n  }\n\n  toString() {\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n  }\n\n  /** Creates a new [[Param]] from a CONFIG block */\n  static fromConfig(id: string, type: ParamType, config: any): Param {\n    return new Param(id, type, config, DefType.CONFIG);\n  }\n\n  /** Creates a new [[Param]] from a url PATH */\n  static fromPath(id: string, type: ParamType, config: any): Param {\n    return new Param(id, type, config, DefType.PATH);\n  }\n\n  /** Creates a new [[Param]] from a url SEARCH */\n  static fromSearch(id: string, type: ParamType, config: any): Param {\n    return new Param(id, type, config, DefType.SEARCH);\n  }\n\n  static values(params: Param[], values = {}): RawParams {\n    return <RawParams> params.map(param => [param.id, param.value(values[param.id])]).reduce(applyPairs, {});\n  }\n\n  /**\n   * Finds [[Param]] objects which have different param values\n   *\n   * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n   *\n   * @param params: The list of Param objects to filter\n   * @param values1: The first set of parameter values\n   * @param values2: the second set of parameter values\n   *\n   * @returns any Param objects whose values were different between values1 and values2\n   */\n  static changed(params: Param[], values1 = {}, values2 = {}): Param[] {\n    return params.filter(param => !param.type.equals(values1[param.id], values2[param.id]));\n  }\n\n  /**\n   * Checks if two param value objects are equal (for a set of [[Param]] objects)\n   *\n   * @param params The list of [[Param]] objects to check\n   * @param values1 The first set of param values\n   * @param values2 The second set of param values\n   *\n   * @returns true if the param values in values1 and values2 are equal\n   */\n  static equals(params: Param[], values1 = {}, values2 = {}): boolean {\n    return Param.changed(params, values1, values2).length === 0;\n  }\n\n  /** Returns true if a the parameter values are valid, according to the Param definitions */\n  static validates(params: Param[], values = {}): boolean {\n    return params.map(param => param.validates(values[param.id])).reduce(allTrueR, true);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/param.ts\n **/","/** @module url */ /** for typedoc */\nimport {isDefined, isString} from \"../common/predicates\";\n\nexport class MatcherConfig {\n  _isCaseInsensitive: boolean = false;\n  _isStrictMode: boolean = true;\n  _defaultSquashPolicy: (boolean|string) = false;\n\n  caseInsensitive(value?: boolean): boolean {\n    return this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive;\n  }\n\n  strictMode(value?: boolean): boolean {\n    return this._isStrictMode = isDefined(value) ? value : this._isStrictMode;\n  }\n\n  defaultSquashPolicy(value?: (boolean|string)): (boolean|string) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy;\n  }\n}\n\n// TODO: Do not export global instance; create one in UIRouter() constructor\nexport let matcherConfig = new MatcherConfig();\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherConfig.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map} from \"../common/common\";\nimport {isArray, isDefined} from \"../common/predicates\";\nimport {ParamTypeDefinition} from \"./interface\";\n\n/**\n * Wraps up a `ParamType` object to handle array values.\n */\nfunction ArrayType(type, mode) {\n  // Wrap non-array value as array\n  function arrayWrap(val): any[] { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }\n\n  // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n  function arrayUnwrap(val) {\n    switch (val.length) {\n      case 0: return undefined;\n      case 1: return mode === \"auto\" ? val[0] : val;\n      default: return val;\n    }\n  }\n\n  // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n  function arrayHandler(callback, allTruthyMode?: boolean) {\n    return function handleArray(val) {\n      if (isArray(val) && val.length === 0) return val;\n      let arr = arrayWrap(val);\n      let result = map(arr, callback);\n      return (allTruthyMode === true) ? filter(result, x => !x).length === 0 : arrayUnwrap(result);\n    };\n  }\n\n  // Wraps type (.equals) functions to operate on each value of an array\n  function arrayEqualsHandler(callback) {\n    return function handleArray(val1, val2) {\n      let left = arrayWrap(val1), right = arrayWrap(val2);\n      if (left.length !== right.length) return false;\n      for (let i = 0; i < left.length; i++) {\n        if (!callback(left[i], right[i])) return false;\n      }\n      return true;\n    };\n  }\n\n  ['encode', 'decode', 'equals', '$normalize'].map(name => {\n    this[name] = (name === 'equals' ? arrayEqualsHandler : arrayHandler)(type[name].bind(type));\n  });\n\n  extend(this, {\n    dynamic: type.dynamic,\n    name: type.name,\n    pattern: type.pattern,\n    is: arrayHandler(type.is.bind(type), true),\n    $arrayMode: mode\n  });\n}\n\n/**\n * A class that implements Custom Parameter Type functionality.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * @example\n * ```\n *\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * ```\n */\nexport class ParamType implements ParamTypeDefinition {\n  pattern: RegExp = /.*/;\n  name: string;\n  raw: boolean;\n  dynamic: boolean;\n\n  /**\n   * @param def  A configuration object which contains the custom type definition.  The object's\n   *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n   * @returns a new ParamType object\n   */\n  constructor(def: ParamTypeDefinition) {\n    extend(this, def);\n  }\n\n\n  // consider these four methods to be \"abstract methods\" that should be overridden\n  /** @inheritdoc */\n  is(val: any, key?: string): boolean { return true; }\n  /** @inheritdoc */\n  encode(val: any, key?: string): (string|string[]) { return val; }\n  /** @inheritdoc */\n  decode(val: string, key?: string): any { return val; }\n  /** @inheritdoc */\n  equals(a: any, b: any): boolean { return a == b; }\n\n\n  $subPattern() {\n    let sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  }\n\n  toString() {\n    return `{ParamType:${this.name}}`;\n  }\n\n  /** Given an encoded string, or a decoded object, returns a decoded object */\n  $normalize(val) {\n    return this.is(val) ? val : this.decode(val);\n  }\n\n  /**\n   * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n   * e.g.:\n   * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n   * - url: \"/path?queryParam=1&queryParam=2\n   * - $stateParams.queryParam will be [1, 2]\n   * if `mode` is \"auto\", then\n   * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n   * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n   */\n  $asArray(mode, isSearch) {\n    if (!mode) return this;\n    if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n    return new ArrayType(this, mode);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/type.ts\n **/","/** @module params */ /** for typedoc */\nimport {fromJson, toJson, identity, equals, inherit, map, extend} from \"../common/common\";\nimport {isDefined} from \"../common/predicates\";\nimport {is, val} from \"../common/hof\";\nimport {services} from \"../common/coreservices\";\nimport {ParamType} from \"./type\";\n\n// Use tildes to pre-encode slashes.\n// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n// and bidirectional encoding/decoding fails.\n// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\nfunction valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\nfunction valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\n\nexport class ParamTypes {\n  types: any;\n  enqueue: boolean = true;\n  typeQueue: any[] = [];\n\n  private defaultTypes: any = {\n    \"hash\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /.*/,\n      equals: (a, b) => a == b // allow coersion for null/undefined/\"\"\n    },\n    \"string\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /[^/]*/\n    },\n    \"int\": {\n      encode: valToString,\n      decode(val) { return parseInt(val, 10); },\n      is(val) { return isDefined(val) && this.decode(val.toString()) === val; },\n      pattern: /-?\\d+/\n    },\n    \"bool\": {\n      encode: val => val && 1 || 0,\n      decode: val => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/\n    },\n    \"date\": {\n      encode(val) {\n        return !this.is(val) ? undefined : [\n          val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode(val) {\n        if (this.is(val)) return val;\n        let match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l, r) {\n        return ['getFullYear', 'getMonth', 'getDate']\n            .reduce((acc, fn) => acc && l[fn]() === r[fn](), true)\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    },\n    \"json\": {\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/\n    },\n    \"any\": { // does not encode/decode\n      encode: identity,\n      decode: identity,\n      equals: equals,\n      pattern: /.*/\n    }\n  };\n\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition, name) => new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  type(name, definition?: any, definitionFn?: Function) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n    return this;\n  }\n\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      let type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\nexport let paramTypes = new ParamTypes();\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/paramTypes.ts\n **/","/** @module core */ /** */\nimport {UrlMatcherFactory} from \"./url/urlMatcherFactory\";\nimport {UrlRouterProvider} from \"./url/urlRouter\";\nimport {StateProvider} from \"./state/state\";\nimport {UrlRouter} from \"./url/urlRouter\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {ViewService} from \"./view/view\";\nimport {StateRegistry} from \"./state/stateRegistry\";\nimport {StateService} from \"./state/stateService\";\nimport {UIRouterGlobals, Globals} from \"./globals\";\n\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * This class instantiates and wires the global UI-Router services.\n *\n * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n */\nexport class UIRouter {\n  viewService = new ViewService();\n\n  transitionService: TransitionService = new TransitionService(this);\n\n  globals: UIRouterGlobals = new Globals(this.transitionService);\n\n  urlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory();\n\n  urlRouterProvider: UrlRouterProvider = new UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n\n  urlRouter: UrlRouter = new UrlRouter(this.urlRouterProvider);\n\n  stateRegistry: StateRegistry = new StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n\n  /** @hidden TODO: move this to ng1.ts */\n  stateProvider = new StateProvider(this.stateRegistry);\n\n  stateService = new StateService(this);\n\n  constructor() {\n    this.viewService.rootContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./router.ts\n **/","/** @module url */ /** for typedoc */\nimport {forEach, extend} from \"../common/common\";\nimport {isObject, isDefined, isFunction} from \"../common/predicates\";\n\nimport {UrlMatcher} from \"./urlMatcher\";\nimport {matcherConfig} from \"./urlMatcherConfig\";\nimport {Param} from \"../params/param\";\nimport {paramTypes} from \"../params/paramTypes\";\nimport {ParamType} from \"../params/type\";\n\n/** @hidden */\nfunction getDefaultConfig() {\n  return {\n    strict: matcherConfig.strictMode(),\n    caseInsensitive: matcherConfig.caseInsensitive()\n  };\n}\n\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory {\n  constructor() {\n    extend(this, { UrlMatcher, Param });\n  }\n\n  /**\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns the current value of caseInsensitive\n   */\n  caseInsensitive(value: boolean) {\n    return matcherConfig.caseInsensitive(value);\n  }\n\n  /**\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns the current value of strictMode\n   */\n  strictMode(value: boolean) {\n    return matcherConfig.strictMode(value);\n  }\n\n  /**\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * @param value A string that defines the default parameter URL squashing behavior.\n   *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *             the parameter value from the URL and replace it with this string.\n   * @returns the current value of defaultSquashPolicy\n   */\n  defaultSquashPolicy(value: string) {\n    return matcherConfig.defaultSquashPolicy(value);\n  }\n\n  /**\n   * Creates a [[UrlMatcher]] for the specified pattern.\n   *\n   * @param pattern  The URL pattern.\n   * @param config  The config object hash.\n   * @returns The UrlMatcher.\n   */\n  compile(pattern: string, config?: { [key: string]: any }) {\n    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));\n  }\n\n  /**\n   * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n   *\n   * @param object  The object to perform the type check against.\n   * @returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  isMatcher(object: any) {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && (isDefined(object[name]) && isFunction(object[name]));\n    });\n    return result;\n  };\n\n  /**\n   * Creates and registers a custom [[ParamType]] object that can be used to generate URLs with typed parameters.\n   *\n   * @param name  The type name.\n   * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app\n   *        runtime starts.  The result of this function is merged into the existing `definition`.\n   *        See [[ParamType]] for information on the values accepted.\n   *\n   * @returns - if a type was registered: the [[UrlMatcherFactory]]\n   *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n   *\n   * This is a simple example of a custom type that encodes and decodes items from an\n   * array, using the array index as the URL-encoded value:\n   */\n  type(name: string, definition?: (Function|ParamType), definitionFn?: Function) {\n    let type = paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  };\n\n  /** @hidden */\n  $get() {\n    paramTypes.enqueue = false;\n    paramTypes._flushTypeQueue();\n    return this;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherFactory.ts\n **/","/** @module url */ /** for typedoc */\nimport {\n  map, defaults, extend, inherit, identity,\n  unnest, tail, forEach, find, omit, pairs, allTrueR\n} from \"../common/common\";\nimport {prop, propEq } from \"../common/hof\";\nimport {isArray, isString} from \"../common/predicates\";\nimport {Param} from \"../params/param\";\nimport {paramTypes} from \"../params/paramTypes\";\nimport {isDefined} from \"../common/predicates\";\nimport {DefType} from \"../params/param\";\nimport {unnestR} from \"../common/common\";\nimport {arrayTuples} from \"../common/common\";\nimport {RawParams} from \"../params/interface\";\n\n/** @hidden */\nfunction quoteRegExp(string: any, param?: any) {\n  let surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')]; break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?']; break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n\n/** @hidden */\nconst memoizeTo = (obj, prop, fn) => obj[prop] = obj[prop] || fn();\n\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\n * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\n * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nexport class UrlMatcher {\n  /** @hidden */\n  static nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  /** @hidden */\n  private _cache: { path: UrlMatcher[], pattern?: RegExp } = { path: [], pattern: null };\n  /** @hidden */\n  private _children: UrlMatcher[] = [];\n  /** @hidden */\n  private _params:   Param[]      = [];\n  /** @hidden */\n  private _segments: string[]     = [];\n  /** @hidden */\n  private _compiled: string[]     = [];\n\n  /**\n   * A static prefix of this pattern.\n   *\n   * The matcher guarantees that any\n   *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n   *   non-null) will start with this prefix.\n   */\n  public prefix: string;\n  /** The pattern that was passed into the constructor */\n  public pattern: string;\n\n  /**\n   * @param pattern The pattern to compile into a matcher.\n   * @param config  A configuration object hash\n   * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n   * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n   *\n   * @property {string} pattern  The pattern that was passed into the constructor\n   */\n  constructor(pattern: string, public config: any) {\n    this.pattern = pattern;\n    this.config = defaults(this.config, {\n      params: {},\n      strict: true,\n      caseInsensitive: false,\n      paramMap: identity\n    });\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    let placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        last = 0, m, patterns = [];\n\n    const checkParamErrors = (id) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id))) throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m, isSearch) => {\n      // IE[78] returns '' for unmatched groups instead of null\n      let id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n\n      return {\n        id,\n        regexp,\n        cfg:     this.config.params[id],\n        segment: pattern.substring(last, m.index),\n        type:    !regexp ? null : paramTypes.type(regexp || \"string\") || inherit(paramTypes.type(\"string\"), {\n          pattern: new RegExp(regexp, this.config.caseInsensitive ? 'i' : undefined)\n        })\n      };\n    }\n\n    let p, segment;\n\n    while ((m = placeholder.exec(pattern))) {\n      p = matchDetails(m, false);\n      if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(p.id);\n      this._params.push(Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n      this._segments.push(p.segment);\n      patterns.push([p.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    let i = segment.indexOf('?');\n\n    if (i >= 0) {\n      let search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        while ((m = searchPlaceholder.exec(search))) {\n          p = matchDetails(m, true);\n          checkParamErrors(p.id);\n          this._params.push(Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n\n    extend(this, {\n      _compiled: patterns.map(pattern => quoteRegExp.apply(null, pattern)).concat(quoteRegExp(segment)),\n      prefix: this._segments[0]\n    });\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Creates a new concatenated UrlMatcher\n   *\n   * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n   *\n   * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n  append(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    forEach(url._cache, (val, key) => url._cache[key] = isArray(val) ? [] : null);\n    url._cache.path = this._cache.path.concat(this);\n    return url;\n  }\n\n  /** @hidden */\n  isRoot(): boolean {\n    return this._cache.path.length === 0;\n  }\n\n  /** Returns the input pattern string */\n  toString(): string {\n    return this.pattern;\n  }\n\n  /**\n   * Tests the specified url/path against this matcher.\n   *\n   * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n   * parameter values.  Returns null if the path does not match.\n   *\n   * The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * @example\n   * ```js\n   *\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * ```\n   *\n   * @param path    The URL path to match, e.g. `$location.path()`.\n   * @param search  URL search parameters, e.g. `$location.search()`.\n   * @param hash    URL hash e.g. `$location.hash()`.\n   * @param options\n   *\n   * @returns The captured parameter values.\n   */\n  exec(path: string, search: any = {}, hash?: string, options: any = {}): RawParams {\n    let match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp([\n        '^',\n        unnest(this._cache.path.concat(this).map(prop('_compiled'))).join(''),\n        this.config.strict === false ? '\\/?' : '',\n        '$'\n      ].join(''), this.config.caseInsensitive ? 'i' : undefined);\n    }).exec(path);\n\n    if (!match) return null;\n\n    //options = defaults(options, { isolate: false });\n\n    let allParams:    Param[] = this.parameters(),\n        pathParams:   Param[] = allParams.filter(param => !param.isSearch()),\n        searchParams: Param[] = allParams.filter(param => param.isSearch()),\n        nPathSegments  = this._cache.path.concat(this).map(urlm => urlm._segments.length - 1).reduce((a, x) => a + x),\n        values = {};\n\n    if (nPathSegments !== match.length - 1)\n      throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n\n    function decodePathArray(string: string) {\n      const reverseString = (str: string) => str.split(\"\").reverse().join(\"\");\n      const unquoteDashes = (str: string) => str.replace(/\\\\-/g, \"-\");\n\n      let split = reverseString(string).split(/-(?!\\\\)/);\n      let allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let i = 0; i < nPathSegments; i++) {\n      let param: Param = pathParams[i];\n      let value: (any|any[]) = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n    forEach(searchParams, param => {\n      let value = search[param.id];\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n\n    if (hash) values[\"#\"] = hash;\n\n    return values;\n  }\n\n  /**\n   * @hidden\n   * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  parameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.concat(this).map(prop('_params')));\n  }\n\n  /**\n   * @hidden\n   * Returns a single parameter from this UrlMatcher by id\n   *\n   * @param id\n   * @param opts\n   * @returns {T|Param|any|boolean|UrlMatcher|null}\n   */\n  parameter(id: string, opts: any = {}): Param {\n    const parent = tail(this._cache.path);\n\n    return (\n      find(this._params, propEq('id', id)) ||\n      (opts.inherit !== false && parent && parent.parameter(id)) ||\n      null\n    );\n  }\n\n  /**\n   * Validates the input parameter values against this UrlMatcher\n   *\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param params The object hash of parameters to validate.\n   * @returns Returns `true` if `params` validates, otherwise `false`.\n   */\n  validates(params: RawParams): boolean {\n    const validParamVal = (param: Param, val) => !param || param.validates(val);\n    return pairs(params || {}).map(([key, val]) => validParamVal(this.parameter(key), val)).reduce(allTrueR, true);\n  }\n\n  /**\n   * Given a set of parameter values, creates a URL from this UrlMatcher.\n   *\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters.\n   *\n   * @example\n   * ```js\n   *\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * ```\n   *\n   * @param values  the values to substitute for the parameters in this pattern.\n   * @returns the formatted URL (path and optionally search part).\n   */\n  format(values = {}) {\n    if (!this.validates(values)) return null;\n\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    let urlMatchers = this._cache.path.slice().concat(this);\n\n    // Extract all the static segments and Params into an ordered array\n    let pathSegmentsAndParams: Array<string|Param> =\n        urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(unnestR, []);\n\n    // Extract the query params into a separate array\n    let queryParams: Array<Param> =\n        urlMatchers.map(UrlMatcher.queryParams).reduce(unnestR, []);\n\n    /**\n     * Given a Param,\n     * Applies the parameter value, then returns details about it\n     */\n    function getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      let value = param.value(values[param.id]);\n      let isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      let squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      let encoded = param.type.encode(value);\n\n      return { param, value, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    let pathString = pathSegmentsAndParams.reduce((acc: string, x: string|Param) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a Param.  Fetch details about the parameter value\n      let {squash, encoded, param} = getDetails(<Param> x);\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map(<string[]> encoded, UrlMatcher.encodeDashes).join(\"-\");\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.type.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent(<string> encoded);\n    }, \"\");\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    let queryString = queryParams.map((param: Param) => {\n      let {squash, encoded, isDefaultValue} = getDetails(param);\n      if (encoded == null || (isDefaultValue && squash !== false)) return;\n      if (!isArray(encoded)) encoded = [<string> encoded];\n      if (encoded.length === 0) return;\n      if (!param.type.raw) encoded = map(<string[]> encoded, encodeURIComponent);\n\n      return (<string[]> encoded).map(val => `${param.id}=${val}`);\n    }).filter(identity).reduce(unnestR, []).join(\"&\");\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n  }\n\n  /** @hidden */\n  static encodeDashes(str) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, c => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n  static pathSegmentsAndParams(matcher: UrlMatcher) {\n    let staticSegments = matcher._segments;\n    let pathParams = matcher._params.filter(p => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(unnestR, []).filter(x => x !== \"\" && isDefined(x));\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's query params */\n  static queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter(p => p.location === DefType.SEARCH);\n  }\n}\n\n/** @hidden */\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isDefaultValue: boolean;\n  squash: (boolean|string);\n  encoded: (string|string[]);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcher.ts\n **/","/** @module url */ /** for typedoc */\nimport {extend, bindFunctions, IInjectable} from \"../common/common\";\nimport {isFunction, isString, isDefined, isArray} from \"../common/predicates\";\nimport {UrlMatcher} from \"./urlMatcher\";\nimport {services} from \"../common/coreservices\";\nimport {UrlMatcherFactory} from \"./urlMatcherFactory\";\nimport {StateParams} from \"../params/stateParams\";\n\n/** @hidden */\nlet $location = services.location;\n\n/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\nfunction regExpPrefix(re) {\n  let prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n  return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n}\n\n/** @hidden Interpolates matched values into a String.replace()-style pattern */\nfunction interpolate(pattern, match) {\n  return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n    return match[what === '$' ? 0 : Number(what)];\n  });\n}\n\n/** @hidden */\nfunction handleIfMatch($injector, $stateParams, handler, match) {\n  if (!match) return false;\n  let result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n  return isDefined(result) ? result : true;\n}\n\n/** @hidden */\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean): string {\n  let baseHref = services.locationConfig.baseHref();\n  if (baseHref === '/') return url;\n  if (isHtml5) return baseHref.slice(0, -1) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n/** @hidden */\nfunction update(rules: Function[], otherwiseFn: Function, evt?: any) {\n  if (evt && evt.defaultPrevented) return;\n\n  function check(rule) {\n    let handled = rule(services.$injector, $location);\n\n    if (!handled) return false;\n    if (isString(handled)) {\n      $location.replace();\n      $location.url(handled);\n    }\n    return true;\n  }\n  let n = rules.length, i;\n\n  for (i = 0; i < n; i++) {\n    if (check(rules[i])) return;\n  }\n  // always check otherwise last to allow dynamic updates to the set of rules\n  if (otherwiseFn) check(otherwiseFn);\n}\n\n\n/**\n * Manages rules for client-side URL\n *\n * This class manages the router rules for what to do when the URL changes.\n */\nexport class UrlRouterProvider {\n  /** @hidden */\n  rules = [];\n  /** @hidden */\n  otherwiseFn: ($injector, $location) => string;\n  /** @hidden */\n  interceptDeferred = false;\n\n  /** @hidden */\n  private $urlMatcherFactory: UrlMatcherFactory;\n  /** @hidden */\n  private $stateParams: StateParams;\n\n  constructor($urlMatcherFactory: UrlMatcherFactory, $stateParams: StateParams) {\n    this.$urlMatcherFactory = $urlMatcherFactory;\n    this.$stateParams = $stateParams;\n  }\n\n  /**\n   * Registers a url handler function.\n   *\n   * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\n   * a redirect, or performs some action.\n   *\n   * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * ```\n   *\n   * @param rule\n   * Handler function that takes `$injector` and `$location` services as arguments.\n   * You can use them to detect a url and return a different url as a string.\n   *\n   * @return [[$urlRouterProvider]] (`this`)\n   */\n  rule(rule: ($injector, $location) => string): UrlRouterProvider {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    this.rules.push(rule);\n    return this;\n  };\n\n  /**\n   * Defines the path or behavior to use when no url can be matched.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * ```\n   *\n   * @param rule \n   * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`. \n   * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  otherwise(rule: string | (($injector, $location) => string)): UrlRouterProvider {\n    if (!isFunction(rule) && !isString(rule)) throw new Error(\"'rule' must be a string or function\");\n    this.otherwiseFn = isString(rule) ? () => rule : rule;\n    return this;\n  };\n\n  /**\n   * Registers a handler for a given url matching. \n   * \n   * If the handler is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable.\n   * It gets invoked if `$location` matches.\n   * You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * ```js\n   * \n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * ```\n   *\n   * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n   * @param handler The path (or function that returns a path) that you want to redirect your user to.\n   *\n   * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n   */\n  when(what: (RegExp|UrlMatcher|string), handler: string|IInjectable) {\n    let {$urlMatcherFactory, $stateParams} = this;\n    let redirect, handlerIsString = isString(handler);\n\n    // @todo Queue this\n    if (isString(what)) what = $urlMatcherFactory.compile(<string> what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    let strategies = {\n      matcher: function (_what, _handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(_handler);\n          _handler = ['$match', redirect.format.bind(redirect)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n        }, {\n          prefix: isString(_what.prefix) ? _what.prefix : ''\n        });\n      },\n      regex: function (_what, _handler) {\n        if (_what.global || _what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = _handler;\n          _handler = ['$match', ($match) => interpolate(redirect, $match)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(_what)\n        });\n      }\n    };\n\n    let check = {\n      matcher: $urlMatcherFactory.isMatcher(what),\n      regex: what instanceof RegExp\n    };\n\n    for (var n in check) {\n      if (check[n]) return this.rule(strategies[n](what, handler));\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * Disables monitoring of the URL.\n   *\n   * Call this method before UI-Router has bootstrapped.\n   * It will stop UI-Router from performing the initial url sync.\n   *\n   * This can be useful to perform some asynchronous initialization before the router starts.\n   * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   $urlRouterProvider.deferIntercept();\n   * })\n   *\n   * app.run(function (MyService, $urlRouter, $http) {\n   *   $http.get(\"/stuff\").then(function(resp) {\n   *     MyService.doStuff(resp.data);\n   *     $urlRouter.listen();\n   *     $urlRouter.sync();\n   *   });\n   * });\n   * ```\n   *\n   * @param defer Indicates whether to defer location change interception. Passing\n   *        no parameter is equivalent to `true`.\n   */\n  deferIntercept(defer) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  };\n}\n\nexport class UrlRouter {\n  /** @hidden */\n  private location: string;\n  /** @hidden */\n  private listener: Function;\n  /** @hidden */\n  private urlRouterProvider: UrlRouterProvider;\n\n\n  /** @hidden */\n  constructor(urlRouterProvider: UrlRouterProvider) {\n    this.urlRouterProvider = urlRouterProvider;\n    bindFunctions(UrlRouter.prototype, this, this);\n  }\n\n  /**\n   * Checks the current URL for a matching rule\n   *\n   * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n   * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n   * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n   * with the transition by calling `$urlRouter.sync()`.\n   *\n   * @example\n   * ```js\n   *\n   * angular.module('app', ['ui.router'])\n   *   .run(function($rootScope, $urlRouter) {\n   *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n   *       // Halt state change from even starting\n   *       evt.preventDefault();\n   *       // Perform custom logic\n   *       var meetsRequirement = ...\n   *       // Continue with the update and state transition if logic allows\n   *       if (meetsRequirement) $urlRouter.sync();\n   *     });\n   * });\n   * ```\n   */\n  sync() {\n    update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n  }\n\n  /**\n   * Starts listening for URL changes\n   *\n   * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n   * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\n   */\n  listen(): Function {\n    return this.listener = this.listener || $location.onChange(evt => update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn, evt));\n  }\n\n  /**\n   * Internal API.\n   */\n  update(read?) {\n    if (read) {\n      this.location = $location.url();\n      return;\n    }\n    if ($location.url() === this.location) return;\n\n    $location.url(this.location);\n    $location.replace();\n  }\n\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n  push(urlMatcher: UrlMatcher, params: StateParams, options: { replace?: (string|boolean) }) {\n    $location.url(urlMatcher.format(params || {}));\n    if (options && options.replace) $location.replace();\n  }\n\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * @example\n   * ```js\n   *\n   * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n   *   person: \"bob\"\n   * });\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params: any, options: { absolute: boolean }): string {\n    if (!urlMatcher.validates(params)) return null;\n\n    let url = urlMatcher.format(params);\n    options = options || { absolute: false };\n\n    let cfg = services.locationConfig;\n    let isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = \"#\" + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute);\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    let slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n    port = <any> (port === 80 || port === 443 ? '' : ':' + port);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlRouter.ts\n **/","/** @module state */ /** for typedoc */\nimport {isObject} from \"../common/predicates\";\nimport {bindFunctions} from \"../common/common\";\nimport {BuilderFunction} from \"./stateBuilder\";\nimport {StateRegistry} from \"./stateRegistry\";\nimport {State} from \"./stateObject\"; // TS4053\n\n/**\n * @ngdoc object\n * @name ui.router.state.$stateProvider\n *\n * @requires ui.router.router.$urlRouterProvider\n * @requires ui.router.util.$urlMatcherFactoryProvider\n *\n * @description\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\nexport class StateProvider {\n  invalidCallbacks: Function[] = [];\n  constructor(private stateRegistry: StateRegistry) {\n    bindFunctions(StateProvider.prototype, this, this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#decorator\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Allows you to extend (carefully) or override (at your own peril) the\n   * `stateBuilder` object used internally by `$stateProvider`. This can be used\n   * to add custom functionality to ui-router, for example inferring templateUrl\n   * based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new\n   * properties within the state's internal definition. There is currently no clear\n   * use-case for this beyond accessing internal states (i.e. $state.$current),\n   * however, expect this to become increasingly relevant as we introduce additional\n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of\n   * execution of the builder functions in non-deterministic. Builder functions\n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to\n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view\n   *   name (i.e. \"viewName@stateName\") and each value is the config object\n   *   (template, controller) for the view. Even when you don't use the views object\n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template\n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state,\n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state.\n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that\n   *   would pass a `$state.includes()` test.\n   *\n   * @example\n   * <pre>\n   * // Override the internal 'views' builder with a function that takes the state\n   * // definition, and a reference to the internal function being overridden:\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   let result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     let autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * $state.go('home');\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * </pre>\n   *\n   * @param {string} name The name of the builder function to decorate.\n   * @param {object} func A function that is responsible for decorating the original\n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n  decorator(name: string, func: BuilderFunction) {\n    return this.stateRegistry.decorator(name, func) || this;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#state\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Registers a state configuration under a given state name. The stateConfig object\n   * has the following acceptable properties.\n   *\n   * <a id='template'></a>\n   *\n   * - **`template`** - {string|function=} - html template as a string or a function that returns\n   *   an html template as a string which should be used by the uiView directives. This property\n   *   takes precedence over templateUrl.\n   *\n   *   If `template` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateUrl'></a>\n   *\n   * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html\n   *   template that should be used by uiView.\n   *\n   *   If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateProvider'></a>\n   *\n   * - **`templateProvider`** - {function=} - Provider function that returns HTML content\n   *   string.\n   *\n   * <a id='controller'></a>\n   *\n   * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly\n   *   related scope or the name of a registered controller if passed as a string.\n   *\n   * <a id='controllerProvider'></a>\n   *\n   * - **`controllerProvider`** - {function=} - Injectable provider function that returns\n   *   the actual controller or string.\n   *\n   * <a id='controllerAs'></a>\n   *\n   * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be\n   *   published to scope under the controllerAs name.\n   *\n   * <a id='resolve'></a>\n   *\n   * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which\n   *   should be injected into the controller. If any of these dependencies are promises,\n   *   the router will wait for them all to be resolved or one to be rejected before the\n   *   controller is instantiated. If all the promises are resolved successfully, the values\n   *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any\n   *   of the promises are rejected the $stateChangeError event is fired. The map object is:\n   *\n   *   - key - {string}: name of dependency to be injected into controller\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,\n   *     it is injected and return value it treated as dependency. If result is a promise, it is\n   *     resolved before its value is injected into controller.\n   *\n   * <a id='url'></a>\n   *\n   * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or\n   *   transitioned to, the `$stateParams` service will be populated with any\n   *   parameters that were passed.\n   *\n   * <a id='params'></a>\n   *\n   * - **`params`** - {object=} - An array of parameter names or regular expressions. Only\n   *   use this within a state if you are not using url. Otherwise you can specify your\n   *   parameters within the url. When a state is navigated or transitioned to, the\n   *   $stateParams service will be populated with any parameters that were passed.\n   *\n   * <a id='views'></a>\n   *\n   * - **`views`** - {object=} - Use the views property to set up multiple views or to target views\n   *   manually/explicitly.\n   *\n   * <a id='abstract'></a>\n   *\n   * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,\n   *   but can provide inherited properties to its common children states.\n   *\n   * <a id='onEnter'></a>\n   *\n   * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way\n   *   to trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='onExit'></a>\n   *\n   * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to\n   *   trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='reloadOnSearch'></a>\n   *\n   * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()).\n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\n   *\n   * <a id='data'></a>\n   *\n   * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.\n   *\n   * @example\n   * <pre>\n   * // Some state name examples\n   *\n   * // stateName can be a single top-level name (must be unique).\n   * $stateProvider.state(\"home\", {});\n   *\n   * // Or it can be a nested state name. This state is a child of the\n   * // above \"home\" state.\n   * $stateProvider.state(\"home.newest\", {});\n   *\n   * // Nest states as deeply as needed.\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n   *\n   * // state() returns $stateProvider, so you can chain state declarations.\n   * $stateProvider\n   *   .state(\"home\", {})\n   *   .state(\"about\", {})\n   *   .state(\"contacts\", {});\n   * </pre>\n   *\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n   * @param {object} definition State configuration object.\n   */\n  state(name, definition) {\n    if (isObject(name)) {\n      definition = name;\n    } else {\n      definition.name = name;\n    }\n    this.stateRegistry.register(definition);\n    return this;\n  }\n\n  /**\n   * Registers an invalid state handler\n   *\n   * Registers a function to be injected and invoked when [[StateService.transitionTo]] has been called with an invalid\n   * state reference parameter\n   *\n   * This function can be injected with one some special values:\n   * - **`$to$`**: TargetState\n   * - **`$from$`**: TargetState\n   *\n   * Note: This API is subject to change.\n   * Replacement of dependency injection support with some alternative is likely.\n   *\n   * @param {function} callback\n   *   The function which will be injected and invoked, when a matching transition is started.\n   *   The function may optionally return a {TargetState} or a Promise for a TargetState.  If one\n   *   is returned, it is treated as a redirect.\n   */\n\n  onInvalid(callback: Function) {\n    this.invalidCallbacks.push(callback);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/state.ts\n **/","/** @module transition */ /** for typedoc */\nimport {\n    IHookRegistry, TransitionOptions, HookMatchCriteria, HookRegOptions,\n    TransitionStateHookFn, TransitionHookFn\n} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {HookRegistry} from \"./hookRegistry\";\nimport {TargetState} from \"../state/targetState\";\nimport {PathNode} from \"../path/node\";\nimport {IEventHook} from \"./interface\";\nimport {ViewService} from \"../view/view\";\nimport {eagerResolvePath, lazyResolveState} from \"../hooks/resolve\";\nimport {loadEnteringViews, activateViews} from \"../hooks/views\";\nimport {updateUrl} from \"../hooks/url\";\nimport {redirectToHook} from \"../hooks/redirectTo\";\nimport {onExitHook, onRetainHook, onEnterHook} from \"../hooks/onEnterExitRetain\";\nimport {UIRouter} from \"../router\";\nimport {val} from \"../common/hof\";\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location    : true,\n  relative    : null,\n  inherit     : false,\n  notify      : true,\n  reload      : false,\n  custom      : {},\n  current     : () => null\n};\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nexport class TransitionService implements IHookRegistry {\n  /** @hidden */\n  public $view: ViewService;\n\n  /**\n   * This object has hook de-registration functions.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @hidden\n   */\n  _deregisterHookFns: {\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateUrl: Function;\n    redirectTo: Function;\n  };\n\n  constructor(private _router: UIRouter) {\n    this.$view = _router.viewService;\n    HookRegistry.mixin(new HookRegistry(), this);\n    this._deregisterHookFns = <any> {};\n    this.registerTransitionHooks();\n  }\n\n  /** @hidden */\n  private registerTransitionHooks() {\n    let fns = this._deregisterHookFns;\n\n    // Wire up redirectTo hook\n    fns.redirectTo    = this.onStart({to: (state) => !!state.redirectTo}, redirectToHook);\n    \n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit        = this.onExit  ({exiting: state => !!state.onExit},     onExitHook);\n    fns.onRetain      = this.onRetain({retained: state => !!state.onRetain},  onRetainHook);\n    fns.onEnter       = this.onEnter ({entering: state => !!state.onEnter},   onEnterHook);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve  = this.onStart({}, eagerResolvePath, {priority: 1000});\n    fns.lazyResolve   = this.onEnter({ entering: val(true) }, lazyResolveState, {priority: 1000});\n\n    // Wire up the View management hooks\n    fns.loadViews     = this.onStart({}, loadEnteringViews);\n    fns.activateViews = this.onSuccess({}, activateViews);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl     = this.onSuccess({}, updateUrl, {priority: 9999});\n  }\n\n  /** @inheritdoc */\n  onBefore (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onStart (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onExit (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onRetain (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onEnter (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onFinish (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onSuccess (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onError (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n\n\n  /** @hidden */\n  getHooks  : (hookName: string) => IEventHook[];\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionService.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {noop} from \"../common/common\";\nimport {Transition} from \"../transition/transition\";\nimport {State} from \"../state/stateObject\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {TransitionStateHookFn, TransitionHookFn} from \"../transition/interface\";\n\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath);`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nexport const eagerResolvePath: TransitionHookFn = (trans: Transition) =>\n    new ResolveContext(trans.treeChanges().to)\n        .resolvePath(\"EAGER\", trans)\n        .then(noop);\n\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nexport const lazyResolveState: TransitionStateHookFn = (trans: Transition, state: State) =>\n    new ResolveContext(trans.treeChanges().to)\n        .subContext(state)\n        .resolvePath(\"LAZY\", trans)\n        .then(noop);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/resolve.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {noop} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {Transition} from \"../transition/transition\";\nimport {ViewService} from \"../view/view\";\nimport {ViewConfig} from \"../view/interface\";\n\n\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nexport function loadEnteringViews(transition) {\n  let enteringViews = transition.views(\"entering\");\n  if (!enteringViews.length) return;\n  return services.$q.all(enteringViews.map(view => view.load())).then(noop);\n}\n\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nexport function activateViews(transition: Transition) {\n  let enteringViews = transition.views(\"entering\");\n  let exitingViews = transition.views(\"exiting\");\n  if (!enteringViews.length && !exitingViews.length) return;\n\n  let $view: ViewService = transition.router.viewService;\n\n  exitingViews.forEach((vc: ViewConfig) => $view.deactivateViewConfig(vc));\n  enteringViews.forEach((vc: ViewConfig) => $view.activateViewConfig(vc));\n\n  $view.sync();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/views.ts\n **/","/** @module hooks */ /** */\nimport {UrlRouter} from \"../url/urlRouter\";\nimport {StateService} from \"../state/stateService\";\nimport {Transition} from \"../transition/transition\";\n\n/** \n * A [[TransitionHookFn]] which updates the URL after a successful transition\n * \n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nexport function updateUrl(transition: Transition) {\n  let options = transition.options();\n  let $state: StateService = transition.router.stateService;\n  let $urlRouter: UrlRouter = transition.router.urlRouter;\n\n  if (options.location && $state.$current.navigable) {\n    var urlOptions = {replace: options.location === 'replace'};\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/url.ts\n **/","/** @module hooks */ /** */\nimport {isString, isFunction} from \"../common/predicates\"\nimport {Transition} from \"../transition/transition\";\nimport {services} from \"../common/coreservices\";\nimport {TargetState} from \"../state/targetState\";\n\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n * \n * See [[StateDeclaration.redirectTo]]\n */\nexport const redirectToHook = (trans: Transition) => {\n  let redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  function handleResult(result) {\n    let $state = trans.router.stateService;\n\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any> result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/redirectTo.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {TransitionStateHookFn} from \"../transition/interface\";\nimport {State} from \"../state/stateObject\";\nimport {Transition} from \"../transition/transition\";\n\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n    return (transition: Transition, state: State) =>\n        state[hookName](transition, state);\n}\n\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n */\nexport const onExitHook: TransitionStateHookFn      = makeEnterExitRetainHook('onExit');\n\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state is being exited, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n */\nexport const onRetainHook: TransitionStateHookFn    = makeEnterExitRetainHook('onRetain');\n\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being exited, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n */\nexport const onEnterHook: TransitionStateHookFn     = makeEnterExitRetainHook('onEnter');\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/onEnterExitRetain.ts\n **/","/** @module view */ /** for typedoc */\nimport {equals, applyPairs, removeFrom, TypedMap} from \"../common/common\";\nimport {curry, prop} from \"../common/hof\";\nimport {isString, isArray} from \"../common/predicates\";\nimport {trace} from \"../common/trace\";\nimport {PathNode} from \"../path/node\";\n\nimport {ActiveUIView, ViewContext, ViewConfig} from \"./interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nconst match = (obj1, ...keys) =>\n    (obj2) => keys.reduce((memo, key) => memo && obj1[key] === obj2[key], true);\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig|ViewConfig[];\n\n/**\n * The View service\n */\nexport class ViewService {\n  private uiViews: ActiveUIView[] = [];\n  private viewConfigs: ViewConfig[] = [];\n  private _rootContext;\n  private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n\n  constructor() { }\n\n  rootContext(context) {\n    return this._rootContext = context || this._rootContext;\n  };\n\n  viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    let cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n    let cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n  \n  /**\n   * De-registers a ViewConfig.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n    removeFrom(this.viewConfigs, viewConfig);\n  };\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"-> Registering\", <any> viewConfig);\n    this.viewConfigs.push(viewConfig);\n  };\n\n  sync = () => {\n    let uiViewsByFqn: TypedMap<ActiveUIView> =\n        this.uiViews.map(uiv => [uiv.fqn, uiv]).reduce(applyPairs, <any> {});\n\n    /**\n     * Given a ui-view and a ViewConfig, determines if they \"match\".\n     *\n     * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n     * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n     *\n     * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n     * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n     *\n     * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n     *\n     * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n     * - the ui-view's name matches the ViewConfig's target name\n     * - the ui-view's context matches the ViewConfig's anchor\n     *\n     * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n     * - There exists a parent ui-view where:\n     *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n     *    - the parent ui-view's context matches the ViewConfig's anchor\n     * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n     *\n     * Example:\n     *\n     * DOM:\n     * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n     *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n     *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n     *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n     *       </div>\n     *     </div>\n     *   </div>\n     * </div>\n     *\n     * uiViews: [\n     *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n     *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n     *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n     *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n     * ]\n     *\n     * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n     *\n     * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n     * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n     * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n     * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n     *\n     * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n     * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n     * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n     *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n     *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n     * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n     *   the tail of the ui-view's fqn \"default.bar\"\n     */\n    const matches = (uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n      // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n      if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n      // Split names apart from both viewConfig and uiView into segments\n      let vc = viewConfig.viewDecl;\n      let vcSegments = vc.$uiViewName.split(\".\");\n      let uivSegments = uiView.fqn.split(\".\");\n\n      // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n      // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n      if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n        return false;\n\n      // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n      // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n      let negOffset = (1 - vcSegments.length) || undefined;\n      let fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n      let uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n      return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n    };\n\n    // Return the number of dots in the fully qualified name\n    function uiViewDepth(uiView: ActiveUIView) {\n      return uiView.fqn.split(\".\").length;\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context, count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = uiView => {\n      let matchingConfigs = this.viewConfigs.filter(matches(uiView));\n      if (matchingConfigs.length > 1)\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      return [uiView, matchingConfigs[0]];\n    };\n\n    const configureUIView = ([uiView, viewConfig]) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this.uiViews.indexOf(uiView) !== -1)\n        uiView.configUpdated(viewConfig);\n    };\n\n    this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n  };\n\n  /**\n   * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n   * be updated with a template, controller, and local variables.\n   *\n   * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n   * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n   *                   of the view.\n   * @return {Function} Returns a de-registration function used when the view is destroyed.\n   */\n  registerUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n    let uiViews = this.uiViews;\n    const fqnMatches = uiv => uiv.fqn === uiView.fqn;\n    if (uiViews.filter(fqnMatches).length)\n      trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      let idx = uiViews.indexOf(uiView);\n      if (idx <= 0) {\n        trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  };\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this.uiViews.map(prop(\"fqn\"));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this.uiViews.filter(prop(\"$config\")).map(prop(\"name\"));\n  }\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUIViewTarget(context: ViewContext, rawViewName = \"\") {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    let viewAtContext: string[] = rawViewName.split(\"@\");\n    let uiViewName = viewAtContext[0] || \"$default\";  // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : \"^\";    // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    let relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = \"\"; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    let relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      let anchor = uiViewContextAnchor.split(\".\").reduce(((anchor, x) => anchor.parent), context);\n      uiViewContextAnchor = anchor.name;\n    }\n\n    return {uiViewName, uiViewContextAnchor};\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./view/view.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {State} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateQueueManager} from \"./stateQueueManager\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {StateDeclaration} from \"./interface\";\nimport {BuilderFunction} from \"./stateBuilder\";\nimport {StateOrName} from \"./interface\";\n\nexport class StateRegistry {\n  private _root: State;\n  private states: { [key: string]: State } = {};\n\n  matcher: StateMatcher;\n  private builder: StateBuilder;\n  stateQueue: StateQueueManager;\n\n  constructor(urlMatcherFactory: UrlMatcherFactory, urlRouterProvider) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(this.states, this.builder, urlRouterProvider);\n\n    let rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash', dynamic: true }\n      },\n      abstract: true\n    };\n\n    let _root = this._root = this.stateQueue.register(rootStateDef);\n    _root.navigable = null;\n  }\n\n  root() {\n    return this._root;\n  }\n\n  register(stateDefinition: StateDeclaration) {\n    return this.stateQueue.register(stateDefinition);\n  }\n\n  get(): StateDeclaration[];\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0) \n      return <StateDeclaration[]> Object.keys(this.states).map(name => this.states[name].self);\n    let found = this.matcher.find(stateOrName, base);\n    return found && found.self || null;\n  }\n\n  decorator(name: string, func: BuilderFunction) {\n    return this.builder.builder(name, func);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateRegistry.ts\n **/","/** @module state */ /** for typedoc */\nimport {isString} from \"../common/predicates\";\nimport {StateOrName} from \"./interface\";\nimport {State} from \"./stateObject\";\n\nexport class StateMatcher {\n  constructor (private _states: { [key: string]: State }) { }\n  \n  isRelative(stateName: string) {\n    stateName = stateName || \"\";\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n\n  find(stateOrName: StateOrName, base?: StateOrName): State {\n    if (!stateOrName && stateOrName !== \"\") return undefined;\n    let isStr = isString(stateOrName);\n    let name: string = isStr ? stateOrName : (<any>stateOrName).name;\n\n    if (this.isRelative(name)) name = this.resolvePath(name, base);\n    let state = this._states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    }\n    return undefined;\n  }\n\n  resolvePath(name: string, base: StateOrName) {\n    if (!base) throw new Error(`No reference point given for path '${name}'`);\n    \n    let baseState: State = this.find(base);\n\n    let splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\n    for (; i < pathLength; i++) {\n      if (splitName[i] === \"\" && i === 0) {\n        current = baseState;\n        continue;\n      }\n      if (splitName[i] === \"^\") {\n        if (!current.parent) throw new Error(`Path '${name}' not valid for state '${baseState.name}'`);\n        current = current.parent;\n        continue;\n      }\n      break;\n    }\n    let relName = splitName.slice(i).join(\".\");\n    return current.name + (current.name && relName ? \".\" : \"\") + relName;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateMatcher.ts\n **/","/** @module state */ /** for typedoc */\nimport {map, omit, noop, extend, inherit, values, applyPairs, tail} from \"../common/common\";\nimport {isDefined, isFunction, isString, isArray} from \"../common/predicates\";\nimport {stringify} from \"../common/strings\";\nimport {prop, pattern, is, pipe, val} from \"../common/hof\";\nimport {StateDeclaration} from \"./interface\";\n\nimport {State} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {Param} from \"../params/param\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {services} from \"../common/coreservices\";\nimport {ResolvePolicy} from \"../resolve/interface\";\n\nconst parseUrl = (url: string): any => {\n  if (!isString(url)) return false;\n  let root = url.charAt(0) === '^';\n  return { val: root ? url.substring(1) : url, root };\n};\n\nexport type BuilderFunction = (state: State, parent?) => any;\n\ninterface Builders {\n  [key: string]: BuilderFunction[];\n\n  parent: BuilderFunction[];\n  data: BuilderFunction[];\n  url: BuilderFunction[];\n  navigable: BuilderFunction[];\n  params: BuilderFunction[];\n  views: BuilderFunction[];\n  path: BuilderFunction[];\n  includes: BuilderFunction[];\n  resolvables: BuilderFunction[];\n}\n\n\nfunction selfBuilder(state: State) {\n  state.self.$$state = () => state;\n  return state.self;\n}\n\nfunction dataBuilder(state: State) {\n  if (state.parent && state.parent.data) {\n    state.data = state.self.data = inherit(state.parent.data, state.data);\n  }\n  return state.data;\n}\n\nconst getUrlBuilder = ($urlMatcherFactoryProvider, root) =>\nfunction urlBuilder(state: State) {\n  let stateDec: StateDeclaration = <any> state;\n  const parsed = parseUrl(stateDec.url), parent = state.parent;\n  const url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n    params: state.params || {},\n    paramMap: function (paramConfig, isSearch) {\n      if (stateDec.reloadOnSearch === false && isSearch) paramConfig = extend(paramConfig || {}, {dynamic: true});\n      return paramConfig;\n    }\n  });\n\n  if (!url) return null;\n  if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error(`Invalid url '${url}' in state '${state}'`);\n  return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(<UrlMatcher> url);\n};\n\nconst getNavigableBuilder = (isRoot) =>\nfunction navigableBuilder(state: State) {\n  return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n};\n\nfunction paramsBuilder(state: State): { [key: string]: Param } {\n  const makeConfigParam = (config: any, id: string) => Param.fromConfig(id, null, config);\n  let urlParams: Param[] = (state.url && state.url.parameters({inherit: false})) || [];\n  let nonUrlParams: Param[] = values(map(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n  return urlParams.concat(nonUrlParams).map(p => [p.id, p]).reduce(applyPairs, {});\n}\n\nfunction pathBuilder(state: State) {\n  return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n}\n\nfunction includesBuilder(state: State) {\n  let includes = state.parent ? extend({}, state.parent.includes) : {};\n  includes[state.name] = true;\n  return includes;\n}\n\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nexport function resolvablesBuilder(state: State): Resolvable[] {\n  /** convert a resolve: {} object to an array of tuples */\n  const obj2Tuples        = obj => Object.keys(obj || {}).map(token => ({token, val: obj[token], deps: undefined}));\n  /** fetch DI annotations from a function or ng1-style array */\n  const annotate          = fn  => fn.$inject || services.$injector.annotate(fn, services.$injector.strictDi);\n  /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n  const isResolveLiteral  = obj => !!(obj.token && obj.resolveFn);\n  /** true if the object looks like a provide literal, or a ng2 Provider */\n  const isLikeNg2Provider = obj => !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n  /** true if the object looks like a tuple from obj2Tuples */\n  const isTupleFromObj    = obj => !!(obj && obj.val && (isString(obj.val) || isArray(obj.val)  || isFunction(obj.val)));\n  /** extracts the token from a Provider or provide literal */\n  const token             = p => p.provide || p.token;\n\n  /** Given a literal resolve or provider object, returns a Resolvable */\n  const literal2Resolvable = pattern([\n    [prop('resolveFn'),   p => new Resolvable(token(p), p.resolveFn, p.deps, p.policy)],\n    [prop('useFactory'),  p => new Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy)],\n    [prop('useClass'),    p => new Resolvable(token(p), () => new (<any>p.useClass)(), [], p.policy)],\n    [prop('useValue'),    p => new Resolvable(token(p), () => p.useValue, [], p.policy, p.useValue)],\n    [prop('useExisting'), p => new Resolvable(token(p), (x) => x, [p.useExisting], p.policy)],\n  ]);\n\n  const tuple2Resolvable = pattern([\n    [pipe(prop(\"val\"), isString),   tuple => new Resolvable(tuple.token, x => x, [ tuple.val ], tuple.policy)],\n    [pipe(prop(\"val\"), isArray),    tuple => new Resolvable(tuple.token, tail(<any[]> tuple.val), tuple.val.slice(0, -1), tuple.policy)],\n    [pipe(prop(\"val\"), isFunction), tuple => new Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy)],\n  ]);\n\n  const item2Resolvable = <(any) => Resolvable> pattern([\n    [is(Resolvable),                (r: Resolvable) => r],\n    [isResolveLiteral,              literal2Resolvable],\n    [isLikeNg2Provider,             literal2Resolvable],\n    [isTupleFromObj,                tuple2Resolvable],\n    [val(true),                     tuple => { throw new Error(\"Invalid resolve value: \" + stringify(tuple)) }]\n  ]);\n\n  // If resolveBlock is already an array, use it as-is.\n  // Otherwise, assume it's an object and convert to an Array of tuples\n  let decl = state.resolve;\n  let items: any[] = isArray(decl) ? decl : obj2Tuples(decl);\n  return items.map(item2Resolvable);\n}\n\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[State]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[State]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n * using the [[builder]] method.\n */\nexport class StateBuilder {\n  /** An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build */\n  private builders: Builders;\n\n  constructor(private matcher: StateMatcher, $urlMatcherFactoryProvider: UrlMatcherFactory) {\n    let self = this;\n\n    const root = () => matcher.find(\"\");\n    const isRoot = (state) => state.name === \"\";\n\n    function parentBuilder(state: State) {\n      if (isRoot(state)) return null;\n      return matcher.find(self.parentName(state)) || root();\n    }\n\n    this.builders = {\n      self: [ selfBuilder ],\n      parent: [ parentBuilder ],\n      data: [ dataBuilder ],\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: [ getUrlBuilder($urlMatcherFactoryProvider, root) ],\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: [ getNavigableBuilder(isRoot) ],\n      params: [ paramsBuilder ],\n      // Each framework-specific ui-router implementation should define its own `views` builder\n      // e.g., src/ng1/statebuilders/views.ts\n      views: [],\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: [ pathBuilder ],\n      // Speed up $state.includes() as it's used a lot\n      includes: [ includesBuilder ],\n      resolvables: [ resolvablesBuilder ]\n    };\n  }\n\n  /**\n   * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n   * More than one BuilderFunction can be registered for a given property.\n   *\n   * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n   *\n   * @param name The name of the State property being registered for.\n   * @param fn The BuilderFunction which will be used to build the State property\n   * @returns a function which deregisters the BuilderFunction\n   */\n  builder(name: string, fn: BuilderFunction) {\n    let builders = this.builders;\n    let array = builders[name] || [];\n    // Backwards compat: if only one builder exists, return it, else return whole arary.\n    if (isString(name) && !isDefined(fn)) return array.length > 1 ? array : array[0];\n    if (!isString(name) || !isFunction(fn)) return;\n\n    builders[name] = array;\n    builders[name].push(fn);\n    return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n  }\n\n  /**\n   * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n   * properties and API built.\n   *\n   * @param state an uninitialized State object\n   * @returns the built State object\n   */\n  build(state: State): State {\n    let {matcher, builders} = this;\n    let parent = this.parentName(state);\n    if (parent && !matcher.find(parent)) return null;\n\n    for (let key in builders) {\n      if (!builders.hasOwnProperty(key)) continue;\n      let chain = builders[key].reduce((parentFn, step: BuilderFunction) => (_state) => step(_state, parentFn), noop);\n      state[key] = chain(state);\n    }\n    return state;\n  }\n\n  parentName(state) {\n    let name = state.name || \"\";\n    if (name.indexOf('.') !== -1) return name.substring(0, name.lastIndexOf('.'));\n    if (!state.parent) return \"\";\n    return isString(state.parent) ? state.parent : state.parent.name;\n  }\n\n  name(state) {\n    let name = state.name;\n    if (name.indexOf('.') !== -1 || !state.parent) return name;\n\n    let parentName = isString(state.parent) ? state.parent : state.parent.name;\n    return parentName ? parentName + \".\" + name : name;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateBuilder.ts\n **/","/** @module state */ /** for typedoc */\nimport {extend, inherit, pluck, equalForKeys, abstractKey} from \"../common/common\";\nimport {isString} from \"../common/predicates\";\nimport {StateDeclaration} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateService} from \"./stateService\";\n\nexport class StateQueueManager {\n  queue: State[];\n  private $state: StateService;\n\n  constructor(\n      public states: { [key: string]: State; },\n      public builder: StateBuilder,\n      public $urlRouterProvider) {\n    this.queue = [];\n  }\n\n  register(config: StateDeclaration) {\n    let {states, queue, $state} = this;\n    // Wrap a new object around the state so we can store our private details easily.\n    // @TODO: state = new State(extend({}, config, { ... }))\n    let state = inherit(new State(), extend({}, config, {\n      self: config,\n      resolve: config.resolve || [],\n      toString: () => config.name\n    }));\n\n    if (!isString(state.name)) throw new Error(\"State must have a valid name\");\n    if (states.hasOwnProperty(state.name) || pluck(queue, 'name').indexOf(state.name) !== -1)\n      throw new Error(`State '${state.name}' is already defined`);\n\n    queue.push(state);\n\n    if (this.$state) {\n      this.flush($state);\n    }\n    return state;\n  }\n\n  flush($state) {\n    let {queue, states, builder} = this;\n    let result, state, orphans = [], orphanIdx, previousQueueLength = {};\n\n    while (queue.length > 0) {\n      state = queue.shift();\n      result = builder.build(state);\n      orphanIdx = orphans.indexOf(state);\n\n      if (result) {\n        if (states.hasOwnProperty(state.name))\n          throw new Error(`State '${name}' is already defined`);\n        states[state.name] = state;\n        this.attachRoute($state, state);\n        if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n        continue;\n      }\n\n      let prev = previousQueueLength[state.name];\n      previousQueueLength[state.name] = queue.length;\n      if (orphanIdx >= 0 && prev === queue.length) {\n        // Wait until two consecutive iterations where no additional states were dequeued successfully.\n        // throw new Error(`Cannot register orphaned state '${state.name}'`);\n        return states;\n      } else if (orphanIdx < 0) {\n        orphans.push(state);\n      }\n\n      queue.push(state);\n    }\n    return states;\n  }\n\n  autoFlush($state) {\n    this.$state = $state;\n    this.flush($state);\n  }\n\n  attachRoute($state, state) {\n    let {$urlRouterProvider} = this;\n    if (state[abstractKey] || !state.url) return;\n\n    $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n      if ($state.$current.navigable !== state || !equalForKeys($match, $stateParams)) {\n        $state.transitionTo(state, $match, { inherit: true, location: false });\n      }\n    }]);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateQueueManager.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, _ViewDeclaration} from \"./interface\";\nimport {extend, defaults, values, find} from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {Param} from \"../params/param\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\nimport {Resolvable} from \"../resolve/resolvable\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:State\n *\n * @description\n * Definition object for states. Includes methods for manipulating the state heirarchy.\n *\n * @param {Object} config  A configuration object hash that includes the results of user-supplied\n *        values, as well as values from `StateBuilder`.\n *\n * @returns {Object}  Returns a new `State` object.\n */\nexport class State {\n\n  public parent: State;\n  public name: string;\n  public abstract: boolean;\n  public resolve: ({ [key: string]: (string|any[]|Function) }|any[]);\n  public resolvables: Resolvable[];\n  public resolvePolicy: any;\n  public url: UrlMatcher;\n  public params: { [key: string]: Param };\n  public views: { [key: string]: _ViewDeclaration; };\n  public self: StateDeclaration;\n  public navigable: State;\n  public path: State[];\n  public data: any;\n  public includes: { [name: string] : boolean };\n\n  constructor(config?: StateDeclaration) {\n    extend(this, config);\n    // Object.freeze(this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#is\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n   */\n  is(ref: State|StateDeclaration|string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#fqn\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the fully-qualified name of the state, based on its current position in the tree.\n   *\n   * @returns {string} Returns a dot-separated name of the state.\n   */\n  fqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    let name = this.parent.fqn();\n    return name ? name + \".\" + this.name : this.name;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#root\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the root node of this state's tree.\n   *\n   * @returns {State} The root of this state's tree.\n   */\n  root(): State {\n    return this.parent && this.parent.root() || this;\n  }\n\n  parameters(opts?): Param[] {\n    opts = defaults(opts, { inherit: true });\n    let inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n    return inherited.concat(values(this.params));\n  }\n\n  parameter(id: string, opts: any = {}): Param {\n    return (\n        this.url && this.url.parameter(id, opts) ||\n        find(values(this.params), propEq('id', id)) ||\n        opts.inherit && this.parent && this.parent.parameter(id)\n    );\n  }\n\n  toString() {\n    return this.fqn();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateObject.ts\n **/","/** @module state */ /** */\nimport {extend, defaults, silentRejection, silenceUncaughtInPromise} from \"../common/common\";\nimport {isDefined, isObject, isString} from \"../common/predicates\";\nimport {Queue} from \"../common/queue\";\nimport {services} from \"../common/coreservices\";\n\nimport {PathFactory} from \"../path/pathFactory\";\nimport {PathNode} from \"../path/node\";\n\nimport {TransitionOptions} from \"../transition/interface\";\nimport {defaultTransOpts} from \"../transition/transitionService\";\nimport {Rejection, RejectType} from \"../transition/rejectFactory\";\nimport {Transition} from \"../transition/transition\";\n\nimport {StateOrName, StateDeclaration, TransitionPromise} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {TargetState} from \"./targetState\";\n\nimport {RawParams} from \"../params/interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {Param} from \"../params/param\";\nimport {Glob} from \"../common/glob\";\nimport {equalForKeys} from \"../common/common\";\nimport {HrefOptions} from \"./interface\";\nimport {bindFunctions} from \"../common/common\";\nimport {Globals} from \"../globals\";\nimport {UIRouter} from \"../router\";\nimport {StateParams} from \"../params/stateParams\"; // for params() return type\n\nexport class StateService {\n  get transition()  { return this.router.globals.transition; }\n  get params()      { return this.router.globals.params; }\n  get current()     { return this.router.globals.current; }\n  get $current()    { return this.router.globals.$current; }\n\n  /** @hidden */\n  constructor(private router: UIRouter) {\n    let getters = ['current', '$current', 'params', 'transition'];\n    let boundFns = Object.keys(StateService.prototype).filter(key => getters.indexOf(key) === -1);\n    bindFunctions(StateService.prototype, this, this, boundFns);\n  }\n\n  /**\n   * Handler for when [[transitionTo]] is called with an invalid state.\n   *\n   * Invokes the [[onInvalid]] callbacks, in natural order.\n   * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n   * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n   *\n   * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n   */\n  private _handleInvalidTargetState(fromPath: PathNode[], $to$: TargetState) {\n    let globals = <Globals> this.router.globals;\n    const latestThing = () => globals.transitionHistory.peekTail();\n    let latest = latestThing();\n    let $from$ = PathFactory.makeTargetState(fromPath);\n    let callbackQueue = new Queue<Function>([].concat(this.router.stateProvider.invalidCallbacks));\n    let {$q, $injector} = services;\n\n    const invokeCallback = (callback: Function) => $q.when($injector.invoke(callback, null, { $to$, $from$ }));\n\n    const checkForRedirect = (result) => {\n      if (!(result instanceof TargetState)) {\n        return;\n      }\n      let target = <TargetState> result;\n      // Recreate the TargetState, in case the state is now defined.\n      target = this.target(target.identifier(), target.params(), target.options());\n\n      if (!target.valid()) return Rejection.invalid(target.error()).toPromise();\n      if (latestThing() !== latest) return Rejection.superseded().toPromise();\n\n      return this.transitionTo(target.identifier(), target.params(), target.options());\n    };\n\n    function invokeNextCallback() {\n      let nextCallback = callbackQueue.dequeue();\n      if (nextCallback === undefined) return Rejection.invalid($to$.error()).toPromise();\n      return invokeCallback(nextCallback).then(checkForRedirect).then(result => result || invokeNextCallback());\n    }\n\n    return invokeNextCallback();\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#reload\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n   * controllers reinstantiated, and events re-fired.\n   *\n   * @example\n   * <pre>\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     $state.reload();\n   *   }\n   * });\n   * </pre>\n   *\n   * `reload()` is just an alias for:\n   * <pre>\n   * $state.transitionTo($state.current, $stateParams, {\n   *   reload: true, inherit: false, notify: true\n   * });\n   * </pre>\n   *\n   * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n   * @example\n   * <pre>\n   * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n   * //and current state is 'contacts.detail.item'\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n   *     $state.reload('contact.detail');\n   *   }\n   * });\n   * </pre>\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  reload(reloadState: StateOrName): Promise<State> {\n    return this.transitionTo(this.current, this.params, {\n      reload: isDefined(reloadState) ? reloadState : true,\n      inherit: false,\n      notify: false\n    });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#go\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Convenience method for transitioning to a new state. `$state.go` calls\n   * `$state.transitionTo` internally but automatically sets options to\n   * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n   * This allows you to easily use an absolute or relative to path and specify\n   * only the parameters you'd like to update (while letting unspecified parameters\n   * inherit from the currently active ancestor states).\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.go('contact.detail');\n   *   };\n   * });\n   * </pre>\n   * <img src='../ngdoc_assets/StateGoExamples.png'/>\n   *\n   * @param {string} to Absolute state name or relative state path. Some examples:\n   *\n   * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n   * - `$state.go('^')` - will go to a parent state\n   * - `$state.go('^.sibling')` - will go to a sibling state\n   * - `$state.go('.child.grandchild')` - will go to grandchild state\n   *\n   * @param {object=} params A map of the parameters that will be sent to the state,\n   * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n   * defined parameters. This allows, for example, going to a sibling state that shares parameters\n   * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n   * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n   * will get you all current parameters, etc.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition.\n   *\n   * Possible success values:\n   *\n   * - $state.current\n   *\n   * <br/>Possible rejection values:\n   *\n   * - 'transition superseded' - when a newer transition has been started after this one\n   * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n   * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n   *   when a `$stateNotFound` `event.retry` promise errors.\n   * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n   * - *resolve error* - when an error has occurred with a `resolve`\n   *\n   */\n  go(to: StateOrName, params?: RawParams, options?: TransitionOptions): TransitionPromise {\n    let defautGoOpts = { relative: this.$current, inherit: true };\n    let transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n    return this.transitionTo(to, params, transOpts);\n  };\n\n  /** Factory method for creating a TargetState */\n  target(identifier: StateOrName, params?: ParamsOrArray, options: TransitionOptions = {}): TargetState {\n    // If we're reloading, find the state object to reload from\n    if (isObject(options.reload) && !(<any>options.reload).name)\n      throw new Error('Invalid reload state object');\n    let reg = this.router.stateRegistry;\n    options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(<any> options.reload, options.relative);\n\n    if (options.reload && !options.reloadState)\n      throw new Error(`No such reload state '${(isString(options.reload) ? options.reload : (<any>options.reload).name)}'`);\n\n    let stateDefinition = reg.matcher.find(identifier, options.relative);\n    return new TargetState(identifier, stateDefinition, params, options);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#transitionTo\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n   * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.transitionTo('contact.detail');\n   *   };\n   * });\n   * </pre>\n   *\n   * @param {string} to State name.\n   * @param {object=} toParams A map of the parameters that will be sent to the state,\n   * will populate $stateParams.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  transitionTo(to: StateOrName, toParams: RawParams = {}, options: TransitionOptions = {}): TransitionPromise {\n    let router = this.router;\n    let globals = <Globals> router.globals;\n    let transHistory = globals.transitionHistory;\n    options = defaults(options, defaultTransOpts);\n    options = extend(options, { current: transHistory.peekTail.bind(transHistory)});\n\n    let ref: TargetState = this.target(to, toParams, options);\n    let latestSuccess: Transition = globals.successfulTransitions.peekTail();\n    const rootPath = () => [ new PathNode(this.router.stateRegistry.root()) ];\n    let currentPath: PathNode[] = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n\n    if (!ref.exists())\n      return this._handleInvalidTargetState(currentPath, ref);\n\n    if (!ref.valid())\n      return <TransitionPromise> silentRejection(ref.error());\n\n    /**\n     * Special handling for Ignored, Aborted, and Redirected transitions\n     *\n     * The semantics for the transition.run() promise and the StateService.transitionTo()\n     * promise differ. For instance, the run() promise may be rejected because it was\n     * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n     * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n     * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n     */\n    const rejectedTransitionHandler = (transition) => (error) => {\n      if (error instanceof Rejection) {\n        if (error.type === RejectType.IGNORED) {\n          router.urlRouter.update();\n          return globals.current;\n        }\n\n        if (error.type === RejectType.SUPERSEDED && error.redirected && error.detail instanceof TargetState) {\n          let redirect: Transition = transition.redirect(error.detail);\n          return redirect.run().catch(rejectedTransitionHandler(redirect));\n        }\n\n        if (error.type === RejectType.ABORTED) {\n          router.urlRouter.update();\n          return services.$q.reject(error);\n        }\n      }\n\n      var errorHandler = this.defaultErrorHandler();\n      errorHandler(error);\n\n      return services.$q.reject(error);\n    };\n\n    let transition = this.router.transitionService.create(currentPath, ref);\n    let transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n    silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\n    // Return a promise for the transition, which also has the transition object on it.\n    return extend(transitionToPromise, { transition });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#is\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n   * but only checks for the full state name. If params is supplied then it will be\n   * tested for strict equality against the current active params object, so all params\n   * must match with none missing and no extras.\n   *\n   * @example\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // absolute name\n   * $state.is('contact.details.item'); // returns true\n   * $state.is(contactDetailItemStateObject); // returns true\n   *\n   * // relative name (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n   * to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   * test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it is the state.\n   */\n  is(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n    if (!isDefined(state)) return undefined;\n    if (this.$current !== state) return false;\n    return isDefined(params) && params !== null ? Param.equals(state.parameters(), this.params, params) : true;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#includes\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method to determine if the current active state is equal to or is the child of the\n   * state stateName. If any params are passed then they will be tested for a match as well.\n   * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n   *\n   * @example\n   * Partial and relative names\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // Using partial names\n   * $state.includes(\"contacts\"); // returns true\n   * $state.includes(\"contacts.details\"); // returns true\n   * $state.includes(\"contacts.details.item\"); // returns true\n   * $state.includes(\"contacts.list\"); // returns false\n   * $state.includes(\"about\"); // returns false\n   *\n   * // Using relative names (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n   * </pre>\n   *\n   * Basic globbing patterns\n   * <pre>\n   * $state.$current.name = 'contacts.details.item.url';\n   *\n   * $state.includes(\"*.details.*.*\"); // returns true\n   * $state.includes(\"*.details.**\"); // returns true\n   * $state.includes(\"**.item.**\"); // returns true\n   * $state.includes(\"*.details.item.url\"); // returns true\n   * $state.includes(\"*.details.*.url\"); // returns true\n   * $state.includes(\"*.details.*\"); // returns false\n   * $state.includes(\"item.**\"); // returns false\n   * </pre>\n   *\n   * @param {string} stateOrName A partial name, relative name, or glob pattern\n   * to be searched for within the current state name.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n   * that you'd like to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n   * .includes will test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it does include the state\n   */\n  includes(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let glob = isString(stateOrName) && Glob.fromString(<string> stateOrName);\n\n    if (glob) {\n      if (!glob.matches(this.$current.name)) return false;\n      stateOrName = this.$current.name;\n    }\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\n    if (!isDefined(state)) return undefined;\n    if (!isDefined(include[state.name])) return false;\n    // @TODO Replace with Param.equals() ?\n    return params ? equalForKeys(Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n  };\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#href\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A url generation method that returns the compiled url for the given state populated with the given params.\n   *\n   * @example\n   * <pre>\n   * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n   * @param {object=} params An object of parameter values to fill the state's required parameters.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n   *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n   *    ancestor with a valid url).\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns {string} compiled state url\n   */\n  href(stateOrName: StateOrName, params?: RawParams, options?: HrefOptions): string {\n    let defaultHrefOpts = {\n      lossy:    true,\n      inherit:  true,\n      absolute: false,\n      relative: this.$current\n    };\n    options = defaults(options, defaultHrefOpts);\n\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\n    if (!isDefined(state)) return null;\n    if (options.inherit) params = <any> this.params.$inherit(params || {}, this.$current, state);\n\n    let nav = (state && options.lossy) ? state.navigable : state;\n\n    if (!nav || nav.url === undefined || nav.url === null) {\n      return null;\n    }\n    return this.router.urlRouter.href(nav.url, Param.values(state.parameters(), params), {\n      absolute: options.absolute\n    });\n  };\n\n  /** @hidden */\n  private _defaultErrorHandler: ((_error) => void) = function $defaultErrorHandler($error$) {\n    if ($error$ instanceof Error && $error$.stack) {\n      console.error($error$.stack);\n    } else if ($error$ instanceof Rejection) {\n      console.error($error$);\n      if ($error$.detail && $error$.detail.stack)\n        console.error($error$.detail.stack);\n    } else {\n      console.error($error$);\n    }\n  };\n\n  /**\n   * Sets or gets the default [[transitionTo]] error handler.\n   *\n   * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n   * This includes errors caused by resolves and transition hooks.\n   *\n   * The built-in default error handler logs the error to the console.\n   *\n   * You can provide your own custom handler.\n   *\n   * @example\n   * ```js\n   *\n   * stateService.defaultErrorHandler(function() {\n   *   // Do not log transitionTo errors\n   * });\n   * ```\n   *\n   * @param handler a global error handler function\n   * @returns the current global error handler\n   */\n  defaultErrorHandler(handler?: (error) => void): (error) => void {\n    return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#get\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Returns the state configuration object for any specific state or all states.\n   *\n   * @param {string|Object=} stateOrName (absolute or relative) If provided, will only get the config for\n   * the requested state. If not provided, returns an array of ALL state configs.\n   * @param {string|object=} base When stateOrName is a relative state reference, the state will be retrieved relative to context.\n   * @returns {Object|Array} State configuration object or array of all objects.\n   */\n  get(): StateDeclaration[];\n  get(stateOrName: StateOrName): StateDeclaration;\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    let reg = this.router.stateRegistry;\n    if (arguments.length === 0) return reg.get();\n    return reg.get(stateOrName, base || this.$current);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateService.ts\n **/","/** @module core */ /** */\nimport {StateParams} from \"./params/stateParams\";\nimport {StateDeclaration} from \"./state/interface\";\nimport {State} from \"./state/stateObject\";\nimport {Transition} from \"./transition/transition\";\nimport {Queue} from \"./common/queue\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {copy} from \"./common/common\";\nimport {Observable} from \"rxjs/Rx\";\n\n/**\n * Global mutable state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nexport interface UIRouterGlobals {\n  /**\n   * Current parameter values\n   *\n   * The parameter values from the latest successful transition\n   */\n  params: StateParams;\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  current: StateDeclaration;\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  $current: State;\n  /**\n   * The current transition (in progress)\n   */\n  transition: Transition;\n}\n\n\n/**\n * Global mutable state\n */\nexport class Globals implements UIRouterGlobals {\n  params: StateParams = new StateParams();\n  current: StateDeclaration;\n  $current: State;\n  transition: Transition;\n  transitionHistory = new Queue<Transition>([], 1);\n  successfulTransitions = new Queue<Transition>([], 1);\n\n  constructor(transitionService: TransitionService) {\n    const beforeNewTransition = ($transition$: Transition) => {\n\n      this.transition = $transition$;\n      this.transitionHistory.enqueue($transition$);\n\n      const updateGlobalState = () => {\n        this.successfulTransitions.enqueue($transition$);\n        this.$current = $transition$.$to();\n        this.current = this.$current.self;\n        copy($transition$.params(), this.params);\n      };\n\n      $transition$.onSuccess({}, updateGlobalState, {priority: 10000});\n\n      const clearCurrentTransition = () => { if (this.transition === $transition$) this.transition = null; };\n\n      $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n\n    };\n\n    transitionService.onBefore({}, beforeNewTransition);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./globals.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, ancestors} from \"../common/common\";\n\nexport class StateParams {\n  constructor(params: Object = {}) {\n    extend(this, params);\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  $inherit(newParams, $current, $to) {\n    let parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\n    for (let i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = Object.keys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (let j in parentParams) {\n        if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = this[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/stateParams.ts\n **/","/**\n * This module contains code for State Parameters.\n *\n * See [[ParamDeclaration]]\n * @module params\n * @preferred doc\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./param\";\nexport * from \"./paramTypes\";\nexport * from \"./stateParams\";\nexport * from \"./type\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/module.ts\n **/","/** @module path */ /** for typedoc */\nexport * from \"./node\";\nexport * from \"./pathFactory\";\n\n\n/** WEBPACK FOOTER **\n ** ./path/module.ts\n **/","/** @module resolve */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./resolvable\";\nexport * from \"./resolveContext\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/module.ts\n **/","/** @module state */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./state\";\nexport * from \"./stateBuilder\";\nexport * from \"./stateObject\";\nexport * from \"./stateMatcher\";\nexport * from \"./stateQueueManager\";\nexport * from \"./stateRegistry\";\nexport * from \"./stateService\";\nexport * from \"./targetState\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/module.ts\n **/","/**\n * This module contains APIs related to a Transition.\n *\n * See [[Transition]], [[$transitions]]\n *\n * @module transition\n * @preferred\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./hookBuilder\";\nexport * from \"./hookRegistry\";\nexport * from \"./rejectFactory\";\nexport * from \"./transition\";\nexport * from \"./transitionHook\";\nexport * from \"./transitionService\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/module.ts\n **/","/** @module url */ /** for typedoc */\nexport * from \"./urlMatcher\";\nexport * from \"./urlMatcherConfig\";\nexport * from \"./urlMatcherFactory\";\nexport * from \"./urlRouter\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/module.ts\n **/","/** @module view */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./view\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./view/module.ts\n **/","/**\n * Naive, pure JS implementation of core ui-router services\n *\n * @module justjs\n */ /** */\nexport * from \"./core\";\nimport {services} from \"./common/coreservices\";\nimport {stringify} from \"./common/strings\";\nimport {isFunction, isArray, isObject, isInjectable} from \"./common/predicates\";\nimport {extend, assertPredicate} from \"./common/common\";\n\n/** $q-like promise api */\nservices.$q = (executor: (resolve, reject) => void) => new Promise(executor);\nservices.$q.when = (val) => Promise.resolve(val);\nservices.$q.reject = (val) => Promise.reject(val);\nservices.$q.defer = function() {\n  let deferred: any = {};\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n\n  return deferred;\n};\n\nservices.$q.all = function (promises: { [key: string]: Promise<any> } | Promise<any>[]) {\n  if (isArray(promises)) {\n    return Promise.all(promises);\n  }\n\n  if (isObject(promises)) {\n    // Convert promises map to promises array.\n    // When each promise resolves, map it to a tuple { key: key, val: val }\n    let objectToTuples = Object.keys(promises)\n        .map(key => promises[key].then(val => ({key, val})));\n\n    const tuplesToObject = values =>\n        values.reduce((acc, tuple) => { acc[tuple.key] = tuple.val; return acc; }, {});\n\n    // Then wait for all promises to resolve, and convert them back to an object\n    return services.$q.all(objectToTuples).then(tuplesToObject);\n  }\n};\n\n\n\n\n\n// angular1-like injector api\n\n// globally available injectables\nlet globals = { };\nservices.$injector = { };\n\nservices.$injector.get = name => globals[name];\nservices.$injector.has = (name) => services.$injector.get(name) != null;\nservices.$injector.invoke = function(fn, context?, locals?) {\n  let all = extend({}, globals, locals || {});\n  let params = services.$injector.annotate(fn);\n  let ensureExist = assertPredicate(key => all.hasOwnProperty(key), key => `Could not find Dependency Injection token: ${stringify(key)}`);\n  let args = params.filter(ensureExist).map(x => all[x]);\n  if (isFunction(fn)) return fn.apply(context, args);\n  return fn.slice(-1)[0].apply(context, args);\n};\n\nlet STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nlet ARGUMENT_NAMES = /([^\\s,]+)/g;\n// http://stackoverflow.com/questions/1007981\nservices.$injector.annotate = function(fn) {\n  if (!isInjectable(fn)) throw new Error(`Not an injectable function: ${fn}`);\n  if (fn && fn.$inject) return fn.$inject;\n  if (isArray(fn)) return fn.slice(0, -1);\n  let fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n  let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n  return result || [];\n};\n\nlet loc = <any> services.location;\n\nloc.hash = () => \"\";\nloc.path = () => location.hash.replace(/^#/, \"\");\nloc.search = () => location.search;\nloc.url = (url) => { if (url) location.hash = url; return loc.path(); };\nloc.replace = () => { console.log(new Error(\"not impl\")); };\nloc.onChange = (cb) => {\n  window.addEventListener(\"hashchange\", cb, false);\n};\n\nlet locCfg = <any> services.locationConfig;\n\nlocCfg.port = () => location.port;\nlocCfg.protocol = () => location.protocol;\nlocCfg.host = () => location.host;\nlocCfg.baseHref = () => \"\";\nlocCfg.html5Mode = () => false;\nlocCfg.hashPrefix = () => \"\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./justjs.ts\n **/","/**\n * # UI-Router for Angular 2\n *\n * For the quick start repository, please see http://github.com/ui-router/quickstart-ng2\n * \n * Getting started:\n * \n * - Use npm. Add a dependency on latest `ui-router-ng2`\n * - Import UI-Router classes directly from `\"ui-router-ng2\"`\n *\n * ```js\n * import {StateRegistry} from \"ui-router-ng2\";\n * ```\n *\n * - When defining a component, add the [[UIROUTER_DIRECTIVES]] to `directives:` array.\n * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n * - Create application states (as defined by [[Ng2StateDeclaration]]) which will fill in the viewports.\n * - Create a [[UIRouterConfig]], and register your states in the [[UIRouterConfig.configure]] function.\n *\n * ```js\n * import {UIRouter} from \"ui-router-ng2\";\n * import {INITIAL_STATES} from \"./app.states\";\n * @ Injectable()\n * export class MyUIRouterConfig {\n *   configure(uiRouter: UIRouter) {\n *     INITIAL_STATES.forEach(function(state) {\n *       uiRouter.stateRegistry.register(state));\n *     });\n *   }\n * }\n * ```\n *\n * - When bootstrapping: include the [[UIROUTER_PROVIDERS]] and define a provider for your [[UIRouterConfig]]\n *\n * ```js\n * import {provide} from \"@angular/core\";\n * import {bootstrap} from 'angular2/platform/browser';\n * import {UIRouterConfig, UIView, UIROUTER_PROVIDERS} from \"ui-router-ng2\";\n * import {MyUIRouterConfig} from \"./router.config\";\n *\n * bootstrap(UIView, [\n *     ...UIROUTER_PROVIDERS,\n *     provide(UIRouterConfig, { useClass: MyUIRouterConfig })\n * ]);\n * ```\n *\n * @preferred @module ng2\n */ /** */\nimport {Injector} from \"@angular/core\";\nimport {UIRouter} from \"../router\";\nimport {PathNode} from \"../path/node\";\nimport {StateRegistry} from \"../state/stateRegistry\";\nimport {StateService} from \"../state/stateService\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {UrlRouter} from \"../url/urlRouter\";\nimport {ViewService} from \"../view/view\";\nimport {UIView} from \"./directives/uiView\";\nimport {ng2ViewsBuilder, Ng2ViewConfig} from \"./statebuilders/views\";\nimport {Ng2ViewDeclaration} from \"./interface\";\nimport {UIRouterConfig} from \"./uiRouterConfig\";\nimport {Globals} from \"../globals\";\nimport {UIRouterLocation} from \"./location\";\nimport {services} from \"../common/coreservices\";\nimport {ProviderLike} from \"../state/interface\";\n\nlet uiRouterFactory = (routerConfig: UIRouterConfig, location: UIRouterLocation, injector: Injector) => {\n  services.$injector.get = injector.get.bind(injector);\n  let router = new UIRouter();\n\n  location.init();\n\n  router.viewService.viewConfigFactory(\"ng2\", (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config));\n  router.stateRegistry.decorator('views', ng2ViewsBuilder);\n\n  router.stateRegistry.stateQueue.autoFlush(router.stateService);\n\n  setTimeout(() => {\n    routerConfig.configure(router);\n\n    if (!router.urlRouterProvider.interceptDeferred) {\n      router.urlRouter.listen();\n      router.urlRouter.sync();\n    }\n  });\n\n  return router;\n};\n\n/**\n * The UI-Router providers, for use in your application bootstrap\n *\n * @example\n * ```js\n *\n * bootstrap(UIView, [\n *     ...UIROUTER_PROVIDERS,\n *     ...HTTP_PROVIDERS,\n *     provide(UIRouterConfig, { useClass: MyUIRouterConfig })\n * ]);\n * ```\n */\n\nexport const UIROUTER_PROVIDERS: ProviderLike[] = [\n  { provide: UIRouter, useFactory: uiRouterFactory, deps: [UIRouterConfig, UIRouterLocation, Injector] },\n\n  { provide: UIRouterLocation, useClass: UIRouterLocation },\n\n  { provide: StateService, useFactory: (r: UIRouter) => { return r.stateService; }, deps: [UIRouter]},\n\n  { provide: TransitionService, useFactory: (r: UIRouter) => { return r.transitionService; }, deps: [UIRouter]},\n\n  { provide: UrlMatcherFactory, useFactory: (r: UIRouter) => { return r.urlMatcherFactory; }, deps: [UIRouter]},\n\n  { provide: UrlRouter, useFactory: (r: UIRouter) => { return r.urlRouter; }, deps: [UIRouter]},\n\n  { provide: ViewService, useFactory: (r: UIRouter) => { return r.viewService; }, deps: [UIRouter]},\n\n  { provide: StateRegistry, useFactory: (r: UIRouter) => { return r.stateRegistry; }, deps: [UIRouter]},\n\n  { provide: Globals, useFactory: (r: UIRouter) => { return r.globals; }, deps: [UIRouter]},\n\n  { provide: UIView.PARENT_INJECT, useFactory: (r: StateRegistry) => { return { fqn: null, context: r.root() } }, deps: [StateRegistry]}\n];\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/providers.ts\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_55__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"@angular/core\",\"amd\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"commonjs\":\"@angular/core\"}\n ** module id = 55\n ** module chunks = 0 1\n **/","/** @module ng2_directives */ /** */\nimport {\n    Component, ComponentResolver, ComponentFactory,\n    ViewContainerRef, ReflectiveInjector, InputMetadata, ComponentMetadata, ViewChild\n} from '@angular/core';\nimport {provide} from \"@angular/core\";\nimport {Input} from \"@angular/core\";\nimport {ComponentRef} from \"@angular/core\";\nimport {Type} from \"@angular/core\";\n\nimport {UIRouter} from \"../../router\";\nimport {trace} from \"../../common/trace\";\nimport {Inject} from \"@angular/core\";\nimport {ViewContext, ViewConfig} from \"../../view/interface\";\nimport {Ng2ViewDeclaration} from \"../interface\";\nimport {Ng2ViewConfig} from \"../statebuilders/views\";\nimport {ResolveContext} from \"../../resolve/resolveContext\";\n\n/** @hidden */\nlet id = 0;\n\n// These are provide()d as the string UIView.PARENT_INJECT\nexport interface ParentUIViewInject {\n  context: ViewContext;\n  fqn: string;\n}\n\n\n/** @hidden */\nconst ng2ComponentInputs = (ng2CompClass) => {\n  /** Get \"@Input('foo') _foo\" inputs */\n  let props = Reflect['getMetadata']('propMetadata', ng2CompClass);\n  let _props = Object.keys(props || {})\n  // -> { string, anno[] } tuples\n      .map(key => ({ key, annoArr: props[key] }))\n      // -> to { string, anno } tuples\n      .reduce((acc, tuple) => acc.concat(tuple.annoArr.map(anno => ({ key: tuple.key, anno }))), [])\n      // Only Inputs\n      .filter(tuple => tuple.anno instanceof InputMetadata)\n      // If they have a bindingPropertyName, i.e. \"@Input('foo') _foo\", then foo, else _foo\n      .map(tuple => ({ token: tuple.anno.bindingPropertyName || tuple.key, prop: tuple.key }));\n\n  /** Get \"inputs: ['foo']\" inputs */\n  let inputs = Reflect['getMetadata']('annotations', ng2CompClass)\n  // Find the ComponentMetadata class annotation\n      .filter(x => x instanceof ComponentMetadata && !!x.inputs)\n      // Get the .inputs string array\n      .map(x => x.inputs)\n      // Flatten\n      .reduce((acc, arr) => acc.concat(arr), [])\n      .map(input => ({ token: input, prop: input }));\n\n  return _props.concat(inputs);\n};\n\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n *\n * ### Selector\n *\n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n *\n * ### Purpose\n *\n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n *\n * @example\n * ```js\n *\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n *\n * ### Named ui-views\n *\n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n *\n * @example\n * ```js\n *\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n *\n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\n@Component({\n  selector: 'ui-view, [ui-view]',\n  template: `<template #componentTarget></template>`\n  // styles: [`\n  //   .done-true {\n  //     text-decoration: line-through;\n  //     color: grey;\n  //   }`\n  // ],\n  // template: `\n  // <div style=\"padding: 1em; border: 1px solid lightgrey;\">\n  //\n  //   <div #content style=\"color: lightgrey; font-size: smaller;\">\n  //     <div>ui-view #{{uiViewData?.id}} created by '{{ parentContext?.name || \"(root)\" }}' state</div>\n  //     <div>name: (absolute) '{{uiViewData?.fqn}}' (contextual) '{{uiViewData?.name}}@{{parentContext?.name}}' </div>\n  //     <div>currently filled by: '{{(uiViewData?.config && uiViewData?.config?.viewDecl?.$context) || 'empty...'}}'</div>\n  //   </div>\n  //\n  // </div>`\n})\nexport class UIView {\n  @ViewChild('componentTarget', {read: ViewContainerRef}) componentTarget;\n  @Input('name') name: string;\n  @Input('ui-view') set _name(val) { this.name = val; }\n  componentRef: ComponentRef<any>;\n  deregister: Function;\n  uiViewData: any = {};\n\n  static PARENT_INJECT = \"UIView.PARENT_INJECT\";\n\n  constructor(\n      public router: UIRouter,\n      @Inject(UIView.PARENT_INJECT) public parent: ParentUIViewInject,\n      public compResolver: ComponentResolver,\n      public viewContainerRef: ViewContainerRef\n  ) { }\n\n  ngOnInit() {\n    let parentFqn = this.parent.fqn;\n    let name = this.name || '$default';\n\n    this.uiViewData = {\n      $type: 'ng2',\n      id: id++,\n      name: name,\n      fqn: parentFqn ? parentFqn + \".\" + name : name,\n      creationContext: this.parent.context,\n      configUpdated: this.viewConfigUpdated.bind(this),\n      config: undefined\n    };\n\n    this.deregister = this.router.viewService.registerUIView(this.uiViewData);\n  }\n\n  disposeLast() {\n    if (this.componentRef) this.componentRef.destroy();\n    this.componentRef = null;\n  }\n\n  ngOnDestroy() {\n    if (this.deregister) this.deregister();\n    this.disposeLast();\n  }\n\n  viewConfigUpdated(config: ViewConfig) {\n    if (!config) return this.disposeLast();\n    if (!(config instanceof Ng2ViewConfig)) return;\n\n    let uiViewData = this.uiViewData;\n    let viewDecl = <Ng2ViewDeclaration> config.viewDecl;\n\n    // The \"new\" viewconfig is already applied, so exit early\n    if (uiViewData.config === config) return;\n    // This is a new viewconfig.  Destroy the old component\n    this.disposeLast();\n    trace.traceUIViewConfigUpdated(uiViewData, config && config.viewDecl.$context);\n    uiViewData.config = config;\n    // The config may be undefined if there is nothing state currently targeting this UIView.\n    if (!config) return;\n\n    // Map resolves to \"useValue providers\"\n    let context = new ResolveContext(config.path);\n    let resolvables = context.getTokens().map(token => context.getResolvable(token)).filter(r => r.resolved);\n    let rawProviders = resolvables.map(r => ({ provide: r.token, useValue: r.data }));\n    rawProviders.push({ provide: UIView.PARENT_INJECT, useValue: { context: config.viewDecl.$context, fqn: uiViewData.fqn } });\n\n    // Get the component class from the view declaration. TODO: allow promises?\n    let componentType = <Type> viewDecl.component;\n\n    let createComponent = (factory: ComponentFactory<any>) => {\n      let parentInjector = this.viewContainerRef.injector;\n      let childInjector = ReflectiveInjector.resolveAndCreate(rawProviders, parentInjector);\n      let ref = this.componentRef = this.componentTarget.createComponent(factory, undefined, childInjector);\n\n      // TODO: wire uiCanExit and uiOnParamsChanged callbacks\n\n      let bindings = viewDecl['bindings'] || {};\n      var addResolvable = tuple => ({\n        prop: tuple.prop,\n        resolvable: context.getResolvable(bindings[tuple.prop] || tuple.token)\n      });\n\n      // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n      let inputTuples = ng2ComponentInputs(componentType);\n      inputTuples.map(addResolvable)\n          .filter(tuple => tuple.resolvable && tuple.resolvable.resolved)\n          .forEach(tuple => { ref.instance[tuple.prop] = tuple.resolvable.data });\n          \n      // Initiate change detection for the newly created component\n      ref.changeDetectorRef.detectChanges();\n    };\n\n    this.compResolver.resolveComponent(componentType).then(createComponent);\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/uiView.ts\n **/","/** @module ng2 */ /** */\nimport {State} from \"../../state/stateObject\";\nimport {PathNode} from \"../../path/node\";\nimport {pick, forEach} from \"../../common/common\";\nimport {ViewConfig} from \"../../view/interface\";\nimport {Ng2ViewDeclaration} from \"../interface\";\nimport {services} from \"../../common/coreservices\";\nimport {ViewService} from \"../../view/view\";\n\n/**\n * This is a [[StateBuilder.builder]] function for angular2 `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to ui-router-ng2.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n */\nexport function ng2ViewsBuilder(state: State) {\n  let views = {}, viewsObject = state.views || {\"$default\": pick(state, \"component\")};\n\n  forEach(viewsObject, function (config, name) {\n    name = name || \"$default\"; // Account for views: { \"\": { template... } }\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = \"ng2\";\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\nlet id = 0;\nexport class Ng2ViewConfig implements ViewConfig {\n  $id: number = id++;\n  loaded: boolean = true;\n\n  constructor(public path: PathNode[], public viewDecl: Ng2ViewDeclaration) { }\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/statebuilders/views.ts\n **/","/** @module ng2 */ /** */\nimport {UIRouter} from \"../router\";\n/**\n * Provides states configuration to UI-Router during application bootstrap.\n * \n * An instance of this class should be `provide()`d to the application `bootstrap()`.\n *\n * @example\n * ```js\n * import {UIROUTER_PROVIDERS, UIView} from \"ui-router-ng2\";\n * import {MyConfig} from \"./app/myConfig\";\n *\n * bootstrap(UIView, [\n *   ...UIROUTER_PROVIDERS,\n *   provide(UIRouterConfig, { useClass: MyConfig }\n * ]);\n * ```\n *\n * The application's initial states should be registered with the [[UIRouter.stateRegistry]].\n * Any global configuration (transition hooks, parameter types, etc) should be done here.\n *\n * @example\n * ```js\n *\n * // myconfig.ts\n * import {STATES} from \"./states\";\n * import {registerAuthHook} from \"./hooks\";\n * import {registerSlugType} from \"./paramtypes\";\n *\n * export class MyConfig {\n *   configure(uiRouter: UIRouter) {\n *     STATES.forEach(state => uiRouter.stateRegistry.register(state));\n *     registerAuthHook(uiRouter.transitionService);\n *     registerSlugType(uiRouter.urlMatcherFactory);\n *   }\n * }\n *\n * // states.ts\n * import {FooComponent} from \"./foo.component\";\n * import {BarComponent} from \"./bar.component\";\n * import BAZ_MODULE_STATES from \"./baz/states\";\n *\n * export let STATES = [\n *   { name: 'foo', url: '/url', component: FooComponent},\n *   { name: 'bar', url: '/bar', component: BarComponent}\n * ].concat(BAZ_MODULE_STATES);\n *\n * // hooks.ts\n * export function registerAuthHook(transitionService: TransitionService) {\n *   let requireAuthentication = (transition: Transition, injector: Injector) {\n *     if (!Injector.get(AuthService).isAuthenticated()) {\n *       return Injector.get(StateService).target('login');\n *     }\n *   }\n *   transitionService.onBefore({ to: (state) => state.requiresAuth }, requireAuthentication);\n * }\n *\n *\n * // paramtypes.ts\n * export function registerSlugType(urlMatcherFactory: UrlMatcherFactory) {\n *   let builtInStringType = urlMatcherFactory.type('string');\n *   let slugType = Object.assign({}, builtInStringType, { encode: (str) => str, decode: (str) => str });\n *   urlMatcherFactory.type('slug', slugType);\n * }\n * ```\n *\n */\nexport class UIRouterConfig {\n  /**\n   * Configures UI-Router before bootstrap\n   *\n   * An app should perform UI-Router configuration here, such as registering the initial set of states,\n   * parameter types, defining global hooks, etc.\n   *\n   * @param uiRouter the uiRouter instance being configured\n   */\n  public configure(uiRouter: UIRouter) {\n\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/uiRouterConfig.ts\n **/","/** @module ng2 */ /** */\nimport {HashLocationStrategy, PlatformLocation, LocationStrategy} from \"@angular/common\";\nimport {Injectable} from \"@angular/core\";\n\nimport {services} from \"../common/coreservices\";\nimport {isDefined} from \"../common/predicates\";\nimport {applyPairs} from \"../common/common\";\nimport {beforeAfterSubstr} from \"../common/strings\";\n\nconst splitOnHash = beforeAfterSubstr(\"#\");\nconst splitOnEquals = beforeAfterSubstr(\"=\");\nconst splitOnQuestionMark = beforeAfterSubstr(\"?\");\n\n@Injectable()\nexport class UIRouterLocation {\n  isHashBang: boolean;\n  hashPrefix: string = \"\";\n\n  constructor(\n      public locationStrategy: LocationStrategy,\n      public platformLocation: PlatformLocation\n  ) {\n    this.isHashBang = locationStrategy instanceof HashLocationStrategy;\n  }\n\n  init() {\n    let loc = <any> services.location;\n    let locSt = this.locationStrategy;\n\n    if (this.isHashBang) {\n      loc.path = () =>\n          splitOnHash(splitOnQuestionMark(locSt.path())[0])[0];\n      loc.hash = () =>\n          splitOnHash(splitOnHash(this.platformLocation.hash)[1])[1];\n    } else {\n      let basepath = locSt.getBaseHref();\n      let basepathRegExp = new RegExp(\"^\" + basepath);\n      let replace = (basepath[basepath.length - 1] === '/') ? \"/\" : \"\";\n      loc.path = () =>\n          splitOnHash(splitOnQuestionMark(locSt.path())[0])[0].replace(basepathRegExp, replace);\n      loc.hash = () =>\n          splitOnHash(this.platformLocation.hash)[1];\n    }\n\n\n    loc.search = () => {\n      let queryString = splitOnHash(splitOnQuestionMark(locSt.path())[1])[0];\n      return queryString.split(\"&\").map(kv => splitOnEquals(kv)).reduce(applyPairs, {});\n    };\n\n    loc.url = (url) => {\n      if(isDefined(url)) {\n        let split = splitOnQuestionMark(url);\n        locSt.pushState(null, null, split[0], split[1]);\n      }\n      return locSt.path()\n    };\n\n    loc.replace = () => {\n      console.log(new Error('$location.replace() not impl'))\n    };\n\n    loc.onChange = cb => locSt.onPopState(cb);\n\n    let locCfg = <any> services.locationConfig;\n\n    locCfg.port = () => null;\n    locCfg.protocol = () => null;\n    locCfg.host = () => null;\n    locCfg.baseHref = () => locSt.getBaseHref();\n    locCfg.html5Mode = () => !this.isHashBang;\n    locCfg.hashPrefix = (newprefix: string): string => {\n      if(isDefined(newprefix)) {\n        this.hashPrefix = newprefix;\n      }\n      return this.hashPrefix;\n    };\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/location.ts\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_60__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"@angular/common\",\"amd\":\"@angular/common\",\"commonjs2\":\"@angular/common\",\"commonjs\":\"@angular/common\"}\n ** module id = 60\n ** module chunks = 0 1\n **/","/**\n * The UI-Router Angular 2 directives:\n *\n * - [[UIView]]: A viewport for routed components\n * - [[UISref]]: A state ref to a target state; navigates when clicked\n * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\n *\n * @preferred @module ng2_directives\n */ /** */\nimport {UISref, AnchorUISref} from \"./uiSref\";\nimport {UISrefActive} from \"./uiSrefActive\";\nimport {UIView} from \"./uiView\";\nimport {UISrefStatus} from \"./uiSrefStatus\";\n\nexport * from \"./uiView\";\nexport * from \"./uiSref\";\nexport * from \"./uiSrefStatus\";\nexport * from \"./uiSrefActive\";\n\n/**\n * References to the UI-Router directive classes, for use within a @Component's `directives:` property\n *\n * @example\n * ```js\n *\n * Component({\n *   selector: 'my-cmp',\n *   directives: [UIROUTER_DIRECTIVES],\n *   template: '<a uiSref=\"foo\">Foo</a>'\n * })\n * ```\n */\nexport let UIROUTER_DIRECTIVES = [UISref, AnchorUISref, UIView, UISrefActive, UISrefStatus];\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/directives.ts\n **/","/** @module ng2_directives */ /** */\nimport {UIRouter} from \"../../router\";\nimport {Directive, Inject, Input} from \"@angular/core\";\nimport {Optional} from \"@angular/core\";\nimport {ElementRef} from \"@angular/core\";\nimport {Renderer} from \"@angular/core\";\nimport {UIView, ParentUIViewInject} from \"./uiView\";\nimport {extend} from \"../../common/common\";\n\n/** @hidden */\n@Directive({ selector: 'a[uiSref]' })\nexport class AnchorUISref {\n  constructor(public _el: ElementRef, public _renderer: Renderer) { }\n  update(href) {\n    this._renderer.setElementProperty(this._el.nativeElement, 'href', href);\n  }\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n *\n * ### Purpose\n *\n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]], \n * and optionally supply state parameter values and transition options.\n *\n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n *\n * ### Selector\n *\n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n * \n * ### Inputs\n * \n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n *\n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n *\n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n *\n * @example\n * ```html\n *\n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n *\n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n *\n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n *\n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\n@Directive({\n  selector: '[uiSref]',\n  host: { '(click)': 'go()' }\n})\nexport class UISref {\n  @Input('uiSref') state: string;\n  @Input('uiParams') params: any;\n  @Input('uiOptions') options: any;\n\n  constructor(\n      private _router: UIRouter,\n      @Inject(UIView.PARENT_INJECT) public parent: ParentUIViewInject,\n      @Optional() private _anchorUISref: AnchorUISref\n  ) { }\n\n  set \"uiSref\"(val) { this.state = val; this.update(); }\n  set \"uiParams\"(val) { this.params = val; this.update(); }\n  set \"uiOptions\"(val) { this.options = val; this.update(); }\n\n  ngOnInit() {\n    this.update();\n  }\n\n  update() {\n    if (this._anchorUISref) {\n      this._anchorUISref.update(this._router.stateService.href(this.state, this.params, this.getOptions()));\n    }\n  }\n\n  getOptions() {\n    let defOpts = { relative: this.parent && this.parent.context && this.parent.context.name, inherit: true };\n    return extend(defOpts, this.options || {});\n  }\n\n  go() {\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/uiSref.ts\n **/","/** @module ng2_directives */ /** */\nimport {Directive, Input, ElementRef, Host, Renderer} from \"@angular/core\";\nimport {UISrefStatus, SrefStatus} from \"./uiSrefStatus\";\n\n/**\n * A directive that adds a CSS class when a `uiSref` is active.\n *\n * ### Purpose\n *\n * This directive should be paired with a [[UISref]], and is used to apply a CSS class to the element when\n * the state that the `uiSref` targets is active.\n *\n * ### Selectors\n *\n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is directly active\n *\n * ### Inputs\n *\n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when active\n *\n * @example\n * ```html\n *\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Foo Bar #{{bar.id}}</a>\n * ```\n */\n@Directive({\n  selector: '[uiSrefActive],[uiSrefActiveEq]'\n})\nexport class UISrefActive {\n\n  private _classes: string[] = [];\n  @Input('uiSrefActive') set active(val) { this._classes = val.split(\"\\s+\")};\n\n  private _classesEq: string[] = [];\n  @Input('uiSrefActiveEq') set activeEq(val) { this._classesEq = val.split(\"\\s+\")};\n\n  constructor(uiSrefStatus: UISrefStatus, rnd: Renderer, @Host() host: ElementRef) {\n    uiSrefStatus.uiSrefStatus.subscribe((next: SrefStatus) => {\n      this._classes.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.active));\n      this._classesEq.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.exact));\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/uiSrefActive.ts\n **/","/** @module ng2_directives */ /** */\nimport {Directive, Output, EventEmitter} from \"@angular/core\";\nimport {StateService} from \"../../state/stateService\";\nimport {UISref} from \"./uiSref\";\nimport {PathNode} from \"../../path/node\";\nimport {TransitionService} from \"../../transition/transitionService\";\nimport {Transition} from \"../../transition/transition\";\nimport {TargetState} from \"../../state/targetState\";\nimport {TreeChanges} from \"../../transition/interface\";\nimport {State} from \"../../state/stateObject\";\nimport {anyTrueR, tail, unnestR} from \"../../common/common\";\nimport {UIRouterGlobals, Globals} from \"../../globals\";\nimport {Param} from \"../../params/param\";\nimport {PathFactory} from \"../../path/pathFactory\";\n\n/**\n * uiSref status booleans \n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n}\n\n/**\n * A directive (which pairs with a [[UISref]]) and emits events when the UISref status changes.\n *\n * This directive is used by the [[UISrefActive]] directive.\n * \n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`\n * \n * The values from this event can be captured and stored on a component, then applied (perhaps using ngClass).\n *\n * This API is subject to change.\n */\n@Directive({ selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]' })\nexport class UISrefStatus {\n  private _deregisterHook;\n\n  // current statuses of the state/params the uiSref directive is linking to\n  @Output(\"uiSrefStatus\") uiSrefStatus = new EventEmitter<SrefStatus>(false);\n\n  status: SrefStatus = {\n    active: false,\n    exact: false,\n    entering: false,\n    exiting: false\n  };\n\n  constructor(transitionService: TransitionService,\n              private _globals: Globals,\n              private _stateService: StateService,\n              public sref: UISref) {\n    this._deregisterHook = transitionService.onStart({}, $transition$ => this.processTransition($transition$));\n  }\n\n  ngOnInit() {\n    let lastTrans = this._globals.transitionHistory.peekTail();\n    if (lastTrans != null) {\n      this.processTransition(lastTrans);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._deregisterHook) {\n      this._deregisterHook();\n    }\n    this._deregisterHook = null;\n  }\n\n  private _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\n\n  private processTransition($transition$: Transition) {\n    let sref = this.sref;\n\n    let status: SrefStatus = <any> {\n      active: false,\n      exact: false,\n      entering: false,\n      exiting: false\n    };\n\n    let srefTarget: TargetState = this._stateService.target(sref.state, sref.params, sref.getOptions());\n    if (!srefTarget.exists()) {\n      return this._setStatus(status);\n    }\n\n\n    /**\n     * Returns a Predicate<PathNode[]> that returns true when the target state (and any param values)\n     * match the (tail of) the path, and the path's param values\n     */\n    const pathMatches = (target: TargetState) => {\n      let state: State = target.$state();\n      let targetParamVals = target.params();\n      let targetPath: PathNode[] = PathFactory.buildPath(target);\n      let paramSchema: Param[] = targetPath.map(node => node.paramSchema)\n          .reduce(unnestR, [])\n          .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n      return (path: PathNode[]) => {\n        let tailNode = tail(path);\n        if (!tailNode || tailNode.state !== state) return false;\n        var paramValues = PathFactory.paramValues(path);\n        return Param.equals(paramSchema, paramValues, targetParamVals);\n      };\n    };\n\n    const isTarget = pathMatches(srefTarget);\n\n    /**\n     * Given path: [c, d] appendTo: [a, b]),\n     * Expands the path to [c], [c, d]\n     * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n     */\n    function spreadToSubPaths (path: PathNode[], appendTo: PathNode[] = []): PathNode[][] {\n      return path.map(node => appendTo.concat(PathFactory.subPath(path, n => n.state === node.state)));\n    }\n\n    let tc: TreeChanges = $transition$.treeChanges();\n    status.active = spreadToSubPaths(tc.from).map(isTarget).reduce(anyTrueR, false);\n    status.exact = isTarget(tc.from);\n    status.entering = spreadToSubPaths(tc.entering, tc.retained).map(isTarget).reduce(anyTrueR, false);\n    status.exiting = spreadToSubPaths(tc.exiting, tc.retained).map(isTarget).reduce(anyTrueR, false);\n\n    if ($transition$.isActive()) {\n      this._setStatus(status);\n    }\n\n    let update = (currentPath: PathNode[]) => () => {\n      if (this._deregisterHook == null) return; // destroyed\n      if (!$transition$.isActive()) return; // superseded\n      status.active = spreadToSubPaths(currentPath).map(isTarget).reduce(anyTrueR, false);\n      status.exact = isTarget(currentPath);\n      status.entering = status.exiting = false;\n      this._setStatus(status);\n    };\n\n    $transition$.promise.then(update(tc.to), update(tc.from));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/uiSrefStatus.ts\n **/"],"sourceRoot":""}